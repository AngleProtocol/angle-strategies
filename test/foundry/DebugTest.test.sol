// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.12;

import "./BaseTest.test.sol";
import { IEuler, IEulerMarkets, IEulerEToken, IEulerDToken } from "../../contracts/interfaces/external/euler/IEuler.sol";
import { IReserveInterestRateStrategy } from "../../contracts/interfaces/external/aave/IAave.sol";
import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface IBaseIRM {
    function baseRate() external view returns (uint256);

    function kink() external view returns (uint256);

    function slope1() external view returns (uint256);

    function slope2() external view returns (uint256);
}

contract DebugTest is BaseTest {
    using stdStorage for StdStorage;

    function setUp() public override {
        _ethereum = vm.createFork(vm.envString("ETH_NODE_URI_ETH_FOUNDRY"));
        vm.selectFork(_ethereum);

        super.setUp();
    }

    // ================================== DEPOSIT ==================================

    function testBorrow() public {
        address payable sender = payable(0x120afC8541F58cf78bE57553Adabe73CA0ee4B5d);
        IERC20 asset = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);
        address _contract = 0x4579709627CA36BCe92f51ac975746f431890930;
        bytes
            memory data = hex"848c48dae00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000e1a6d84604c5b17f5fd1fccba4c385a8b9670266000000000000000000000000000000000000000000000000000000174876e8000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000c68421f20bf6f0eb475f00b9c5484f7d0ac0331e0000000000000000000000000652b4b3d205300f9848f0431296d67ca4397f3b000000000000000000000000e1a6d84604c5b17f5fd1fccba4c385a8b9670266000000000000000000000000e1a6d84604c5b17f5fd1fccba4c385a8b967026600000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000120afc8541f58cf78be57553adabe73ca0ee4b5d00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004380df26d30c14b5d3e000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002b19210715ad62a3c0010000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000005600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000e1a6d84604c5b17f5fd1fccba4c385a8b9670266000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000004c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004200000000000000000000000001a7e4e63778b4f12a199c062f3efdd288afcbce8000000000000000000000000000000000000000000000000000000333227c0b10000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000038812aa3caf0000000000000000000000007122db0ebe4eb9b434a9f2ffe6760bc03bfbd0e00000000000000000000000001a7e4e63778b4f12a199c062f3efdd288afcbce8000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000007122db0ebe4eb9b434a9f2ffe6760bc03bfbd0e0000000000000000000000000e1a6d84604c5b17f5fd1fccba4c385a8b9670266000000000000000000000000000000000000000000002b19210715ad62a3c00000000000000000000000000000000000000000000000000000000033152e91fa000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e30000000000000000000000000000000000000000000001c500019700014d00a0c9e75c480000000000000000240e00000000000000000000000000000000000000000000000000011f0000d051005addc89785d75c86ab939e9e15bfbbb7fc086a871a7e4e63778b4f12a199c062f3efdd288afcbce800046d10421600000000000000000000000000000000000000000000000000000000000000000000000000000000000000007122db0ebe4eb9b434a9f2ffe6760bc03bfbd0e00000000000000000000000007122db0ebe4eb9b434a9f2ffe6760bc03bfbd0e0000000000000000000000000e9f183fc656656f1f17af1f2b0df79b8ff9ad8ed000000000000000000000000000000000000000000000000000000000000000102a000000000000000000000000000000000000000000000000000000024cc4c56bfee63c1e501735a26a57a0a0069dfabd41595a970faf5e1ee8b1a7e4e63778b4f12a199c062f3efdd288afcbce800a0f2fa6b66a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000003399465038000000000000000000000000004c687c80a06c4eca27a0b86991c6218b36c1d19d4a2e9eb0ce3606eb481111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000000000000cfee7c08000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000c68421f20bf6f0eb475f00b9c5484f7d0ac0331e0000000000000000000000000652b4b3d205300f9848f0431296d67ca4397f3b000000000000000000000000120afc8541f58cf78be57553adabe73ca0ee4b5d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000";
        vm.startPrank(sender);
        asset.approve(_contract, type(uint256).max);

        (bool success, bytes memory result) = _contract.call(data);
        vm.stopPrank();
    }

    // function testAave() public {
    //     IReserveInterestRateStrategy ir = IReserveInterestRateStrategy(0x27182842E098f60e3D576794A5bFFb0777E025d3);
    //     console.log("baseRate ", ir.baseVariableBorrowRate());
    //     // console.log("kink ", ir.kink());
    //     console.log("slope1 ", ir.variableRateSlope1());
    //     console.log("slope2 ", ir.variableRateSlope1());
    // }
}
