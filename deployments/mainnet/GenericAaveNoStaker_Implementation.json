{
  "address": "0xF0AbdA585f9E03aF064c9EA22126Cf98066E1c3F",
  "abi": [
    {
      "inputs": [],
      "name": "ErrorSwap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncompatibleLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolNotIncentivized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProtectedToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooSmallAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_isIncentivised",
          "type": "bool"
        }
      ],
      "name": "IncentivisedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GUARDIAN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "KEEPER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STRATEGY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "apr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "extraAmount",
          "type": "uint256"
        }
      ],
      "name": "aprAfterDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "spenders",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "changeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cooldown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cooldownSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cooldownStkAave",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasAssets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_isIncentivised",
          "type": "bool"
        },
        {
          "internalType": "address[]",
          "name": "governorList",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "keeperList",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_isIncentivised",
          "type": "bool"
        },
        {
          "internalType": "address[]",
          "name": "governorList",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "keeperList",
          "type": "address[]"
        }
      ],
      "name": "initializeAave",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isIncentivised",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lenderName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nav",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolManager",
      "outputs": [
        {
          "internalType": "contract IPoolManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "sellRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setAavePoolVariables",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleCooldownStkAave",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleIsIncentivised",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingBalanceStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstakeWindow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wantBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weightedApr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7f01e40bde3824c574e1e095325242f5fd94a0e38f3c7643ae1664e445d5c3c9",
  "receipt": {
    "to": null,
    "from": "0xfdA462548Ce04282f4B6D6619823a7C64Fdc0185",
    "contractAddress": "0xF0AbdA585f9E03aF064c9EA22126Cf98066E1c3F",
    "transactionIndex": 233,
    "gasUsed": "3573593",
    "logsBloom": "0x
    "blockHash": "0x1a085fce0e8b8df14cd9f633f383c91db813dd7d0b7f369232c2a78a46ad487c",
    "transactionHash": "0x7f01e40bde3824c574e1e095325242f5fd94a0e38f3c7643ae1664e445d5c3c9",
    "logs": [],
    "blockNumber": 14852831,
    "cumulativeGasUsed": "22221799",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ca650e45c91489812b6b51e1d5513906",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ErrorSwap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncompatibleLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolNotIncentivized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtectedToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooSmallAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isIncentivised\",\"type\":\"bool\"}],\"name\":\"IncentivisedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KEEPER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"extraAmount\",\"type\":\"uint256\"}],\"name\":\"aprAfterDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"spenders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"changeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownStkAave\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isIncentivised\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"governorList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"keeperList\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isIncentivised\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"governorList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"keeperList\",\"type\":\"address[]\"}],\"name\":\"initializeAave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isIncentivised\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lenderName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nav\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"sellRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAavePoolVariables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleCooldownStkAave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleIsIncentivised\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingBalanceStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weightedApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Angle Core Team\",\"details\":\"In this implementation, we just have to override the base functions with constant amounts as nothing is staked in an external contract\",\"kind\":\"dev\",\"methods\":{\"aprAfterDeposit(uint256)\":{\"params\":{\"extraAmount\":\"The amount to add to the lending platform\"}},\"changeAllowance(address[],address[],uint256[])\":{\"params\":{\"amounts\":\"Approval amounts for each address\",\"spenders\":\"Addresses to approve\",\"tokens\":\"Addresses of the tokens for which approvals should be made\"}},\"claimRewards()\":{\"details\":\"stkAAVE require a \\\"cooldown\\\" period of 10 days before being claimed\"},\"emergencyWithdraw(uint256)\":{\"details\":\"Does not check if any error occurs or if the amount withdrawn is correct\",\"params\":{\"amount\":\"Amount to withdraw\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasAssets()\":{\"details\":\"We're considering that the strategy has no assets if it has less than 10 of the underlying asset in total to avoid the case where there is dust remaining on the lending market we cannot withdraw everything\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initializeAave(address,string,bool,address[],address,address[])\":{\"params\":{\"_isIncentivised\":\"Whether the corresponding token is incentivized on Aave or not\",\"_strategy\":\"Reference to the strategy using this lender\",\"governorList\":\"List of addresses with governor privilege\",\"guardian\":\"Address of the guardian\",\"keeperList\":\"List of addresses with keeper privilege\",\"name\":\"Name of the lender\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"sellRewards(uint256,bytes)\":{\"details\":\"In the case of a contract lending to Aave, tokens swapped should typically be: _stkAave -> `want` or Aave -> `want`\",\"params\":{\"minAmountOut\":\"Minimum amount of `want` to receive for the swap to happen\",\"payload\":\"Bytes needed for 1Inch API\"}},\"setAavePoolVariables()\":{\"details\":\"No access control is needed here because values are fetched from Aave directlyWe expect the values concerned not to be often modified\"},\"sweep(address,address)\":{\"details\":\"Implement `_protectedTokens()` to specify any additional tokens that should be protected from sweeping in addition to `want`.\",\"params\":{\"_token\":\"The token to transfer out of this poolManager.\",\"to\":\"Address to send the tokens to.\"}},\"withdraw(uint256)\":{\"params\":{\"amount\":\"Amount to withdraw\"},\"returns\":{\"_0\":\"Amount actually withdrawn\"}}},\"title\":\"GenericAaveNoStaker\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"apr()\":{\"notice\":\"Returns an estimation of the current Annual Percentage Rate\"},\"aprAfterDeposit(uint256)\":{\"notice\":\"Returns an estimation of the current Annual Percentage Rate after a new deposit\"},\"changeAllowance(address[],address[],uint256[])\":{\"notice\":\"Changes allowance of a set of tokens to addresses\"},\"claimRewards()\":{\"notice\":\"Claim earned stkAAVE\"},\"cooldown()\":{\"notice\":\"Triggers the cooldown on Aave for this contract\"},\"deposit()\":{\"notice\":\"Deposits the current balance to the lending platform\"},\"emergencyWithdraw(uint256)\":{\"notice\":\"Withdraws as much as possible in case of emergency and sends it to the `PoolManager`\"},\"hasAssets()\":{\"notice\":\"Check if assets are currently managed by the lender\"},\"initialize(address,string,bool,address[],address,address[])\":{\"notice\":\"Wrapper on top of the `initializeAave` method\"},\"initializeAave(address,string,bool,address[],address,address[])\":{\"notice\":\"Initializer of the `GenericAave`\"},\"nav()\":{\"notice\":\"Helper function to get the current total of assets managed by the lender.\"},\"poolManager()\":{\"notice\":\"Reference to the protocol's collateral poolManager\"},\"sellRewards(uint256,bytes)\":{\"notice\":\"Swap earned _stkAave or Aave for `want` through 1Inch\"},\"setAavePoolVariables()\":{\"notice\":\"Retrieves lending pool variables like the `COOLDOWN_SECONDS` or the `UNSTAKE_WINDOW` on Aave\"},\"strategy()\":{\"notice\":\"Reference to the `Strategy`\"},\"sweep(address,address)\":{\"notice\":\"Removes tokens from this Strategy that are not the type of tokens managed by this Strategy. This may be used in case of accidentally sending the wrong kind of token to this Strategy. Tokens will be sent to `governance()`. This will fail if an attempt is made to sweep `want`, or any tokens that are protected by this Strategy. This may only be called by governance.\"},\"toggleCooldownStkAave()\":{\"notice\":\"Toggle cooldownStkAave state, which allow or not to call the coolDown stkAave each time rewards are claimed\"},\"toggleIsIncentivised()\":{\"notice\":\"Toggle isIncentivised state, to let know the lender if it should harvest aave rewards\"},\"underlyingBalanceStored()\":{\"notice\":\"Returns the current balance of aTokens\"},\"want()\":{\"notice\":\"Reference to the token lent\"},\"wantBase()\":{\"notice\":\"Base of the asset handled by the lender\"},\"weightedApr()\":{\"notice\":\"Returns an estimation of the current Annual Percentage Rate weighted by a factor\"},\"withdraw(uint256)\":{\"notice\":\"Withdraws a given amount from lender\"},\"withdrawAll()\":{\"notice\":\"Withdraws as much as possible\"}},\"notice\":\"Only deposit onto Aave lendingPool with no staking\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/OptimizerAPR/genericLender/GenericAaveNoStaker.sol\":\"GenericAaveNoStaker\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":3000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/external/AccessControlAngleUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IAccessControlAngle.sol\\\";\\n\\n/**\\n * @dev This contract is fully forked from OpenZeppelin `AccessControlUpgradeable`.\\n * The only difference is the removal of the ERC165 implementation as it's not\\n * needed in Angle.\\n *\\n * Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlAngleUpgradeable is Initializable, IAccessControlAngle {\\n    function __AccessControl_init() internal initializer {\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {}\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external override {\\n        require(account == msg.sender, \\\"71\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x19de1e61951f4337ce937af06297ce54f082244e33d4696fe8f54b5bd13b0877\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAccessControlAngle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n/// @title IAccessControl\\n/// @author Forked from OpenZeppelin\\n/// @notice Interface for `AccessControl` contracts\\ninterface IAccessControlAngle {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x8d34c4bcd7eb669fe972901727c5467541591a67a4d05e5b609c0b1642478a3a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGenericLender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IAccessControlAngle.sol\\\";\\n\\n/// @title IGenericLender\\n/// @author Yearn with slight modifications from Angle Core Team\\n/// @dev Interface for the `GenericLender` contract, the base interface for contracts interacting\\n/// with lending and yield farming platforms\\ninterface IGenericLender is IAccessControlAngle {\\n    function lenderName() external view returns (string memory);\\n\\n    function nav() external view returns (uint256);\\n\\n    function strategy() external view returns (address);\\n\\n    function apr() external view returns (uint256);\\n\\n    function weightedApr() external view returns (uint256);\\n\\n    function withdraw(uint256 amount) external returns (uint256);\\n\\n    function emergencyWithdraw(uint256 amount) external;\\n\\n    function deposit() external;\\n\\n    function withdrawAll() external returns (bool);\\n\\n    function hasAssets() external view returns (bool);\\n\\n    function aprAfterDeposit(uint256 amount) external view returns (uint256);\\n\\n    function sweep(address _token, address to) external;\\n}\\n\",\"keccak256\":\"0x716b6e4d7368a636dd2de872bf314819c8961cdcbfdd94d4dcf52302599fdae7\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n// Struct for the parameters associated to a strategy interacting with a collateral `PoolManager`\\n// contract\\nstruct StrategyParams {\\n    // Timestamp of last report made by this strategy\\n    // It is also used to check if a strategy has been initialized\\n    uint256 lastReport;\\n    // Total amount the strategy is expected to have\\n    uint256 totalStrategyDebt;\\n    // The share of the total assets in the `PoolManager` contract that the `strategy` can access to.\\n    uint256 debtRatio;\\n}\\n\\n/// @title IPoolManagerFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the collateral poolManager contracts handling each one type of collateral for\\n/// a given stablecoin\\n/// @dev Only the functions used in other contracts of the protocol are left here\\ninterface IPoolManagerFunctions {\\n    // ============================ Yield Farming ==================================\\n\\n    function creditAvailable() external view returns (uint256);\\n\\n    function debtOutstanding() external view returns (uint256);\\n\\n    function report(\\n        uint256 _gain,\\n        uint256 _loss,\\n        uint256 _debtPayment\\n    ) external;\\n\\n    // ============================= Getters =======================================\\n\\n    function getBalance() external view returns (uint256);\\n\\n    function getTotalAsset() external view returns (uint256);\\n}\\n\\n/// @title IPoolManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\n/// @dev Used in other contracts of the protocol\\ninterface IPoolManager is IPoolManagerFunctions {\\n    function stableMaster() external view returns (address);\\n\\n    function perpetualManager() external view returns (address);\\n\\n    function token() external view returns (address);\\n\\n    function totalDebt() external view returns (uint256);\\n\\n    function strategies(address _strategy) external view returns (StrategyParams memory);\\n}\\n\",\"keccak256\":\"0xc51d60159971c6a15c6cc1511eceb416927f702c2c39ab20cfcab27b152e07b3\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"./IAccessControlAngle.sol\\\";\\n\\n/// @title IStrategy\\n/// @author Inspired by Yearn with slight changes from Angle Core Team\\n/// @notice Interface for yield farming strategies\\ninterface IStrategy is IAccessControlAngle {\\n    function estimatedAPR() external view returns (uint256);\\n\\n    function poolManager() external view returns (address);\\n\\n    function want() external view returns (address);\\n\\n    function isActive() external view returns (bool);\\n\\n    function estimatedTotalAssets() external view returns (uint256);\\n\\n    function harvestTrigger(uint256 callCost) external view returns (bool);\\n\\n    function harvest() external;\\n\\n    function withdraw(uint256 _amountNeeded) external returns (uint256 amountFreed, uint256 _loss);\\n\\n    function setEmergencyExit() external;\\n\\n    function addGuardian(address _guardian) external;\\n\\n    function revokeGuardian(address _guardian) external;\\n}\\n\",\"keccak256\":\"0x4fd8ce17ef1b2e3a2f4d7c2106b946f8742fb86416045c41f236d8109bc80984\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/aave/IAave.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary DataTypes {\\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        uint40 lastUpdateTimestamp;\\n        //tokens addresses\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint8 id;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: Reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60-63: reserved\\n        //bit 64-79: reserve factor\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        uint256 data;\\n    }\\n\\n    enum InterestRateMode {\\n        NONE,\\n        STABLE,\\n        VARIABLE\\n    }\\n}\\n\\ninterface IOptionalERC20 {\\n    function decimals() external view returns (uint8);\\n}\\n\\ninterface IPriceOracle {\\n    function getAssetPrice(address _asset) external view returns (uint256);\\n\\n    function getAssetsPrices(address[] calldata _assets) external view returns (uint256[] memory);\\n\\n    function getSourceOfAsset(address _asset) external view returns (address);\\n\\n    function getFallbackOracle() external view returns (address);\\n}\\n\\ninterface IStakedAave is IERC20 {\\n    function stake(address to, uint256 amount) external;\\n\\n    function redeem(address to, uint256 amount) external;\\n\\n    function cooldown() external;\\n\\n    function claimRewards(address to, uint256 amount) external;\\n\\n    function getTotalRewardsBalance(address) external view returns (uint256);\\n\\n    function COOLDOWN_SECONDS() external view returns (uint256);\\n\\n    function stakersCooldowns(address) external view returns (uint256);\\n\\n    function UNSTAKE_WINDOW() external view returns (uint256);\\n}\\n\\n/**\\n * @title IReserveInterestRateStrategyInterface interface\\n * @dev Interface for the calculation of the interest rates\\n * @author Aave\\n */\\ninterface IReserveInterestRateStrategy {\\n    function baseVariableBorrowRate() external view returns (uint256);\\n\\n    function getMaxVariableBorrowRate() external view returns (uint256);\\n\\n    function stableRateSlope1() external view returns (uint256);\\n\\n    function stableRateSlope2() external view returns (uint256);\\n\\n    function variableRateSlope1() external view returns (uint256);\\n\\n    function variableRateSlope2() external view returns (uint256);\\n\\n    function OPTIMAL_UTILIZATION_RATE() external view returns (uint256);\\n\\n    function calculateInterestRates(\\n        address reserve,\\n        uint256 availableLiquidity,\\n        uint256 totalStableDebt,\\n        uint256 totalVariableDebt,\\n        uint256 averageStableBorrowRate,\\n        uint256 reserveFactor\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 liquidityRate,\\n            uint256 stableBorrowRate,\\n            uint256 variableBorrowRate\\n        );\\n\\n    function calculateInterestRates(\\n        address reserve,\\n        address aToken,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalStableDebt,\\n        uint256 totalVariableDebt,\\n        uint256 averageStableBorrowRate,\\n        uint256 reserveFactor\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 liquidityRate,\\n            uint256 stableBorrowRate,\\n            uint256 variableBorrowRate\\n        );\\n}\\n\",\"keccak256\":\"0x88a451bf56e34d8e3a7e868ce580988bc5361b873589530ec64d943b74c03219\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/aave/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\ninterface IAaveIncentivesController {\\n    /**\\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n     * @param user The address of the user\\n     * @return The rewards\\n     **/\\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n     * @param amount Amount of rewards to claim\\n     * @param to Address that will be receiving the rewards\\n     * @return Rewards claimed\\n     **/\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n     * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n     * @param amount Amount of rewards to claim\\n     * @param user Address to check and claim rewards\\n     * @param to Address that will be receiving the rewards\\n     * @return Rewards claimed\\n     **/\\n    function claimRewardsOnBehalf(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address user,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev returns the unclaimed rewards of the user\\n     * @param user the address of the user\\n     * @return the unclaimed user rewards\\n     */\\n    function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n    /**\\n     * @dev for backward compatibility with previous implementation of the Incentives controller\\n     */\\n    function REWARD_TOKEN() external view returns (address);\\n\\n    function getDistributionEnd() external view returns (uint256);\\n\\n    function getAssetData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function assets(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 emissionPerSecond,\\n            uint256 index,\\n            uint256 lastUpdateTimestamp\\n        );\\n\\n    function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond) external;\\n}\\n\",\"keccak256\":\"0x634405520d0adbf5c347c0759da20d78b197d9c32b81da39db39799ed4e6b236\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/aave/IAaveToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IAaveIncentivesController.sol\\\";\\nimport \\\"./ILendingPool.sol\\\";\\n\\ninterface IScaledBalanceToken {\\n    /**\\n     * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n     * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n     * @param user The user whose balance is calculated\\n     * @return The scaled balance of the user\\n     **/\\n    function scaledBalanceOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the scaled balance of the user and the scaled total supply.\\n     * @param user The address of the user\\n     * @return The scaled balance of the user\\n     * @return The scaled balance and the scaled total supply\\n     **/\\n    function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n    /**\\n     * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n     * @return The scaled total supply\\n     **/\\n    function scaledTotalSupply() external view returns (uint256);\\n}\\n\\n/**\\n * @title IVariableDebtToken\\n * @author Aave\\n * @notice Defines the basic interface for a variable debt token.\\n **/\\ninterface IVariableDebtToken is IERC20, IScaledBalanceToken {\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param from The address performing the mint\\n     * @param onBehalfOf The address of the user on which behalf minting has been performed\\n     * @param value The amount to be minted\\n     * @param index The last index of the reserve\\n     **/\\n    event Mint(address indexed from, address indexed onBehalfOf, uint256 value, uint256 index);\\n\\n    /**\\n     * @dev Mints debt token to the `onBehalfOf` address\\n     * @param user The address receiving the borrowed underlying, being the delegatee in case\\n     * of credit delegate, or same as `onBehalfOf` otherwise\\n     * @param onBehalfOf The address receiving the debt tokens\\n     * @param amount The amount of debt being minted\\n     * @param index The variable debt index of the reserve\\n     * @return `true` if the the previous balance of the user is 0\\n     **/\\n    function mint(\\n        address user,\\n        address onBehalfOf,\\n        uint256 amount,\\n        uint256 index\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when variable debt is burnt\\n     * @param user The user which debt has been burned\\n     * @param amount The amount of debt being burned\\n     * @param index The index of the user\\n     **/\\n    event Burn(address indexed user, uint256 amount, uint256 index);\\n\\n    /**\\n     * @dev Burns user variable debt\\n     * @param user The user which debt is burnt\\n     * @param index The variable debt index of the reserve\\n     **/\\n    function burn(\\n        address user,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n\\n    /**\\n     * @dev Returns the address of the incentives controller contract\\n     **/\\n    function getIncentivesController() external view returns (IAaveIncentivesController);\\n}\\n\\n/**\\n * @title IInitializableAToken\\n * @notice Interface for the initialize function on AToken\\n * @author Aave\\n **/\\ninterface IInitializableAToken {\\n    /**\\n     * @dev Emitted when an aToken is initialized\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param pool The address of the associated lending pool\\n     * @param treasury The address of the treasury\\n     * @param incentivesController The address of the incentives controller for this aToken\\n     * @param aTokenDecimals the decimals of the underlying\\n     * @param aTokenName the name of the aToken\\n     * @param aTokenSymbol the symbol of the aToken\\n     * @param params A set of encoded parameters for additional initialization\\n     **/\\n    event Initialized(\\n        address indexed underlyingAsset,\\n        address indexed pool,\\n        address treasury,\\n        address incentivesController,\\n        uint8 aTokenDecimals,\\n        string aTokenName,\\n        string aTokenSymbol,\\n        bytes params\\n    );\\n\\n    /**\\n     * @dev Initializes the aToken\\n     * @param pool The address of the lending pool where this aToken will be used\\n     * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n     * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n     * @param incentivesController The smart contract managing potential incentives distribution\\n     * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n     * @param aTokenName The name of the aToken\\n     * @param aTokenSymbol The symbol of the aToken\\n     */\\n    function initialize(\\n        ILendingPool pool,\\n        address treasury,\\n        address underlyingAsset,\\n        IAaveIncentivesController incentivesController,\\n        uint8 aTokenDecimals,\\n        string calldata aTokenName,\\n        string calldata aTokenSymbol,\\n        bytes calldata params\\n    ) external;\\n}\\n\\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param from The address performing the mint\\n     * @param value The amount being\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    event Mint(address indexed from, uint256 value, uint256 index);\\n\\n    /**\\n     * @dev Mints `amount` aTokens to `user`\\n     * @param user The address receiving the minted tokens\\n     * @param amount The amount of tokens getting minted\\n     * @param index The new liquidity index of the reserve\\n     * @return `true` if the the previous balance of the user was 0\\n     */\\n    function mint(\\n        address user,\\n        uint256 amount,\\n        uint256 index\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted after aTokens are burned\\n     * @param from The owner of the aTokens, getting them burned\\n     * @param target The address that will receive the underlying\\n     * @param value The amount being burned\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\\n\\n    /**\\n     * @dev Emitted during the transfer action\\n     * @param from The user whose tokens are being transferred\\n     * @param to The recipient\\n     * @param value The amount being transferred\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n    /**\\n     * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n     * @param user The owner of the aTokens, getting them burned\\n     * @param receiverOfUnderlying The address that will receive the underlying\\n     * @param amount The amount being burned\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    function burn(\\n        address user,\\n        address receiverOfUnderlying,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n\\n    /**\\n     * @dev Mints aTokens to the reserve treasury\\n     * @param amount The amount of tokens getting minted\\n     * @param index The new liquidity index of the reserve\\n     */\\n    function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n    /**\\n     * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n     * @param from The address getting liquidated, current owner of the aTokens\\n     * @param to The recipient\\n     * @param value The amount of tokens getting transferred\\n     **/\\n    function transferOnLiquidation(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external;\\n\\n    /**\\n     * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\n     * assets in borrow(), withdraw() and flashLoan()\\n     * @param user The recipient of the underlying\\n     * @param amount The amount getting transferred\\n     * @return The amount transferred\\n     **/\\n    function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @dev Invoked to execute actions on the aToken side after a repayment.\\n     * @param user The user executing the repayment\\n     * @param amount The amount getting repaid\\n     **/\\n    function handleRepayment(address user, uint256 amount) external;\\n\\n    /**\\n     * @dev Returns the address of the incentives controller contract\\n     **/\\n    function getIncentivesController() external view returns (IAaveIncentivesController);\\n\\n    /**\\n     * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n     **/\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc1894f0c5b73bf5ea18b87cb1b3b375c9a33b6671de20bdb90aa5523ea719c28\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/aave/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport { DataTypes } from \\\"./IAave.sol\\\";\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n    event MarketIdSet(string newMarketId);\\n    event LendingPoolUpdated(address indexed newAddress);\\n    event ConfigurationAdminUpdated(address indexed newAddress);\\n    event EmergencyAdminUpdated(address indexed newAddress);\\n    event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n    event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n    event PriceOracleUpdated(address indexed newAddress);\\n    event LendingRateOracleUpdated(address indexed newAddress);\\n    event ProxyCreated(bytes32 id, address indexed newAddress);\\n    event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n    function getMarketId() external view returns (string memory);\\n\\n    function setMarketId(string calldata marketId) external;\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function getLendingPool() external view returns (address);\\n\\n    function setLendingPoolImpl(address pool) external;\\n\\n    function getLendingPoolConfigurator() external view returns (address);\\n\\n    function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n    function getLendingPoolCollateralManager() external view returns (address);\\n\\n    function setLendingPoolCollateralManager(address manager) external;\\n\\n    function getPoolAdmin() external view returns (address);\\n\\n    function setPoolAdmin(address admin) external;\\n\\n    function getEmergencyAdmin() external view returns (address);\\n\\n    function setEmergencyAdmin(address admin) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address priceOracle) external;\\n\\n    function getLendingRateOracle() external view returns (address);\\n\\n    function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\\ninterface ILendingPool {\\n    /**\\n     * @dev Emitted on deposit()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the deposit\\n     * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n     * @param amount The amount deposited\\n     * @param referral The referral code used\\n     **/\\n    event Deposit(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referral\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserve The address of the underlyng asset being withdrawn\\n     * @param user The address initiating the withdrawal, owner of aTokens\\n     * @param to Address that will receive the underlying\\n     * @param amount The amount to be withdrawn\\n     **/\\n    event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserve The address of the underlying asset being borrowed\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n     * initiator of the transaction on flashLoan()\\n     * @param onBehalfOf The address that will be getting the debt\\n     * @param amount The amount borrowed out\\n     * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n     * @param borrowRate The numeric rate at which the user has borrowed\\n     * @param referral The referral code used\\n     **/\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint256 borrowRateMode,\\n        uint256 borrowRate,\\n        uint16 indexed referral\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\n     * @param amount The amount repaid\\n     **/\\n    event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\\n\\n    /**\\n     * @dev Emitted on swapBorrowRateMode()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user swapping his rate mode\\n     * @param rateMode The rate mode that the user wants to swap to\\n     **/\\n    event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user for which the rebalance has been executed\\n     **/\\n    event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on flashLoan()\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param premium The fee flash borrowed\\n     * @param referralCode The referral code used\\n     **/\\n    event FlashLoan(\\n        address indexed target,\\n        address indexed initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        uint256 premium,\\n        uint16 referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted when the pause is triggered.\\n     */\\n    event Paused();\\n\\n    /**\\n     * @dev Emitted when the pause is lifted.\\n     */\\n    event Unpaused();\\n\\n    /**\\n     * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n     * LendingPoolCollateral manager using a DELEGATECALL\\n     * This allows to have the events in the generated ABI for LendingPool.\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n     * @param liquidator The address of the liquidator\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed debtAsset,\\n        address indexed user,\\n        uint256 debtToCover,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveAToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n     * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n     * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n     * gets added to the LendingPool ABI\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param liquidityRate The new liquidity rate\\n     * @param stableBorrowRate The new stable borrow rate\\n     * @param variableBorrowRate The new variable borrow rate\\n     * @param liquidityIndex The new liquidity index\\n     * @param variableBorrowIndex The new variable borrow index\\n     **/\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to deposit\\n     * @param amount The amount to be deposited\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to Address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     **/\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     **/\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     **/\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 rateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n     * @param asset The address of the underlying asset borrowed\\n     * @param rateMode The rate mode that the user wants to swap to\\n     **/\\n    function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n    /**\\n     * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n     *        borrowed at a stable rate and depositors are not earning enough\\n     * @param asset The address of the underlying asset borrowed\\n     * @param user The address of the user to be rebalanced\\n     **/\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n     * @param asset The address of the underlying asset deposited\\n     * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n     **/\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n    /**\\n     * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n     * For further details please visit https://developers.aave.com\\n     * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n     * @param assets The addresses of the assets being flash-borrowed\\n     * @param amounts The amounts amounts being flash-borrowed\\n     * @param modes Types of the debt to open if the flash loan is not returned:\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalCollateralETH the total collateral in ETH of the user\\n     * @return totalDebtETH the total debt in ETH of the user\\n     * @return availableBorrowsETH the borrowing power left of the user\\n     * @return currentLiquidationThreshold the liquidation threshold of the user\\n     * @return ltv the loan to value of the user\\n     * @return healthFactor the current health factor of the user\\n     **/\\n    function getUserAccountData(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    function initReserve(\\n        address reserve,\\n        address aTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\\n\\n    function setConfiguration(address reserve, uint256 configuration) external;\\n\\n    /**\\n     * @dev Returns the configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The configuration of the reserve\\n     **/\\n    function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @dev Returns the configuration of the user across all the reserves\\n     * @param user The user address\\n     * @return The configuration of the user\\n     **/\\n    function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n    /**\\n     * @dev Returns the normalized income normalized income of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the normalized variable debt per unit of asset\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 balanceFromAfter,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    function getReservesList() external view returns (address[] memory);\\n\\n    function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n    function setPause(bool val) external;\\n\\n    function paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5390fdb6f4fb3b402dfa54b68eb0f90b5b0e5ff93c9934e9c8064c596ea16ada\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/aave/IProtocolDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport { ILendingPoolAddressesProvider } from \\\"./ILendingPool.sol\\\";\\n\\ninterface IProtocolDataProvider {\\n    struct TokenData {\\n        string symbol;\\n        address tokenAddress;\\n    }\\n\\n    function ADDRESSES_PROVIDER() external view returns (ILendingPoolAddressesProvider);\\n\\n    function getAllReservesTokens() external view returns (TokenData[] memory);\\n\\n    function getAllATokens() external view returns (TokenData[] memory);\\n\\n    function getReserveConfigurationData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 decimals,\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            uint256 reserveFactor,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive,\\n            bool isFrozen\\n        );\\n\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n\\n    function getUserReserveData(address asset, address user)\\n        external\\n        view\\n        returns (\\n            uint256 currentATokenBalance,\\n            uint256 currentStableDebt,\\n            uint256 currentVariableDebt,\\n            uint256 principalStableDebt,\\n            uint256 scaledVariableDebt,\\n            uint256 stableBorrowRate,\\n            uint256 liquidityRate,\\n            uint40 stableRateLastUpdated,\\n            bool usageAsCollateralEnabled\\n        );\\n\\n    function getReserveTokensAddresses(address asset)\\n        external\\n        view\\n        returns (\\n            address aTokenAddress,\\n            address stableDebtTokenAddress,\\n            address variableDebtTokenAddress\\n        );\\n}\\n\",\"keccak256\":\"0x8e0adbd6ac16779899c9ff96e6dba25cbab043722fef022543c7ce06ea62e026\",\"license\":\"GPL-3.0\"},\"contracts/strategies/OptimizerAPR/genericLender/GenericAaveNoStaker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./GenericAaveUpgradeable.sol\\\";\\n\\n/// @title GenericAaveNoStaker\\n/// @author  Angle Core Team\\n/// @notice Only deposit onto Aave lendingPool with no staking\\n/// @dev In this implementation, we just have to override the base functions with constant amounts as nothing is\\n/// staked in an external contract\\ncontract GenericAaveNoStaker is GenericAaveUpgradeable {\\n    // ================================ Constructor ================================\\n\\n    /// @notice Wrapper on top of the `initializeAave` method\\n    function initialize(\\n        address _strategy,\\n        string memory name,\\n        bool _isIncentivised,\\n        address[] memory governorList,\\n        address guardian,\\n        address[] memory keeperList\\n    ) external {\\n        initializeAave(_strategy, name, _isIncentivised, governorList, guardian, keeperList);\\n    }\\n\\n    // =========================== Virtual Functions ===============================\\n\\n    function _stake(uint256) internal override returns (uint256) {}\\n\\n    function _unstake(uint256 amount) internal pure override returns (uint256) {\\n        return amount;\\n    }\\n\\n    /// @notice Gets current staked balance (e.g 0 if nothing is staked)\\n    function _stakedBalance() internal pure override returns (uint256) {\\n        return 0;\\n    }\\n\\n    /// @notice Get stakingAPR after staking an additional `amount`: in this case since nothing\\n    /// is staked, it simply returns 0\\n    function _stakingApr(uint256) internal pure override returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xbbfe2792508ba4fb2bb2d2aedc0885519e8ea32d1992c503ce2bc53092c780b9\",\"license\":\"GPL-3.0\"},\"contracts/strategies/OptimizerAPR/genericLender/GenericAaveUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport { DataTypes, IStakedAave, IReserveInterestRateStrategy } from \\\"../../../interfaces/external/aave/IAave.sol\\\";\\nimport { IProtocolDataProvider } from \\\"../../../interfaces/external/aave/IProtocolDataProvider.sol\\\";\\nimport { ILendingPool } from \\\"../../../interfaces/external/aave/ILendingPool.sol\\\";\\nimport { IAaveIncentivesController } from \\\"../../../interfaces/external/aave/IAaveIncentivesController.sol\\\";\\nimport { IAToken, IVariableDebtToken } from \\\"../../../interfaces/external/aave/IAaveToken.sol\\\";\\nimport \\\"./GenericLenderBaseUpgradeable.sol\\\";\\n\\n/// @title GenericAave\\n/// @author Forked from https://github.com/Grandthrax/yearnV2-generic-lender-strat/blob/master/contracts/GenericLender/GenericAave.sol\\n/// @notice A contract to lend any supported ERC20 to Aave and potentially stake them in an external staking contract\\n/// @dev This contract is just a base implementation which can be overriden depending on the staking contract on which to stake\\n/// or not the aTokens\\nabstract contract GenericAaveUpgradeable is GenericLenderBaseUpgradeable {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    // ======================== Reference to contract ==============================\\n    AggregatorV3Interface private constant oracle = AggregatorV3Interface(0x547a514d5e3769680Ce22B2361c10Ea13619e8a9);\\n\\n    // ========================== Aave Protocol Addresses ==========================\\n\\n    address private constant _aave = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\\n    IStakedAave private constant _stkAave = IStakedAave(0x4da27a545c0c5B758a6BA100e3a049001de870f5);\\n    IAaveIncentivesController private constant _incentivesController =\\n        IAaveIncentivesController(0xd784927Ff2f95ba542BfC824c8a8a98F3495f6b5);\\n    ILendingPool internal constant _lendingPool = ILendingPool(0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9);\\n    IProtocolDataProvider private constant _protocolDataProvider =\\n        IProtocolDataProvider(0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d);\\n\\n    // ========================= Constants and Parameters ==========================\\n    uint256 internal constant _SECONDS_IN_YEAR = 365 days;\\n    uint256 public cooldownSeconds;\\n    uint256 public unstakeWindow;\\n    bool public cooldownStkAave;\\n    bool public isIncentivised;\\n    IAToken internal _aToken;\\n\\n    uint256[47] private __gapAaveLender;\\n\\n    // =================================== Event ===================================\\n\\n    event IncentivisedUpdated(bool _isIncentivised);\\n\\n    // =================================== Error ===================================\\n\\n    error PoolNotIncentivized();\\n\\n    // ================================ Constructor ================================\\n\\n    /// @notice Initializer of the `GenericAave`\\n    /// @param _strategy Reference to the strategy using this lender\\n    /// @param name Name of the lender\\n    /// @param _isIncentivised Whether the corresponding token is incentivized on Aave or not\\n    /// @param governorList List of addresses with governor privilege\\n    /// @param guardian Address of the guardian\\n    /// @param keeperList List of addresses with keeper privilege\\n    function initializeAave(\\n        address _strategy,\\n        string memory name,\\n        bool _isIncentivised,\\n        address[] memory governorList,\\n        address guardian,\\n        address[] memory keeperList\\n    ) public {\\n        _initialize(_strategy, name, governorList, guardian, keeperList);\\n\\n        _setAavePoolVariables();\\n        if (_isIncentivised && address(_aToken.getIncentivesController()) == address(0)) revert PoolNotIncentivized();\\n        isIncentivised = _isIncentivised;\\n        cooldownStkAave = true;\\n        IERC20(address(want)).safeApprove(address(_lendingPool), type(uint256).max);\\n        // Approve swap router spend\\n        IERC20(address(_stkAave)).safeApprove(oneInch, type(uint256).max);\\n        IERC20(address(_aave)).safeApprove(oneInch, type(uint256).max);\\n    }\\n\\n    // ============================= External Functions ============================\\n\\n    /// @notice Deposits the current balance to the lending platform\\n    function deposit() external override onlyRole(STRATEGY_ROLE) {\\n        uint256 balance = want.balanceOf(address(this));\\n        // Aave doesn't allow null deposits\\n        if (balance == 0) return;\\n        _deposit(balance);\\n        // We don't stake balance but the whole aTokenBalance\\n        // if some dust has been kept idle\\n        _stake(_balanceAtoken());\\n    }\\n\\n    /// @notice Withdraws a given amount from lender\\n    /// @param amount Amount to withdraw\\n    /// @return Amount actually withdrawn\\n    function withdraw(uint256 amount) external override onlyRole(STRATEGY_ROLE) returns (uint256) {\\n        return _withdraw(amount);\\n    }\\n\\n    /// @notice Withdraws as much as possible in case of emergency and sends it to the `PoolManager`\\n    /// @param amount Amount to withdraw\\n    /// @dev Does not check if any error occurs or if the amount withdrawn is correct\\n    function emergencyWithdraw(uint256 amount) external override onlyRole(GUARDIAN_ROLE) {\\n        _unstake(amount);\\n        _lendingPool.withdraw(address(want), amount, address(this));\\n        want.safeTransfer(address(poolManager), want.balanceOf(address(this)));\\n    }\\n\\n    /// @notice Withdraws as much as possible\\n    function withdrawAll() external override onlyRole(STRATEGY_ROLE) returns (bool) {\\n        uint256 invested = _nav();\\n        uint256 returned = _withdraw(invested);\\n        return returned >= invested;\\n    }\\n\\n    /// @notice Claim earned stkAAVE\\n    /// @dev stkAAVE require a \\\"cooldown\\\" period of 10 days before being claimed\\n    function claimRewards() external onlyRole(KEEPER_ROLE) {\\n        _claimRewards();\\n    }\\n\\n    /// @notice Triggers the cooldown on Aave for this contract\\n    function cooldown() external onlyRole(KEEPER_ROLE) {\\n        _stkAave.cooldown();\\n    }\\n\\n    /// @notice Retrieves lending pool variables like the `COOLDOWN_SECONDS` or the `UNSTAKE_WINDOW` on Aave\\n    /// @dev No access control is needed here because values are fetched from Aave directly\\n    /// @dev We expect the values concerned not to be often modified\\n    function setAavePoolVariables() external {\\n        _setAavePoolVariables();\\n    }\\n\\n    // ========================== External Setter Functions ========================\\n\\n    /// @notice Toggle isIncentivised state, to let know the lender if it should harvest aave rewards\\n    function toggleIsIncentivised() external onlyRole(GUARDIAN_ROLE) {\\n        isIncentivised = !isIncentivised;\\n    }\\n\\n    /// @notice Toggle cooldownStkAave state, which allow or not to call the coolDown stkAave each time rewards are claimed\\n    function toggleCooldownStkAave() external onlyRole(GUARDIAN_ROLE) {\\n        cooldownStkAave = !cooldownStkAave;\\n    }\\n\\n    // =========================== External View Functions =========================\\n\\n    /// @notice Returns the current balance of aTokens\\n    function underlyingBalanceStored() public view override returns (uint256 balance) {\\n        balance = _balanceAtoken() + _stakedBalance();\\n    }\\n\\n    /// @notice Returns an estimation of the current Annual Percentage Rate after a new deposit\\n    /// @param extraAmount The amount to add to the lending platform\\n    function aprAfterDeposit(uint256 extraAmount) external view override returns (uint256) {\\n        // i need to calculate new supplyRate after Deposit (when deposit has not been done yet)\\n        DataTypes.ReserveData memory reserveData = _lendingPool.getReserveData(address(want));\\n\\n        (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            ,\\n            ,\\n            ,\\n            uint256 averageStableBorrowRate,\\n            ,\\n            ,\\n\\n        ) = _protocolDataProvider.getReserveData(address(want));\\n\\n        uint256 newLiquidity = availableLiquidity + extraAmount;\\n\\n        (, , , , uint256 reserveFactor, , , , , ) = _protocolDataProvider.getReserveConfigurationData(address(want));\\n\\n        (uint256 newLiquidityRate, , ) = IReserveInterestRateStrategy(reserveData.interestRateStrategyAddress)\\n            .calculateInterestRates(\\n                address(want),\\n                newLiquidity,\\n                totalStableDebt,\\n                totalVariableDebt,\\n                averageStableBorrowRate,\\n                reserveFactor\\n            );\\n        uint256 incentivesRate = _incentivesRate(newLiquidity + totalStableDebt + totalVariableDebt); // total supplied liquidity in Aave v2\\n        uint256 stakingApr = _stakingApr(extraAmount);\\n\\n        return newLiquidityRate / 1e9 + incentivesRate + stakingApr; // divided by 1e9 to go from Ray to Wad\\n    }\\n\\n    // =========================== Internal Functions ==============================\\n\\n    /// @notice Internal version of the `claimRewards` function\\n    function _claimRewards() internal returns (uint256 stkAaveBalance) {\\n        stkAaveBalance = _balanceOfStkAave();\\n        // If it's the claim period claim\\n        if (stkAaveBalance > 0 && _checkCooldown() == 1) {\\n            // redeem AAVE from _stkAave\\n            _stkAave.claimRewards(address(this), type(uint256).max);\\n            _stkAave.redeem(address(this), stkAaveBalance);\\n        }\\n\\n        address[] memory claimOnTokens = new address[](1);\\n        claimOnTokens[0] = address(_aToken);\\n        // claim _stkAave from lending and borrowing, this will reset the cooldown\\n        _incentivesController.claimRewards(claimOnTokens, type(uint256).max, address(this));\\n\\n        stkAaveBalance = _balanceOfStkAave();\\n\\n        // request start of cooldown period, if there's no cooldown in progress\\n        if (cooldownStkAave && stkAaveBalance > 0 && _checkCooldown() == 0) {\\n            _stkAave.cooldown();\\n        }\\n    }\\n\\n    /// @notice Returns the `StkAAVE` balance\\n    function _balanceOfStkAave() internal view returns (uint256) {\\n        return IERC20(address(_stkAave)).balanceOf(address(this));\\n    }\\n\\n    /// @notice Returns the `aToken` balance\\n    function _balanceAtoken() internal view returns (uint256) {\\n        return _aToken.balanceOf(address(this));\\n    }\\n\\n    /// @notice Estimate the amount of `want` we will get out by swapping it for AAVE\\n    /// @param amount Amount of AAVE we want to exchange (in base 18)\\n    /// @return amount Amount of `want` we are getting\\n    /// @dev Uses Chainlink spot price. Return value will be in base of `want` (6 for USDC)\\n    function _estimatedStkAaveToWant(uint256 amount) internal view returns (uint256) {\\n        (, int256 aavePriceUSD, , , ) = oracle.latestRoundData(); // stkAavePriceUSD is in base 8\\n        // `aavePriceUSD` is in base 8, so ultimately we need to divide by `1e(18+8)\\n        return (uint256(aavePriceUSD) * amount * wantBase) / 1e26;\\n    }\\n\\n    /// @notice See `apr`\\n    function _apr() internal view override returns (uint256) {\\n        (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n\\n        ) = _protocolDataProvider.getReserveData(address(want));\\n        uint256 incentivesRate = _incentivesRate(availableLiquidity + totalStableDebt + totalVariableDebt); // total supplied liquidity in Aave v2\\n        uint256 stakingApr = _stakingApr(0);\\n\\n        return liquidityRate / 10**9 + incentivesRate + stakingApr;\\n    }\\n\\n    /// @notice Calculates APR from Liquidity Mining Program\\n    /// @param totalLiquidity Total liquidity available in the pool\\n    function _incentivesRate(uint256 totalLiquidity) internal view returns (uint256) {\\n        // only returns != 0 if the incentives are in place at the moment.\\n        // it will fail if the isIncentivised is set to true but there are no incentives\\n        if (isIncentivised && block.timestamp < _incentivesController.getDistributionEnd() && totalLiquidity > 0) {\\n            uint256 _emissionsPerSecond;\\n            (, _emissionsPerSecond, ) = _incentivesController.getAssetData(address(_aToken));\\n            if (_emissionsPerSecond > 0) {\\n                uint256 emissionsInWant = _estimatedStkAaveToWant(_emissionsPerSecond); // amount of emissions in want\\n                uint256 incentivesRate = (emissionsInWant * _SECONDS_IN_YEAR * 1e18) / totalLiquidity; // APRs are in 1e18\\n\\n                return (incentivesRate * 9500) / 10000; // 95% of estimated APR to avoid overestimations\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /// @notice See `withdraw`\\n    function _withdraw(uint256 amount) internal returns (uint256) {\\n        uint256 stakedBalance = _stakedBalance();\\n        uint256 balanceUnderlying = _balanceAtoken();\\n        uint256 looseBalance = want.balanceOf(address(this));\\n        uint256 total = stakedBalance + balanceUnderlying + looseBalance;\\n\\n        if (amount > total) {\\n            //cant withdraw more than we own\\n            amount = total;\\n        }\\n\\n        if (looseBalance >= amount) {\\n            want.safeTransfer(address(strategy), amount);\\n            return amount;\\n        }\\n\\n        // Not state changing but OK because of previous call\\n        uint256 liquidity = want.balanceOf(address(_aToken));\\n\\n        if (liquidity > 1) {\\n            uint256 toWithdraw = amount - looseBalance;\\n            if (toWithdraw <= liquidity) {\\n                //we can take all\\n                uint256 freedAmount = _unstake(toWithdraw);\\n                _lendingPool.withdraw(address(want), freedAmount, address(this));\\n            } else {\\n                //take all we can\\n                uint256 freedAmount = _unstake(liquidity);\\n                _lendingPool.withdraw(address(want), freedAmount, address(this));\\n            }\\n        }\\n        looseBalance = want.balanceOf(address(this));\\n\\n        want.safeTransfer(address(strategy), looseBalance);\\n        return looseBalance;\\n    }\\n\\n    /// @notice See `deposit`\\n    function _deposit(uint256 amount) internal {\\n        ILendingPool lp = _lendingPool;\\n        // NOTE: Checks if allowance is enough and acts accordingly\\n        // allowance might not be enough if\\n        //     i) initial allowance has been used (should take years)\\n        //     ii) _lendingPool contract address has changed (Aave updated the contract address)\\n        if (want.allowance(address(this), address(lp)) < amount) {\\n            IERC20(address(want)).safeApprove(address(lp), 0);\\n            IERC20(address(want)).safeApprove(address(lp), type(uint256).max);\\n        }\\n        lp.deposit(address(want), amount, address(this), 0);\\n    }\\n\\n    /// @notice Internal version of the `_setAavePoolVariables`\\n    function _setAavePoolVariables() internal {\\n        (address aToken, , ) = _protocolDataProvider.getReserveTokensAddresses(address(want));\\n        _aToken = IAToken(aToken);\\n        cooldownSeconds = IStakedAave(_stkAave).COOLDOWN_SECONDS();\\n        unstakeWindow = IStakedAave(_stkAave).UNSTAKE_WINDOW();\\n    }\\n\\n    /// @notice Verifies the cooldown status for earned stkAAVE\\n    /// @return cooldownStatus Status of the coolDown: if it is 0 then there is no cooldown Status, if it is 1 then\\n    /// the strategy should claim the stkAave\\n    function _checkCooldown() internal view returns (uint256 cooldownStatus) {\\n        uint256 cooldownStartTimestamp = IStakedAave(_stkAave).stakersCooldowns(address(this));\\n        uint256 nextClaimStartTimestamp = cooldownStartTimestamp + cooldownSeconds;\\n        if (cooldownStartTimestamp == 0) {\\n            return 0;\\n        }\\n        if (block.timestamp > nextClaimStartTimestamp && block.timestamp <= nextClaimStartTimestamp + unstakeWindow) {\\n            return 1;\\n        }\\n        if (block.timestamp < nextClaimStartTimestamp) {\\n            return 2;\\n        }\\n    }\\n\\n    /// @notice Specifies the token managed by this contract during normal operation\\n    function _protectedTokens() internal view override returns (address[] memory) {\\n        address[] memory protected = new address[](2);\\n        protected[0] = address(want);\\n        protected[1] = address(_aToken);\\n        return protected;\\n    }\\n\\n    // ========================= Virtual Functions ===========================\\n\\n    /// @notice Allows the lender to stake its aTokens in an external staking contract\\n    /// @param amount Amount of aTokens to stake\\n    /// @return Amount of aTokens actually staked\\n    function _stake(uint256 amount) internal virtual returns (uint256);\\n\\n    /// @notice Allows the lender to unstake its aTokens from an external staking contract\\n    /// @param amount Amount of aToken to unstake\\n    /// @return Amount of aTokens actually unstaked\\n    function _unstake(uint256 amount) internal virtual returns (uint256);\\n\\n    /// @notice Gets the amount of aTokens currently staked\\n    function _stakedBalance() internal view virtual returns (uint256);\\n\\n    /// @notice Gets the APR from staking additional `amount` of aTokens in the associated staking\\n    /// contract\\n    /// @param amount Virtual amount to be staked\\n    function _stakingApr(uint256 amount) internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x510d948fc8a1fc8600166df8675f2a49e24837d9f668dfdc3a37fcb98232089e\",\"license\":\"GPL-3.0\"},\"contracts/strategies/OptimizerAPR/genericLender/GenericLenderBaseUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../../../external/AccessControlAngleUpgradeable.sol\\\";\\n\\nimport \\\"../../../interfaces/IGenericLender.sol\\\";\\nimport \\\"../../../interfaces/IPoolManager.sol\\\";\\nimport \\\"../../../interfaces/IStrategy.sol\\\";\\n\\n/// @title GenericLenderBaseUpgradeable\\n/// @author Forked from https://github.com/Grandthrax/yearnV2-generic-lender-strat/tree/master/contracts/GenericLender\\n/// @notice A base contract to build contracts that lend assets to protocols\\nabstract contract GenericLenderBaseUpgradeable is IGenericLender, AccessControlAngleUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant GUARDIAN_ROLE = keccak256(\\\"GUARDIAN_ROLE\\\");\\n    bytes32 public constant STRATEGY_ROLE = keccak256(\\\"STRATEGY_ROLE\\\");\\n    bytes32 public constant KEEPER_ROLE = keccak256(\\\"KEEPER_ROLE\\\");\\n\\n    // ======================= References to contracts =============================\\n\\n    address internal constant oneInch = 0x1111111254fb6c44bAC0beD2854e76F90643097d;\\n\\n    // ========================= References and Parameters =========================\\n\\n    string public override lenderName;\\n    /// @notice Reference to the protocol's collateral poolManager\\n    IPoolManager public poolManager;\\n    /// @notice Reference to the `Strategy`\\n    address public override strategy;\\n    /// @notice Reference to the token lent\\n    IERC20 public want;\\n    /// @notice Base of the asset handled by the lender\\n    uint256 public wantBase;\\n\\n    uint256[45] private __gapBaseLender;\\n\\n    // ================================ Errors =====================================\\n\\n    error ErrorSwap();\\n    error IncompatibleLengths();\\n    error ProtectedToken();\\n    error TooSmallAmount();\\n\\n    // ================================ Initializer ================================\\n\\n    /// @notice Initalizer of the `GenericLenderBase`\\n    /// @param _strategy Reference to the strategy using this lender\\n    /// @param _name Name of the lender\\n    /// @param governorList List of addresses with governor privilege\\n    /// @param guardian Address of the guardian\\n    /// @param keeperList List of keeper addresses\\n    function _initialize(\\n        address _strategy,\\n        string memory _name,\\n        address[] memory governorList,\\n        address guardian,\\n        address[] memory keeperList\\n    ) internal initializer {\\n        strategy = _strategy;\\n        // The corresponding `PoolManager` is inferred from the `Strategy`\\n        poolManager = IPoolManager(IStrategy(strategy).poolManager());\\n        want = IERC20(poolManager.token());\\n        lenderName = _name;\\n\\n        _setupRole(GUARDIAN_ROLE, address(poolManager));\\n        for (uint256 i = 0; i < governorList.length; i++) {\\n            _setupRole(GUARDIAN_ROLE, governorList[i]);\\n        }\\n\\n        _setupRole(KEEPER_ROLE, guardian);\\n        for (uint256 i = 0; i < keeperList.length; i++) {\\n            _setupRole(KEEPER_ROLE, keeperList[i]);\\n        }\\n\\n        _setRoleAdmin(KEEPER_ROLE, GUARDIAN_ROLE);\\n\\n        _setupRole(GUARDIAN_ROLE, guardian);\\n        _setupRole(STRATEGY_ROLE, _strategy);\\n        _setRoleAdmin(GUARDIAN_ROLE, STRATEGY_ROLE);\\n        _setRoleAdmin(STRATEGY_ROLE, GUARDIAN_ROLE);\\n        wantBase = 10**IERC20Metadata(address(want)).decimals();\\n        want.safeApprove(_strategy, type(uint256).max);\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    // ============================ View Functions =================================\\n\\n    /// @notice Returns an estimation of the current Annual Percentage Rate\\n    function apr() external view override returns (uint256) {\\n        return _apr();\\n    }\\n\\n    /// @notice Returns an estimation of the current Annual Percentage Rate weighted by a factor\\n    function weightedApr() external view override returns (uint256) {\\n        uint256 a = _apr();\\n        return a * _nav();\\n    }\\n\\n    /// @notice Helper function to get the current total of assets managed by the lender.\\n    function nav() external view override returns (uint256) {\\n        return _nav();\\n    }\\n\\n    /// @notice Check if assets are currently managed by the lender\\n    /// @dev We're considering that the strategy has no assets if it has less than 10 of the\\n    /// underlying asset in total to avoid the case where there is dust remaining on the lending market we cannot\\n    /// withdraw everything\\n    function hasAssets() external view override returns (bool) {\\n        return _nav() > 10 * wantBase;\\n    }\\n\\n    /// @notice See `nav`\\n    function _nav() internal view returns (uint256) {\\n        return want.balanceOf(address(this)) + underlyingBalanceStored();\\n    }\\n\\n    /// @notice See `apr`\\n    function _apr() internal view virtual returns (uint256);\\n\\n    /// @notice Returns the current balance invested on the lender and related staking contracts\\n    function underlyingBalanceStored() public view virtual returns (uint256 balance);\\n\\n    // ============================ Governance Functions ===========================\\n\\n    /// @notice Override this to add all tokens/tokenized positions this contract\\n    /// manages on a *persistent* basis (e.g. not just for swapping back to\\n    /// want ephemerally).\\n    ///\\n    /// Example:\\n    /// ```\\n    ///    function _protectedTokens() internal override view returns (address[] memory) {\\n    ///      address[] memory protected = new address[](3);\\n    ///      protected[0] = tokenA;\\n    ///      protected[1] = tokenB;\\n    ///      protected[2] = tokenC;\\n    ///      return protected;\\n    ///    }\\n    /// ```\\n    function _protectedTokens() internal view virtual returns (address[] memory);\\n\\n    /// @notice\\n    /// Removes tokens from this Strategy that are not the type of tokens\\n    /// managed by this Strategy. This may be used in case of accidentally\\n    /// sending the wrong kind of token to this Strategy.\\n    ///\\n    /// Tokens will be sent to `governance()`.\\n    ///\\n    /// This will fail if an attempt is made to sweep `want`, or any tokens\\n    /// that are protected by this Strategy.\\n    ///\\n    /// This may only be called by governance.\\n    /// @param _token The token to transfer out of this poolManager.\\n    /// @param to Address to send the tokens to.\\n    /// @dev\\n    /// Implement `_protectedTokens()` to specify any additional tokens that\\n    /// should be protected from sweeping in addition to `want`.\\n    function sweep(address _token, address to) external override onlyRole(GUARDIAN_ROLE) {\\n        address[] memory __protectedTokens = _protectedTokens();\\n        for (uint256 i = 0; i < __protectedTokens.length; i++)\\n            if (_token == __protectedTokens[i]) revert ProtectedToken();\\n\\n        IERC20(_token).safeTransfer(to, IERC20(_token).balanceOf(address(this)));\\n    }\\n\\n    /// @notice Changes allowance of a set of tokens to addresses\\n    /// @param tokens Addresses of the tokens for which approvals should be made\\n    /// @param spenders Addresses to approve\\n    /// @param amounts Approval amounts for each address\\n    function changeAllowance(\\n        IERC20[] calldata tokens,\\n        address[] calldata spenders,\\n        uint256[] calldata amounts\\n    ) external onlyRole(GUARDIAN_ROLE) {\\n        if (tokens.length != spenders.length || tokens.length != amounts.length) revert IncompatibleLengths();\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            _changeAllowance(tokens[i], spenders[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Swap earned _stkAave or Aave for `want` through 1Inch\\n    /// @param minAmountOut Minimum amount of `want` to receive for the swap to happen\\n    /// @param payload Bytes needed for 1Inch API\\n    /// @dev In the case of a contract lending to Aave, tokens swapped should typically be: _stkAave -> `want` or Aave -> `want`\\n    function sellRewards(uint256 minAmountOut, bytes memory payload) external onlyRole(KEEPER_ROLE) {\\n        //solhint-disable-next-line\\n        (bool success, bytes memory result) = oneInch.call(payload);\\n        if (!success) _revertBytes(result);\\n\\n        uint256 amountOut = abi.decode(result, (uint256));\\n        if (amountOut < minAmountOut) revert TooSmallAmount();\\n    }\\n\\n    /// @notice Internal function used for error handling\\n    function _revertBytes(bytes memory errMsg) internal pure {\\n        if (errMsg.length > 0) {\\n            //solhint-disable-next-line\\n            assembly {\\n                revert(add(32, errMsg), mload(errMsg))\\n            }\\n        }\\n        revert ErrorSwap();\\n    }\\n\\n    /// @notice Changes allowance of a set of tokens to addresses\\n    /// @param token Address of the token for which approval should be made\\n    /// @param spender Address to approve\\n    /// @param amount Approval amount\\n    function _changeAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        uint256 currentAllowance = token.allowance(address(this), address(spender));\\n        if (currentAllowance < amount) {\\n            token.safeIncreaseAllowance(address(spender), amount - currentAllowance);\\n        } else if (currentAllowance > amount) {\\n            token.safeDecreaseAllowance(address(spender), currentAllowance - amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x66a045cd12fdd204d7e36e66bbc6dfd635ca7246882d4369dd49c9535bf3f407\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b506200010b565b6000620000f630620000fc60201b6200134c1760201c565b15905090565b6001600160a01b03163b151590565b613f70806200011b6000396000f3fe608060405234801561001057600080fd5b50600436106102925760003560e01c8063580b7c2e11610160578063b8221bc4116100d8578063c6afba3c1161008c578063d547741f11610071578063d547741f14610513578063dc4c90d314610526578063fd4649181461053957600080fd5b8063c6afba3c14610503578063d0e30db01461050b57600080fd5b8063b8dc491b116100bd578063b8dc491b146104d5578063c14e80f9146104e8578063c1590cd7146104fb57600080fd5b8063b8221bc4146104b9578063b82c4dc1146104c257600080fd5b8063853828b61161012f57806391d148541161011457806391d148541461048b578063a217fddf1461049e578063a8c62e76146104a657600080fd5b8063853828b61461046e5780638b2021761461047657600080fd5b8063580b7c2e1461042e5780635be9b2d3146104555780636314e8841461045d578063787a08a61461046657600080fd5b80632f2ff15d1161020e57806344040261116101c25780634c3f425f116101a75780634c3f425f1461040b5780635312ea8e1461041357806357ded9c91461042657600080fd5b806344040261146103eb5780634798329c146103f857600080fd5b8063364bc15a116101f3578063364bc15a146103a957806336568abe146103d0578063372500ab146103e357600080fd5b80632f2ff15d1461037457806332b790211461038757600080fd5b80631f1fcd5111610265578063248a9ca31161024a578063248a9ca31461031657806324ea54f41461033a5780632e1a7d4d1461036157600080fd5b80631f1fcd51146102e357806320f98f3f1461030e57600080fd5b806305b41934146102975780630b6d1d17146102ac578063116ac4a3146102c8578063149a4ae4146102d0575b600080fd5b6102aa6102a536600461348c565b610541565b005b6102b560375481565b6040519081526020015b60405180910390f35b6102b561064a565b6102b56102de3660046134e7565b61066f565b6036546102f6906001600160a01b031681565b6040516001600160a01b0390911681526020016102bf565b6102aa61098b565b6102b56103243660046134e7565b6000908152600160208190526040909120015490565b6102b57f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504181565b6102b561036f3660046134e7565b6109d4565b6102aa610382366004613525565b610a13565b60675461039990610100900460ff1681565b60405190151581526020016102bf565b6102b57ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab81565b6102aa6103de366004613525565b610a3f565b6102aa610aaa565b6067546103999060ff1681565b6102aa6104063660046135ec565b610add565b6102aa610aeb565b6102aa6104213660046134e7565b610af5565b6102b5610c51565b6102b57f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c81565b610399610c60565b6102b560665481565b6102aa610c7f565b610399610d14565b61047e610d65565b6040516102bf91906136ea565b610399610499366004613525565b610df3565b6102b5600081565b6035546102f6906001600160a01b031681565b6102b560655481565b6102aa6104d0366004613769565b610e20565b6102aa6104e3366004613803565b610f27565b6102aa6104f63660046135ec565b611067565b6102b5611206565b6102b5611210565b6102aa611225565b6102aa610521366004613525565b6112e5565b6034546102f6906001600160a01b031681565b6102aa61130c565b7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab61056c813361135b565b600080731111111254fb6c44bac0bed2854e76f90643097d6001600160a01b03168460405161059b9190613831565b6000604051808303816000865af19150503d80600081146105d8576040519150601f19603f3d011682016040523d82523d6000602084013e6105dd565b606091505b5091509150816105f0576105f0816113bf565b600081806020019051810190610606919061384d565b905085811015610642576040517f22313ae900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b600080610655611400565b905061065f6114f8565b610669908261387c565b91505090565b6036546040517f35ea6a750000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526000908190737d2768de32b0b80b7a3454c06bdac94a69ddc7a9906335ea6a759060240161018060405180830381865afa1580156106ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070e919061392e565b6036546040517f35ea6a750000000000000000000000000000000000000000000000000000000081526001600160a01b03909116600482015290915060009081908190819073057835ad21a177dbdd3090bb1cae03eacf78fc6d906335ea6a759060240161014060405180830381865afa158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b49190613a1b565b5050509650505050935093509350600087856107d09190613a96565b6036546040517f3e1501410000000000000000000000000000000000000000000000000000000081526001600160a01b03909116600482015290915060009073057835ad21a177dbdd3090bb1cae03eacf78fc6d90633e1501419060240161014060405180830381865afa15801561084c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108709190613aae565b505050506101408d01516036546040517f9584df280000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152602481018b9052604481018e9052606481018d9052608481018c905260a4810185905293985060009750169450639584df2893505060c4019050606060405180830381865afa15801561090a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092e9190613b55565b5050905060006109538688866109449190613a96565b61094e9190613a96565b61156e565b905060008082610967633b9aca0086613b83565b6109719190613a96565b61097b9190613a96565b9c9b505050505050505050505050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416109b6813361135b565b506067805461ff001981166101009182900460ff1615909102179055565b60007f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c610a01813361135b565b610a0a83611720565b91505b50919050565b60008281526001602081905260409091200154610a30813361135b565b610a3a8383611a8c565b505050565b6001600160a01b0381163314610a9c5760405162461bcd60e51b815260206004820152600260248201527f373100000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b610aa68282611af7565b5050565b7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab610ad5813361135b565b610aa6611b5e565b610642868686868686611067565b610af3611e2b565b565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610b20813361135b565b6036546040517f69328dec0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116600482015260248101839052306044820152737d2768de32b0b80b7a3454c06bdac94a69ddc7a9906369328dec906064016020604051808303816000875af1158015610ba4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc8919061384d565b506034546036546040516370a0823160e01b8152306004820152610aa6926001600160a01b039081169216906370a0823190602401602060405180830381865afa158015610c1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3e919061384d565b6036546001600160a01b03169190611fea565b6000610c5b611400565b905090565b6000603754600a610c71919061387c565b610c796114f8565b11905090565b7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab610caa813361135b565b734da27a545c0c5b758a6ba100e3a049001de870f56001600160a01b031663787a08a66040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610cf957600080fd5b505af1158015610d0d573d6000803e3d6000fd5b5050505050565b60007f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c610d41813361135b565b6000610d4b6114f8565b90506000610d5882611720565b91909110159250505b5090565b60338054610d7290613ba5565b80601f0160208091040260200160405190810160405280929190818152602001828054610d9e90613ba5565b8015610deb5780601f10610dc057610100808354040283529160200191610deb565b820191906000526020600020905b815481529060010190602001808311610dce57829003601f168201915b505050505081565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610e4b813361135b565b8584141580610e5a5750858214155b15610e91576040517f46282e8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b86811015610f1d57610f0b888883818110610eb157610eb1613bda565b9050602002016020810190610ec69190613bf0565b878784818110610ed857610ed8613bda565b9050602002016020810190610eed9190613bf0565b868685818110610eff57610eff613bda565b90506020020135612093565b80610f1581613c0d565b915050610e94565b5050505050505050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610f52813361135b565b6000610f5c61215c565b905060005b8151811015610fe157818181518110610f7c57610f7c613bda565b60200260200101516001600160a01b0316856001600160a01b03161415610fcf576040517f093e1cdb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80610fd981613c0d565b915050610f61565b506040516370a0823160e01b81523060048201526110619084906001600160a01b038716906370a0823190602401602060405180830381865afa15801561102c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611050919061384d565b6001600160a01b0387169190611fea565b50505050565b61107486868585856121f7565b61107c611e2b565b83801561111c5750606754604080517f75d2641300000000000000000000000000000000000000000000000000000000815290516000926201000090046001600160a01b0316916375d264139160048083019260209291908290030181865afa1580156110ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111119190613c28565b6001600160a01b0316145b15611153576040517f5e7bb0f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6067805460ff19861515610100021661ffff1990911617600117905560365461119c906001600160a01b0316737d2768de32b0b80b7a3454c06bdac94a69ddc7a9600019612754565b6111d1734da27a545c0c5b758a6ba100e3a049001de870f5731111111254fb6c44bac0bed2854e76f90643097d600019612754565b610642737fc66500c84a76ad7e9c93437bfc5ac33e2ddae9731111111254fb6c44bac0bed2854e76f90643097d600019612754565b6000610c5b6114f8565b60008061121b612889565b610c5b9190613a96565b7f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c611250813361135b565b6036546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611299573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bd919061384d565b9050806112c8575050565b6112d1816128fd565b610a3a6112dc612889565b50600090565b50565b60008281526001602081905260409091200154611302813361135b565b610a3a8383611af7565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041611337813361135b565b506067805460ff19811660ff90911615179055565b6001600160a01b03163b151590565b6113658282610df3565b610aa65761137d816001600160a01b03166014612a47565b611388836020612a47565b604051602001611399929190613c45565b60408051601f198184030181529082905262461bcd60e51b8252610a93916004016136ea565b8051156113ce57805181602001fd5b6040517fc76d51a100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6036546040517f35ea6a750000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152600090819081908190819073057835ad21a177dbdd3090bb1cae03eacf78fc6d906335ea6a759060240161014060405180830381865afa158015611481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a59190613a1b565b505050505050935093509350935060006114c58385876109449190613a96565b9050600080826114d9633b9aca0086613b83565b6114e39190613a96565b6114ed9190613a96565b965050505050505090565b6000611502611210565b6036546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561154a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121b919061384d565b606754600090610100900460ff1680156115fc575073d784927ff2f95ba542bfc824c8a8a98f3495f6b56001600160a01b031663cc69afec6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f9919061384d565b42105b80156116085750600082115b15611718576067546040517f1652e7b7000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b0316600482015260009073d784927ff2f95ba542bfc824c8a8a98f3495f6b590631652e7b790602401606060405180830381865afa15801561168a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ae9190613b55565b5091505080156117165760006116c382612c77565b90506000846116d66301e133808461387c565b6116e890670de0b6b3a764000061387c565b6116f29190613b83565b90506127106117038261251c61387c565b61170d9190613b83565b95945050505050565b505b506000919050565b600080600061172d612889565b6036546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa15801561177b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179f919061384d565b90506000816117ae8486613a96565b6117b89190613a96565b9050808611156117c6578095505b8582106117f4576035546036546117ea916001600160a01b03918216911688611fea565b5093949350505050565b6036546067546040516370a0823160e01b8152620100009091046001600160a01b03908116600483015260009216906370a0823190602401602060405180830381865afa158015611849573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186d919061384d565b905060018111156119f55760006118848489613cc6565b9050818111611942576000816036546040517f69328dec0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116600482015260248101829052306044820152909150737d2768de32b0b80b7a3454c06bdac94a69ddc7a9906369328dec906064016020604051808303816000875af1158015611917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193b919061384d565b50506119f3565b6000826036546040517f69328dec0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116600482015260248101829052306044820152909150737d2768de32b0b80b7a3454c06bdac94a69ddc7a9906369328dec906064016020604051808303816000875af11580156119cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f0919061384d565b50505b505b6036546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611a3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a61919061384d565b603554603654919450611a81916001600160a01b03908116911685611fea565b509095945050505050565b611a968282610df3565b610aa65760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b611b018282610df3565b15610aa65760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000611b68612d25565b9050600081118015611b815750611b7d612d5f565b6001145b15611c90576040517f9a99b4f00000000000000000000000000000000000000000000000000000000081523060048201526000196024820152734da27a545c0c5b758a6ba100e3a049001de870f590639a99b4f090604401600060405180830381600087803b158015611bf357600080fd5b505af1158015611c07573d6000803e3d6000fd5b50506040517f1e9a695000000000000000000000000000000000000000000000000000000000815230600482015260248101849052734da27a545c0c5b758a6ba100e3a049001de870f59250631e9a69509150604401600060405180830381600087803b158015611c7757600080fd5b505af1158015611c8b573d6000803e3d6000fd5b505050505b60408051600180825281830190925260009160208083019080368337019050509050606760029054906101000a90046001600160a01b031681600081518110611cdb57611cdb613bda565b6001600160a01b03909216602092830291909101909101526040517f3111e7b300000000000000000000000000000000000000000000000000000000815273d784927ff2f95ba542bfc824c8a8a98f3495f6b590633111e7b390611d49908490600019903090600401613cdd565b6020604051808303816000875af1158015611d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8c919061384d565b50611d95612d25565b60675490925060ff168015611daa5750600082115b8015611dbb5750611db9612d5f565b155b15610d6157734da27a545c0c5b758a6ba100e3a049001de870f56001600160a01b031663787a08a66040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611e0f57600080fd5b505af1158015611e23573d6000803e3d6000fd5b505050505090565b6036546040517fd2493b6c0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116600482015260009073057835ad21a177dbdd3090bb1cae03eacf78fc6d9063d2493b6c90602401606060405180830381865afa158015611ea3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec79190613d41565b5050905080606760026101000a8154816001600160a01b0302191690836001600160a01b03160217905550734da27a545c0c5b758a6ba100e3a049001de870f56001600160a01b03166372b49d636040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f68919061384d565b606581905550734da27a545c0c5b758a6ba100e3a049001de870f56001600160a01b031663359c4a966040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe4919061384d565b60665550565b6040516001600160a01b038316602482015260448101829052610a3a9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612e51565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa1580156120e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612107919061384d565b905081811015612135576121308361211f8385613cc6565b6001600160a01b0387169190612f36565b611061565b81811115611061576110618361214b8484613cc6565b6001600160a01b0387169190613001565b60408051600280825260608083018452926000929190602083019080368337505060365482519293506001600160a01b0316918391506000906121a1576121a1613bda565b6001600160a01b03928316602091820292909201015260675482516201000090910490911690829060019081106121da576121da613bda565b6001600160a01b0390921660209283029190910190910152919050565b600054610100900460ff166122125760005460ff1615612216565b303b155b6122885760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610a93565b600054610100900460ff161580156122aa576000805461ffff19166101011790555b603580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038816908117909155604080517fdc4c90d3000000000000000000000000000000000000000000000000000000008152905163dc4c90d3916004808201926020929091908290030181865afa158015612334573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123589190613c28565b603480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169182179055604080517ffc0c546a000000000000000000000000000000000000000000000000000000008152905163fc0c546a916004808201926020929091908290030181865afa1580156123e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124079190613c28565b603680547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169190911790558451612452906033906020880190613333565b5060345461248a907f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041906001600160a01b031661313a565b60005b84518110156124eb576124d97f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50418683815181106124cc576124cc613bda565b602002602001015161313a565b806124e381613c0d565b91505061248d565b506125167ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab8461313a565b60005b825181101561256a576125587ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab8483815181106124cc576124cc613bda565b8061256281613c0d565b915050612519565b506125b57ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041613144565b6125df7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50418461313a565b6126097f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c8761313a565b6126537f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50417f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c613144565b61269d7f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041613144565b603660009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127149190613d8e565b61271f90600a613e8d565b60375560365461273b906001600160a01b031687600019612754565b8015610642576000805461ff0019169055505050505050565b8015806127ce5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156127a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127cc919061384d565b155b6128405760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610a93565b6040516001600160a01b038316602482015260448101829052610a3a9084907f095ea7b3000000000000000000000000000000000000000000000000000000009060640161202f565b6067546040516370a0823160e01b81523060048201526000916201000090046001600160a01b0316906370a08231906024015b602060405180830381865afa1580156128d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5b919061384d565b603654604051636eb1769f60e11b8152306004820152737d2768de32b0b80b7a3454c06bdac94a69ddc7a9602482018190529183916001600160a01b039091169063dd62ed3e90604401602060405180830381865afa158015612964573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612988919061384d565b10156129bf576036546129a6906001600160a01b0316826000612754565b6036546129bf906001600160a01b031682600019612754565b6036546040517fe8eda9df0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015260248101849052306044820152600060648201529082169063e8eda9df90608401600060405180830381600087803b158015612a3357600080fd5b505af1158015610642573d6000803e3d6000fd5b60606000612a5683600261387c565b612a61906002613a96565b67ffffffffffffffff811115612a7957612a796133c3565b6040519080825280601f01601f191660200182016040528015612aa3576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612ada57612ada613bda565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612b3d57612b3d613bda565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612b7984600261387c565b612b84906001613a96565b90505b6001811115612c21577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612bc557612bc5613bda565b1a60f81b828281518110612bdb57612bdb613bda565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93612c1a81613e9c565b9050612b87565b508315612c705760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a93565b9392505050565b60008073547a514d5e3769680ce22b2361c10ea13619e8a96001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015612ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf09190613ecd565b5050509150506a52b7d2dcc80cd2e40000006037548483612d11919061387c565b612d1b919061387c565b610a0a9190613b83565b6040516370a0823160e01b8152306004820152600090734da27a545c0c5b758a6ba100e3a049001de870f5906370a08231906024016128bc565b6040517f091030c30000000000000000000000000000000000000000000000000000000081523060048201526000908190734da27a545c0c5b758a6ba100e3a049001de870f59063091030c390602401602060405180830381865afa158015612dcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df0919061384d565b9050600060655482612e029190613a96565b905081612e125760009250505090565b8042118015612e2d5750606654612e299082613a96565b4211155b15612e3b5760019250505090565b80421015612e4c5760029250505090565b505090565b6000612ea6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661319b9092919063ffffffff16565b805190915015610a3a5780806020019051810190612ec49190613f1d565b610a3a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610a93565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015612f87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fab919061384d565b612fb59190613a96565b6040516001600160a01b0385166024820152604481018290529091506110619085907f095ea7b3000000000000000000000000000000000000000000000000000000009060640161202f565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015613051573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613075919061384d565b9050818110156130ed5760405162461bcd60e51b815260206004820152602960248201527f5361666545524332303a2064656372656173656420616c6c6f77616e6365206260448201527f656c6f77207a65726f00000000000000000000000000000000000000000000006064820152608401610a93565b6040516001600160a01b03841660248201528282036044820181905290610d0d9086907f095ea7b3000000000000000000000000000000000000000000000000000000009060640161202f565b610aa68282611a8c565b60008281526001602081905260409091200154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a4600091825260016020819052604090922090910155565b60606131aa84846000856131b2565b949350505050565b60608247101561322a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610a93565b6001600160a01b0385163b6132815760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a93565b600080866001600160a01b0316858760405161329d9190613831565b60006040518083038185875af1925050503d80600081146132da576040519150601f19603f3d011682016040523d82523d6000602084013e6132df565b606091505b50915091506132ef8282866132fa565b979650505050505050565b60608315613309575081612c70565b8251156133195782518084602001fd5b8160405162461bcd60e51b8152600401610a9391906136ea565b82805461333f90613ba5565b90600052602060002090601f01602090048101928261336157600085556133a7565b82601f1061337a57805160ff19168380011785556133a7565b828001600101855582156133a7579182015b828111156133a757825182559160200191906001019061338c565b50610d619291505b80821115610d6157600081556001016133af565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff811182821017156133fd576133fd6133c3565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561342c5761342c6133c3565b604052919050565b600067ffffffffffffffff83111561344e5761344e6133c3565b6134616020601f19601f86011601613403565b905082815283838301111561347557600080fd5b828260208301376000602084830101529392505050565b6000806040838503121561349f57600080fd5b82359150602083013567ffffffffffffffff8111156134bd57600080fd5b8301601f810185136134ce57600080fd5b6134dd85823560208401613434565b9150509250929050565b6000602082840312156134f957600080fd5b5035919050565b6001600160a01b03811681146112e257600080fd5b803561352081613500565b919050565b6000806040838503121561353857600080fd5b82359150602083013561354a81613500565b809150509250929050565b80151581146112e257600080fd5b803561352081613555565b600082601f83011261357f57600080fd5b8135602067ffffffffffffffff82111561359b5761359b6133c3565b8160051b6135aa828201613403565b92835284810182019282810190878511156135c457600080fd5b83870192505b848310156132ef5782356135dd81613500565b825291830191908301906135ca565b60008060008060008060c0878903121561360557600080fd5b863561361081613500565b9550602087013567ffffffffffffffff8082111561362d57600080fd5b818901915089601f83011261364157600080fd5b6136508a833560208501613434565b965061365e60408a01613563565b9550606089013591508082111561367457600080fd5b6136808a838b0161356e565b945061368e60808a01613515565b935060a08901359150808211156136a457600080fd5b506136b189828a0161356e565b9150509295509295509295565b60005b838110156136d95781810151838201526020016136c1565b838111156110615750506000910152565b60208152600082518060208401526137098160408501602087016136be565b601f01601f19169190910160400192915050565b60008083601f84011261372f57600080fd5b50813567ffffffffffffffff81111561374757600080fd5b6020830191508360208260051b850101111561376257600080fd5b9250929050565b6000806000806000806060878903121561378257600080fd5b863567ffffffffffffffff8082111561379a57600080fd5b6137a68a838b0161371d565b909850965060208901359150808211156137bf57600080fd5b6137cb8a838b0161371d565b909650945060408901359150808211156137e457600080fd5b506137f189828a0161371d565b979a9699509497509295939492505050565b6000806040838503121561381657600080fd5b823561382181613500565b9150602083013561354a81613500565b600082516138438184602087016136be565b9190910192915050565b60006020828403121561385f57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561389657613896613866565b500290565b6000602082840312156138ad57600080fd5b6040516020810181811067ffffffffffffffff821117156138d0576138d06133c3565b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff8116811461352057600080fd5b805164ffffffffff8116811461352057600080fd5b805161352081613500565b805160ff8116811461352057600080fd5b6000610180828403121561394157600080fd5b6139496133d9565b613953848461389b565b8152613961602084016138dd565b6020820152613972604084016138dd565b6040820152613983606084016138dd565b6060820152613994608084016138dd565b60808201526139a560a084016138dd565b60a08201526139b660c084016138fd565b60c08201526139c760e08401613912565b60e08201526101006139da818501613912565b908201526101206139ec848201613912565b908201526101406139fe848201613912565b90820152610160613a1084820161391d565b908201529392505050565b6000806000806000806000806000806101408b8d031215613a3b57600080fd5b8a51995060208b0151985060408b0151975060608b0151965060808b0151955060a08b0151945060c08b0151935060e08b015192506101008b01519150613a856101208c016138fd565b90509295989b9194979a5092959850565b60008219821115613aa957613aa9613866565b500190565b6000806000806000806000806000806101408b8d031215613ace57600080fd5b8a51995060208b0151985060408b0151975060608b0151965060808b0151955060a08b0151613afc81613555565b60c08c0151909550613b0d81613555565b60e08c0151909450613b1e81613555565b6101008c0151909350613b3081613555565b6101208c0151909250613b4281613555565b809150509295989b9194979a5092959850565b600080600060608486031215613b6a57600080fd5b8351925060208401519150604084015190509250925092565b600082613ba057634e487b7160e01b600052601260045260246000fd5b500490565b600181811c90821680613bb957607f821691505b60208210811415610a0d57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060208284031215613c0257600080fd5b8135612c7081613500565b6000600019821415613c2157613c21613866565b5060010190565b600060208284031215613c3a57600080fd5b8151612c7081613500565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613c7d8160178501602088016136be565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613cba8160288401602088016136be565b01602801949350505050565b600082821015613cd857613cd8613866565b500390565b606080825284519082018190526000906020906080840190828801845b82811015613d1f5781516001600160a01b031684529284019290840190600101613cfa565b50505090830194909452506001600160a01b0391909116604090910152919050565b600080600060608486031215613d5657600080fd5b8351613d6181613500565b6020850151909350613d7281613500565b6040850151909250613d8381613500565b809150509250925092565b600060208284031215613da057600080fd5b612c708261391d565b600181815b80851115613de4578160001904821115613dca57613dca613866565b80851615613dd757918102915b93841c9390800290613dae565b509250929050565b600082613dfb57506001610e1a565b81613e0857506000610e1a565b8160018114613e1e5760028114613e2857613e44565b6001915050610e1a565b60ff841115613e3957613e39613866565b50506001821b610e1a565b5060208310610133831016604e8410600b8410161715613e67575081810a610e1a565b613e718383613da9565b8060001904821115613e8557613e85613866565b029392505050565b6000612c7060ff841683613dec565b600081613eab57613eab613866565b506000190190565b805169ffffffffffffffffffff8116811461352057600080fd5b600080600080600060a08688031215613ee557600080fd5b613eee86613eb3565b9450602086015193506040860151925060608601519150613f1160808701613eb3565b90509295509295909350565b600060208284031215613f2f57600080fd5b8151612c708161355556fea2646970667358221220d41c7cec04ef17634c6f0b8da5cb0ba6c8b53c712d54f05666171839c6eca25564736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102925760003560e01c8063580b7c2e11610160578063b8221bc4116100d8578063c6afba3c1161008c578063d547741f11610071578063d547741f14610513578063dc4c90d314610526578063fd4649181461053957600080fd5b8063c6afba3c14610503578063d0e30db01461050b57600080fd5b8063b8dc491b116100bd578063b8dc491b146104d5578063c14e80f9146104e8578063c1590cd7146104fb57600080fd5b8063b8221bc4146104b9578063b82c4dc1146104c257600080fd5b8063853828b61161012f57806391d148541161011457806391d148541461048b578063a217fddf1461049e578063a8c62e76146104a657600080fd5b8063853828b61461046e5780638b2021761461047657600080fd5b8063580b7c2e1461042e5780635be9b2d3146104555780636314e8841461045d578063787a08a61461046657600080fd5b80632f2ff15d1161020e57806344040261116101c25780634c3f425f116101a75780634c3f425f1461040b5780635312ea8e1461041357806357ded9c91461042657600080fd5b806344040261146103eb5780634798329c146103f857600080fd5b8063364bc15a116101f3578063364bc15a146103a957806336568abe146103d0578063372500ab146103e357600080fd5b80632f2ff15d1461037457806332b790211461038757600080fd5b80631f1fcd5111610265578063248a9ca31161024a578063248a9ca31461031657806324ea54f41461033a5780632e1a7d4d1461036157600080fd5b80631f1fcd51146102e357806320f98f3f1461030e57600080fd5b806305b41934146102975780630b6d1d17146102ac578063116ac4a3146102c8578063149a4ae4146102d0575b600080fd5b6102aa6102a536600461348c565b610541565b005b6102b560375481565b6040519081526020015b60405180910390f35b6102b561064a565b6102b56102de3660046134e7565b61066f565b6036546102f6906001600160a01b031681565b6040516001600160a01b0390911681526020016102bf565b6102aa61098b565b6102b56103243660046134e7565b6000908152600160208190526040909120015490565b6102b57f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504181565b6102b561036f3660046134e7565b6109d4565b6102aa610382366004613525565b610a13565b60675461039990610100900460ff1681565b60405190151581526020016102bf565b6102b57ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab81565b6102aa6103de366004613525565b610a3f565b6102aa610aaa565b6067546103999060ff1681565b6102aa6104063660046135ec565b610add565b6102aa610aeb565b6102aa6104213660046134e7565b610af5565b6102b5610c51565b6102b57f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c81565b610399610c60565b6102b560665481565b6102aa610c7f565b610399610d14565b61047e610d65565b6040516102bf91906136ea565b610399610499366004613525565b610df3565b6102b5600081565b6035546102f6906001600160a01b031681565b6102b560655481565b6102aa6104d0366004613769565b610e20565b6102aa6104e3366004613803565b610f27565b6102aa6104f63660046135ec565b611067565b6102b5611206565b6102b5611210565b6102aa611225565b6102aa610521366004613525565b6112e5565b6034546102f6906001600160a01b031681565b6102aa61130c565b7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab61056c813361135b565b600080731111111254fb6c44bac0bed2854e76f90643097d6001600160a01b03168460405161059b9190613831565b6000604051808303816000865af19150503d80600081146105d8576040519150601f19603f3d011682016040523d82523d6000602084013e6105dd565b606091505b5091509150816105f0576105f0816113bf565b600081806020019051810190610606919061384d565b905085811015610642576040517f22313ae900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b600080610655611400565b905061065f6114f8565b610669908261387c565b91505090565b6036546040517f35ea6a750000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526000908190737d2768de32b0b80b7a3454c06bdac94a69ddc7a9906335ea6a759060240161018060405180830381865afa1580156106ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070e919061392e565b6036546040517f35ea6a750000000000000000000000000000000000000000000000000000000081526001600160a01b03909116600482015290915060009081908190819073057835ad21a177dbdd3090bb1cae03eacf78fc6d906335ea6a759060240161014060405180830381865afa158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b49190613a1b565b5050509650505050935093509350600087856107d09190613a96565b6036546040517f3e1501410000000000000000000000000000000000000000000000000000000081526001600160a01b03909116600482015290915060009073057835ad21a177dbdd3090bb1cae03eacf78fc6d90633e1501419060240161014060405180830381865afa15801561084c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108709190613aae565b505050506101408d01516036546040517f9584df280000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152602481018b9052604481018e9052606481018d9052608481018c905260a4810185905293985060009750169450639584df2893505060c4019050606060405180830381865afa15801561090a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092e9190613b55565b5050905060006109538688866109449190613a96565b61094e9190613a96565b61156e565b905060008082610967633b9aca0086613b83565b6109719190613a96565b61097b9190613a96565b9c9b505050505050505050505050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416109b6813361135b565b506067805461ff001981166101009182900460ff1615909102179055565b60007f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c610a01813361135b565b610a0a83611720565b91505b50919050565b60008281526001602081905260409091200154610a30813361135b565b610a3a8383611a8c565b505050565b6001600160a01b0381163314610a9c5760405162461bcd60e51b815260206004820152600260248201527f373100000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b610aa68282611af7565b5050565b7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab610ad5813361135b565b610aa6611b5e565b610642868686868686611067565b610af3611e2b565b565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610b20813361135b565b6036546040517f69328dec0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116600482015260248101839052306044820152737d2768de32b0b80b7a3454c06bdac94a69ddc7a9906369328dec906064016020604051808303816000875af1158015610ba4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc8919061384d565b506034546036546040516370a0823160e01b8152306004820152610aa6926001600160a01b039081169216906370a0823190602401602060405180830381865afa158015610c1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3e919061384d565b6036546001600160a01b03169190611fea565b6000610c5b611400565b905090565b6000603754600a610c71919061387c565b610c796114f8565b11905090565b7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab610caa813361135b565b734da27a545c0c5b758a6ba100e3a049001de870f56001600160a01b031663787a08a66040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610cf957600080fd5b505af1158015610d0d573d6000803e3d6000fd5b5050505050565b60007f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c610d41813361135b565b6000610d4b6114f8565b90506000610d5882611720565b91909110159250505b5090565b60338054610d7290613ba5565b80601f0160208091040260200160405190810160405280929190818152602001828054610d9e90613ba5565b8015610deb5780601f10610dc057610100808354040283529160200191610deb565b820191906000526020600020905b815481529060010190602001808311610dce57829003601f168201915b505050505081565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610e4b813361135b565b8584141580610e5a5750858214155b15610e91576040517f46282e8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b86811015610f1d57610f0b888883818110610eb157610eb1613bda565b9050602002016020810190610ec69190613bf0565b878784818110610ed857610ed8613bda565b9050602002016020810190610eed9190613bf0565b868685818110610eff57610eff613bda565b90506020020135612093565b80610f1581613c0d565b915050610e94565b5050505050505050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610f52813361135b565b6000610f5c61215c565b905060005b8151811015610fe157818181518110610f7c57610f7c613bda565b60200260200101516001600160a01b0316856001600160a01b03161415610fcf576040517f093e1cdb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80610fd981613c0d565b915050610f61565b506040516370a0823160e01b81523060048201526110619084906001600160a01b038716906370a0823190602401602060405180830381865afa15801561102c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611050919061384d565b6001600160a01b0387169190611fea565b50505050565b61107486868585856121f7565b61107c611e2b565b83801561111c5750606754604080517f75d2641300000000000000000000000000000000000000000000000000000000815290516000926201000090046001600160a01b0316916375d264139160048083019260209291908290030181865afa1580156110ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111119190613c28565b6001600160a01b0316145b15611153576040517f5e7bb0f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6067805460ff19861515610100021661ffff1990911617600117905560365461119c906001600160a01b0316737d2768de32b0b80b7a3454c06bdac94a69ddc7a9600019612754565b6111d1734da27a545c0c5b758a6ba100e3a049001de870f5731111111254fb6c44bac0bed2854e76f90643097d600019612754565b610642737fc66500c84a76ad7e9c93437bfc5ac33e2ddae9731111111254fb6c44bac0bed2854e76f90643097d600019612754565b6000610c5b6114f8565b60008061121b612889565b610c5b9190613a96565b7f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c611250813361135b565b6036546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611299573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bd919061384d565b9050806112c8575050565b6112d1816128fd565b610a3a6112dc612889565b50600090565b50565b60008281526001602081905260409091200154611302813361135b565b610a3a8383611af7565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041611337813361135b565b506067805460ff19811660ff90911615179055565b6001600160a01b03163b151590565b6113658282610df3565b610aa65761137d816001600160a01b03166014612a47565b611388836020612a47565b604051602001611399929190613c45565b60408051601f198184030181529082905262461bcd60e51b8252610a93916004016136ea565b8051156113ce57805181602001fd5b6040517fc76d51a100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6036546040517f35ea6a750000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152600090819081908190819073057835ad21a177dbdd3090bb1cae03eacf78fc6d906335ea6a759060240161014060405180830381865afa158015611481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a59190613a1b565b505050505050935093509350935060006114c58385876109449190613a96565b9050600080826114d9633b9aca0086613b83565b6114e39190613a96565b6114ed9190613a96565b965050505050505090565b6000611502611210565b6036546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561154a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121b919061384d565b606754600090610100900460ff1680156115fc575073d784927ff2f95ba542bfc824c8a8a98f3495f6b56001600160a01b031663cc69afec6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f9919061384d565b42105b80156116085750600082115b15611718576067546040517f1652e7b7000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b0316600482015260009073d784927ff2f95ba542bfc824c8a8a98f3495f6b590631652e7b790602401606060405180830381865afa15801561168a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ae9190613b55565b5091505080156117165760006116c382612c77565b90506000846116d66301e133808461387c565b6116e890670de0b6b3a764000061387c565b6116f29190613b83565b90506127106117038261251c61387c565b61170d9190613b83565b95945050505050565b505b506000919050565b600080600061172d612889565b6036546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa15801561177b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179f919061384d565b90506000816117ae8486613a96565b6117b89190613a96565b9050808611156117c6578095505b8582106117f4576035546036546117ea916001600160a01b03918216911688611fea565b5093949350505050565b6036546067546040516370a0823160e01b8152620100009091046001600160a01b03908116600483015260009216906370a0823190602401602060405180830381865afa158015611849573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186d919061384d565b905060018111156119f55760006118848489613cc6565b9050818111611942576000816036546040517f69328dec0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116600482015260248101829052306044820152909150737d2768de32b0b80b7a3454c06bdac94a69ddc7a9906369328dec906064016020604051808303816000875af1158015611917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193b919061384d565b50506119f3565b6000826036546040517f69328dec0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116600482015260248101829052306044820152909150737d2768de32b0b80b7a3454c06bdac94a69ddc7a9906369328dec906064016020604051808303816000875af11580156119cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f0919061384d565b50505b505b6036546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611a3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a61919061384d565b603554603654919450611a81916001600160a01b03908116911685611fea565b509095945050505050565b611a968282610df3565b610aa65760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b611b018282610df3565b15610aa65760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000611b68612d25565b9050600081118015611b815750611b7d612d5f565b6001145b15611c90576040517f9a99b4f00000000000000000000000000000000000000000000000000000000081523060048201526000196024820152734da27a545c0c5b758a6ba100e3a049001de870f590639a99b4f090604401600060405180830381600087803b158015611bf357600080fd5b505af1158015611c07573d6000803e3d6000fd5b50506040517f1e9a695000000000000000000000000000000000000000000000000000000000815230600482015260248101849052734da27a545c0c5b758a6ba100e3a049001de870f59250631e9a69509150604401600060405180830381600087803b158015611c7757600080fd5b505af1158015611c8b573d6000803e3d6000fd5b505050505b60408051600180825281830190925260009160208083019080368337019050509050606760029054906101000a90046001600160a01b031681600081518110611cdb57611cdb613bda565b6001600160a01b03909216602092830291909101909101526040517f3111e7b300000000000000000000000000000000000000000000000000000000815273d784927ff2f95ba542bfc824c8a8a98f3495f6b590633111e7b390611d49908490600019903090600401613cdd565b6020604051808303816000875af1158015611d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8c919061384d565b50611d95612d25565b60675490925060ff168015611daa5750600082115b8015611dbb5750611db9612d5f565b155b15610d6157734da27a545c0c5b758a6ba100e3a049001de870f56001600160a01b031663787a08a66040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611e0f57600080fd5b505af1158015611e23573d6000803e3d6000fd5b505050505090565b6036546040517fd2493b6c0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116600482015260009073057835ad21a177dbdd3090bb1cae03eacf78fc6d9063d2493b6c90602401606060405180830381865afa158015611ea3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec79190613d41565b5050905080606760026101000a8154816001600160a01b0302191690836001600160a01b03160217905550734da27a545c0c5b758a6ba100e3a049001de870f56001600160a01b03166372b49d636040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f68919061384d565b606581905550734da27a545c0c5b758a6ba100e3a049001de870f56001600160a01b031663359c4a966040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe4919061384d565b60665550565b6040516001600160a01b038316602482015260448101829052610a3a9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612e51565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa1580156120e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612107919061384d565b905081811015612135576121308361211f8385613cc6565b6001600160a01b0387169190612f36565b611061565b81811115611061576110618361214b8484613cc6565b6001600160a01b0387169190613001565b60408051600280825260608083018452926000929190602083019080368337505060365482519293506001600160a01b0316918391506000906121a1576121a1613bda565b6001600160a01b03928316602091820292909201015260675482516201000090910490911690829060019081106121da576121da613bda565b6001600160a01b0390921660209283029190910190910152919050565b600054610100900460ff166122125760005460ff1615612216565b303b155b6122885760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610a93565b600054610100900460ff161580156122aa576000805461ffff19166101011790555b603580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038816908117909155604080517fdc4c90d3000000000000000000000000000000000000000000000000000000008152905163dc4c90d3916004808201926020929091908290030181865afa158015612334573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123589190613c28565b603480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169182179055604080517ffc0c546a000000000000000000000000000000000000000000000000000000008152905163fc0c546a916004808201926020929091908290030181865afa1580156123e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124079190613c28565b603680547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169190911790558451612452906033906020880190613333565b5060345461248a907f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041906001600160a01b031661313a565b60005b84518110156124eb576124d97f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50418683815181106124cc576124cc613bda565b602002602001015161313a565b806124e381613c0d565b91505061248d565b506125167ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab8461313a565b60005b825181101561256a576125587ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab8483815181106124cc576124cc613bda565b8061256281613c0d565b915050612519565b506125b57ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041613144565b6125df7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50418461313a565b6126097f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c8761313a565b6126537f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50417f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c613144565b61269d7f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041613144565b603660009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127149190613d8e565b61271f90600a613e8d565b60375560365461273b906001600160a01b031687600019612754565b8015610642576000805461ff0019169055505050505050565b8015806127ce5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156127a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127cc919061384d565b155b6128405760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610a93565b6040516001600160a01b038316602482015260448101829052610a3a9084907f095ea7b3000000000000000000000000000000000000000000000000000000009060640161202f565b6067546040516370a0823160e01b81523060048201526000916201000090046001600160a01b0316906370a08231906024015b602060405180830381865afa1580156128d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5b919061384d565b603654604051636eb1769f60e11b8152306004820152737d2768de32b0b80b7a3454c06bdac94a69ddc7a9602482018190529183916001600160a01b039091169063dd62ed3e90604401602060405180830381865afa158015612964573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612988919061384d565b10156129bf576036546129a6906001600160a01b0316826000612754565b6036546129bf906001600160a01b031682600019612754565b6036546040517fe8eda9df0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015260248101849052306044820152600060648201529082169063e8eda9df90608401600060405180830381600087803b158015612a3357600080fd5b505af1158015610642573d6000803e3d6000fd5b60606000612a5683600261387c565b612a61906002613a96565b67ffffffffffffffff811115612a7957612a796133c3565b6040519080825280601f01601f191660200182016040528015612aa3576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612ada57612ada613bda565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612b3d57612b3d613bda565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612b7984600261387c565b612b84906001613a96565b90505b6001811115612c21577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612bc557612bc5613bda565b1a60f81b828281518110612bdb57612bdb613bda565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93612c1a81613e9c565b9050612b87565b508315612c705760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a93565b9392505050565b60008073547a514d5e3769680ce22b2361c10ea13619e8a96001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015612ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf09190613ecd565b5050509150506a52b7d2dcc80cd2e40000006037548483612d11919061387c565b612d1b919061387c565b610a0a9190613b83565b6040516370a0823160e01b8152306004820152600090734da27a545c0c5b758a6ba100e3a049001de870f5906370a08231906024016128bc565b6040517f091030c30000000000000000000000000000000000000000000000000000000081523060048201526000908190734da27a545c0c5b758a6ba100e3a049001de870f59063091030c390602401602060405180830381865afa158015612dcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df0919061384d565b9050600060655482612e029190613a96565b905081612e125760009250505090565b8042118015612e2d5750606654612e299082613a96565b4211155b15612e3b5760019250505090565b80421015612e4c5760029250505090565b505090565b6000612ea6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661319b9092919063ffffffff16565b805190915015610a3a5780806020019051810190612ec49190613f1d565b610a3a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610a93565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015612f87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fab919061384d565b612fb59190613a96565b6040516001600160a01b0385166024820152604481018290529091506110619085907f095ea7b3000000000000000000000000000000000000000000000000000000009060640161202f565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015613051573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613075919061384d565b9050818110156130ed5760405162461bcd60e51b815260206004820152602960248201527f5361666545524332303a2064656372656173656420616c6c6f77616e6365206260448201527f656c6f77207a65726f00000000000000000000000000000000000000000000006064820152608401610a93565b6040516001600160a01b03841660248201528282036044820181905290610d0d9086907f095ea7b3000000000000000000000000000000000000000000000000000000009060640161202f565b610aa68282611a8c565b60008281526001602081905260409091200154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a4600091825260016020819052604090922090910155565b60606131aa84846000856131b2565b949350505050565b60608247101561322a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610a93565b6001600160a01b0385163b6132815760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a93565b600080866001600160a01b0316858760405161329d9190613831565b60006040518083038185875af1925050503d80600081146132da576040519150601f19603f3d011682016040523d82523d6000602084013e6132df565b606091505b50915091506132ef8282866132fa565b979650505050505050565b60608315613309575081612c70565b8251156133195782518084602001fd5b8160405162461bcd60e51b8152600401610a9391906136ea565b82805461333f90613ba5565b90600052602060002090601f01602090048101928261336157600085556133a7565b82601f1061337a57805160ff19168380011785556133a7565b828001600101855582156133a7579182015b828111156133a757825182559160200191906001019061338c565b50610d619291505b80821115610d6157600081556001016133af565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff811182821017156133fd576133fd6133c3565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561342c5761342c6133c3565b604052919050565b600067ffffffffffffffff83111561344e5761344e6133c3565b6134616020601f19601f86011601613403565b905082815283838301111561347557600080fd5b828260208301376000602084830101529392505050565b6000806040838503121561349f57600080fd5b82359150602083013567ffffffffffffffff8111156134bd57600080fd5b8301601f810185136134ce57600080fd5b6134dd85823560208401613434565b9150509250929050565b6000602082840312156134f957600080fd5b5035919050565b6001600160a01b03811681146112e257600080fd5b803561352081613500565b919050565b6000806040838503121561353857600080fd5b82359150602083013561354a81613500565b809150509250929050565b80151581146112e257600080fd5b803561352081613555565b600082601f83011261357f57600080fd5b8135602067ffffffffffffffff82111561359b5761359b6133c3565b8160051b6135aa828201613403565b92835284810182019282810190878511156135c457600080fd5b83870192505b848310156132ef5782356135dd81613500565b825291830191908301906135ca565b60008060008060008060c0878903121561360557600080fd5b863561361081613500565b9550602087013567ffffffffffffffff8082111561362d57600080fd5b818901915089601f83011261364157600080fd5b6136508a833560208501613434565b965061365e60408a01613563565b9550606089013591508082111561367457600080fd5b6136808a838b0161356e565b945061368e60808a01613515565b935060a08901359150808211156136a457600080fd5b506136b189828a0161356e565b9150509295509295509295565b60005b838110156136d95781810151838201526020016136c1565b838111156110615750506000910152565b60208152600082518060208401526137098160408501602087016136be565b601f01601f19169190910160400192915050565b60008083601f84011261372f57600080fd5b50813567ffffffffffffffff81111561374757600080fd5b6020830191508360208260051b850101111561376257600080fd5b9250929050565b6000806000806000806060878903121561378257600080fd5b863567ffffffffffffffff8082111561379a57600080fd5b6137a68a838b0161371d565b909850965060208901359150808211156137bf57600080fd5b6137cb8a838b0161371d565b909650945060408901359150808211156137e457600080fd5b506137f189828a0161371d565b979a9699509497509295939492505050565b6000806040838503121561381657600080fd5b823561382181613500565b9150602083013561354a81613500565b600082516138438184602087016136be565b9190910192915050565b60006020828403121561385f57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561389657613896613866565b500290565b6000602082840312156138ad57600080fd5b6040516020810181811067ffffffffffffffff821117156138d0576138d06133c3565b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff8116811461352057600080fd5b805164ffffffffff8116811461352057600080fd5b805161352081613500565b805160ff8116811461352057600080fd5b6000610180828403121561394157600080fd5b6139496133d9565b613953848461389b565b8152613961602084016138dd565b6020820152613972604084016138dd565b6040820152613983606084016138dd565b6060820152613994608084016138dd565b60808201526139a560a084016138dd565b60a08201526139b660c084016138fd565b60c08201526139c760e08401613912565b60e08201526101006139da818501613912565b908201526101206139ec848201613912565b908201526101406139fe848201613912565b90820152610160613a1084820161391d565b908201529392505050565b6000806000806000806000806000806101408b8d031215613a3b57600080fd5b8a51995060208b0151985060408b0151975060608b0151965060808b0151955060a08b0151945060c08b0151935060e08b015192506101008b01519150613a856101208c016138fd565b90509295989b9194979a5092959850565b60008219821115613aa957613aa9613866565b500190565b6000806000806000806000806000806101408b8d031215613ace57600080fd5b8a51995060208b0151985060408b0151975060608b0151965060808b0151955060a08b0151613afc81613555565b60c08c0151909550613b0d81613555565b60e08c0151909450613b1e81613555565b6101008c0151909350613b3081613555565b6101208c0151909250613b4281613555565b809150509295989b9194979a5092959850565b600080600060608486031215613b6a57600080fd5b8351925060208401519150604084015190509250925092565b600082613ba057634e487b7160e01b600052601260045260246000fd5b500490565b600181811c90821680613bb957607f821691505b60208210811415610a0d57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060208284031215613c0257600080fd5b8135612c7081613500565b6000600019821415613c2157613c21613866565b5060010190565b600060208284031215613c3a57600080fd5b8151612c7081613500565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613c7d8160178501602088016136be565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613cba8160288401602088016136be565b01602801949350505050565b600082821015613cd857613cd8613866565b500390565b606080825284519082018190526000906020906080840190828801845b82811015613d1f5781516001600160a01b031684529284019290840190600101613cfa565b50505090830194909452506001600160a01b0391909116604090910152919050565b600080600060608486031215613d5657600080fd5b8351613d6181613500565b6020850151909350613d7281613500565b6040850151909250613d8381613500565b809150509250925092565b600060208284031215613da057600080fd5b612c708261391d565b600181815b80851115613de4578160001904821115613dca57613dca613866565b80851615613dd757918102915b93841c9390800290613dae565b509250929050565b600082613dfb57506001610e1a565b81613e0857506000610e1a565b8160018114613e1e5760028114613e2857613e44565b6001915050610e1a565b60ff841115613e3957613e39613866565b50506001821b610e1a565b5060208310610133831016604e8410600b8410161715613e67575081810a610e1a565b613e718383613da9565b8060001904821115613e8557613e85613866565b029392505050565b6000612c7060ff841683613dec565b600081613eab57613eab613866565b506000190190565b805169ffffffffffffffffffff8116811461352057600080fd5b600080600080600060a08688031215613ee557600080fd5b613eee86613eb3565b9450602086015193506040860151925060608601519150613f1160808701613eb3565b90509295509295909350565b600060208284031215613f2f57600080fd5b8151612c708161355556fea2646970667358221220d41c7cec04ef17634c6f0b8da5cb0ba6c8b53c712d54f05666171839c6eca25564736f6c634300080c0033",
  "devdoc": {
    "author": "Angle Core Team",
    "details": "In this implementation, we just have to override the base functions with constant amounts as nothing is staked in an external contract",
    "kind": "dev",
    "methods": {
      "aprAfterDeposit(uint256)": {
        "params": {
          "extraAmount": "The amount to add to the lending platform"
        }
      },
      "changeAllowance(address[],address[],uint256[])": {
        "params": {
          "amounts": "Approval amounts for each address",
          "spenders": "Addresses to approve",
          "tokens": "Addresses of the tokens for which approvals should be made"
        }
      },
      "claimRewards()": {
        "details": "stkAAVE require a \"cooldown\" period of 10 days before being claimed"
      },
      "emergencyWithdraw(uint256)": {
        "details": "Does not check if any error occurs or if the amount withdrawn is correct",
        "params": {
          "amount": "Amount to withdraw"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasAssets()": {
        "details": "We're considering that the strategy has no assets if it has less than 10 of the underlying asset in total to avoid the case where there is dust remaining on the lending market we cannot withdraw everything"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initializeAave(address,string,bool,address[],address,address[])": {
        "params": {
          "_isIncentivised": "Whether the corresponding token is incentivized on Aave or not",
          "_strategy": "Reference to the strategy using this lender",
          "governorList": "List of addresses with governor privilege",
          "guardian": "Address of the guardian",
          "keeperList": "List of addresses with keeper privilege",
          "name": "Name of the lender"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "sellRewards(uint256,bytes)": {
        "details": "In the case of a contract lending to Aave, tokens swapped should typically be: _stkAave -> `want` or Aave -> `want`",
        "params": {
          "minAmountOut": "Minimum amount of `want` to receive for the swap to happen",
          "payload": "Bytes needed for 1Inch API"
        }
      },
      "setAavePoolVariables()": {
        "details": "No access control is needed here because values are fetched from Aave directlyWe expect the values concerned not to be often modified"
      },
      "sweep(address,address)": {
        "details": "Implement `_protectedTokens()` to specify any additional tokens that should be protected from sweeping in addition to `want`.",
        "params": {
          "_token": "The token to transfer out of this poolManager.",
          "to": "Address to send the tokens to."
        }
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "Amount to withdraw"
        },
        "returns": {
          "_0": "Amount actually withdrawn"
        }
      }
    },
    "title": "GenericAaveNoStaker",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "apr()": {
        "notice": "Returns an estimation of the current Annual Percentage Rate"
      },
      "aprAfterDeposit(uint256)": {
        "notice": "Returns an estimation of the current Annual Percentage Rate after a new deposit"
      },
      "changeAllowance(address[],address[],uint256[])": {
        "notice": "Changes allowance of a set of tokens to addresses"
      },
      "claimRewards()": {
        "notice": "Claim earned stkAAVE"
      },
      "cooldown()": {
        "notice": "Triggers the cooldown on Aave for this contract"
      },
      "deposit()": {
        "notice": "Deposits the current balance to the lending platform"
      },
      "emergencyWithdraw(uint256)": {
        "notice": "Withdraws as much as possible in case of emergency and sends it to the `PoolManager`"
      },
      "hasAssets()": {
        "notice": "Check if assets are currently managed by the lender"
      },
      "initialize(address,string,bool,address[],address,address[])": {
        "notice": "Wrapper on top of the `initializeAave` method"
      },
      "initializeAave(address,string,bool,address[],address,address[])": {
        "notice": "Initializer of the `GenericAave`"
      },
      "nav()": {
        "notice": "Helper function to get the current total of assets managed by the lender."
      },
      "poolManager()": {
        "notice": "Reference to the protocol's collateral poolManager"
      },
      "sellRewards(uint256,bytes)": {
        "notice": "Swap earned _stkAave or Aave for `want` through 1Inch"
      },
      "setAavePoolVariables()": {
        "notice": "Retrieves lending pool variables like the `COOLDOWN_SECONDS` or the `UNSTAKE_WINDOW` on Aave"
      },
      "strategy()": {
        "notice": "Reference to the `Strategy`"
      },
      "sweep(address,address)": {
        "notice": "Removes tokens from this Strategy that are not the type of tokens managed by this Strategy. This may be used in case of accidentally sending the wrong kind of token to this Strategy. Tokens will be sent to `governance()`. This will fail if an attempt is made to sweep `want`, or any tokens that are protected by this Strategy. This may only be called by governance."
      },
      "toggleCooldownStkAave()": {
        "notice": "Toggle cooldownStkAave state, which allow or not to call the coolDown stkAave each time rewards are claimed"
      },
      "toggleIsIncentivised()": {
        "notice": "Toggle isIncentivised state, to let know the lender if it should harvest aave rewards"
      },
      "underlyingBalanceStored()": {
        "notice": "Returns the current balance of aTokens"
      },
      "want()": {
        "notice": "Reference to the token lent"
      },
      "wantBase()": {
        "notice": "Base of the asset handled by the lender"
      },
      "weightedApr()": {
        "notice": "Returns an estimation of the current Annual Percentage Rate weighted by a factor"
      },
      "withdraw(uint256)": {
        "notice": "Withdraws a given amount from lender"
      },
      "withdrawAll()": {
        "notice": "Withdraws as much as possible"
      }
    },
    "notice": "Only deposit onto Aave lendingPool with no staking",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 52,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericAaveNoStaker.sol:GenericAaveNoStaker",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 55,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericAaveNoStaker.sol:GenericAaveNoStaker",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4126,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericAaveNoStaker.sol:GenericAaveNoStaker",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4121_storage)"
      },
      {
        "astId": 4412,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericAaveNoStaker.sol:GenericAaveNoStaker",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 19996,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericAaveNoStaker.sol:GenericAaveNoStaker",
        "label": "lenderName",
        "offset": 0,
        "slot": "51",
        "type": "t_string_storage"
      },
      {
        "astId": 20000,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericAaveNoStaker.sol:GenericAaveNoStaker",
        "label": "poolManager",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(IPoolManager)4761"
      },
      {
        "astId": 20004,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericAaveNoStaker.sol:GenericAaveNoStaker",
        "label": "strategy",
        "offset": 0,
        "slot": "53",
        "type": "t_address"
      },
      {
        "astId": 20008,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericAaveNoStaker.sol:GenericAaveNoStaker",
        "label": "want",
        "offset": 0,
        "slot": "54",
        "type": "t_contract(IERC20)2114"
      },
      {
        "astId": 20011,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericAaveNoStaker.sol:GenericAaveNoStaker",
        "label": "wantBase",
        "offset": 0,
        "slot": "55",
        "type": "t_uint256"
      },
      {
        "astId": 20015,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericAaveNoStaker.sol:GenericAaveNoStaker",
        "label": "__gapBaseLender",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 18132,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericAaveNoStaker.sol:GenericAaveNoStaker",
        "label": "cooldownSeconds",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 18134,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericAaveNoStaker.sol:GenericAaveNoStaker",
        "label": "unstakeWindow",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 18136,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericAaveNoStaker.sol:GenericAaveNoStaker",
        "label": "cooldownStkAave",
        "offset": 0,
        "slot": "103",
        "type": "t_bool"
      },
      {
        "astId": 18138,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericAaveNoStaker.sol:GenericAaveNoStaker",
        "label": "isIncentivised",
        "offset": 1,
        "slot": "103",
        "type": "t_bool"
      },
      {
        "astId": 18141,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericAaveNoStaker.sol:GenericAaveNoStaker",
        "label": "_aToken",
        "offset": 2,
        "slot": "103",
        "type": "t_contract(IAToken)5386"
      },
      {
        "astId": 18145,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericAaveNoStaker.sol:GenericAaveNoStaker",
        "label": "__gapAaveLender",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)47_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAToken)5386": {
        "encoding": "inplace",
        "label": "contract IAToken",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2114": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolManager)4761": {
        "encoding": "inplace",
        "label": "contract IPoolManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4121_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlAngleUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4121_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)4121_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlAngleUpgradeable.RoleData",
        "members": [
          {
            "astId": 4118,
            "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericAaveNoStaker.sol:GenericAaveNoStaker",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 4120,
            "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericAaveNoStaker.sol:GenericAaveNoStaker",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}