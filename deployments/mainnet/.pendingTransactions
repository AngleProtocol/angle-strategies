{
  "0xe46165728b4cba73047f3b387642b6c7283bfdf2da684034e6322472ccca3d4e": {
    "name": "FlashMintLib",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "FlashMintLib",
      "sourceName": "contracts/strategies/AaveFlashloanStrategy/AaveLibraries.sol",
      "abi": [
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amountRequested",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amountUsed",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "requiredDAI",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amountToCloseLTVGap",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "deficit",
              "type": "bool"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "flashLoan",
              "type": "address"
            }
          ],
          "name": "Leverage",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "ADAI",
          "outputs": [
            {
              "internalType": "contract IAToken",
              "name": "",
              "type": "IAToken"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "CALLBACK_SUCCESS",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "LENDER",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "maxLiquidity",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ],
      "bytecode": "0x61221261003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061007c5760003560e01c80638237e5381161005a5780638237e538146100ea578063bf04d6e814610111578063bf5061df1461013157600080fd5b806338a1046d1461008157806339ec407b146100b957806370c0345c146100d4575b600080fd5b61009c731eb4cf3a948e7d72a198fe073ccb8c7a948cd85381565b6040516001600160a01b0390911681526020015b60405180910390f35b61009c73028171bca77440897b824ca71d1c56cac55b68a381565b6100dc610151565b6040519081526020016100b0565b6100dc7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd981565b81801561011d57600080fd5b506100dc61012c366004611d29565b610208565b81801561013d57600080fd5b506100dc61014c366004611cd7565b610be2565b6040517f613255ab000000000000000000000000000000000000000000000000000000008152736b175474e89094c44da98b954eedeac495271d0f6004820152600090731eb4cf3a948e7d72a198fe073ccb8c7a948cd8539063613255ab9060240160206040518083038186803b1580156101cb57600080fd5b505afa1580156101df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102039190611e60565b905090565b6000736b175474e89094c44da98b954eedeac495271d0f6001600160a01b0383168114737d2768de32b0b80b7a3454c06bdac94a69ddc7a981156106ec5787156104d2576001600160a01b03811663e8eda9df846102668a8a612112565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015230604482015260006064820152608401600060405180830381600087803b1580156102d157600080fd5b505af11580156102e5573d6000803e3d6000fd5b50506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03808516935063573ade8192508691908216906370a082319060240160206040518083038186803b15801561034e57600080fd5b505afa158015610362573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103869190611e60565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015260026044820152306064820152608401602060405180830381600087803b1580156103f157600080fd5b505af1158015610405573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104299190611e60565b506040517f69328dec0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018890523060448301528216906369328dec906064015b602060405180830381600087803b15801561049457600080fd5b505af11580156104a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cc9190611e60565b50610bb5565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038083169163e8eda9df918691908216906370a082319060240160206040518083038186803b15801561053757600080fd5b505afa15801561054b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056f9190611e60565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015230604482015260006064820152608401600060405180830381600087803b1580156105da57600080fd5b505af11580156105ee573d6000803e3d6000fd5b50506040517fa415bcad0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018b905260026044830152600060648301523060848301528416925063a415bcad915060a401600060405180830381600087803b15801561066957600080fd5b505af115801561067d573d6000803e3d6000fd5b50505050806001600160a01b03166369328dec84898961069d9190612112565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015230604482015260640161047a565b6040517fe8eda9df0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018890523060448301526000606483015282169063e8eda9df90608401600060405180830381600087803b15801561075c57600080fd5b505af1158015610770573d6000803e3d6000fd5b505050508715610962576040517f69328dec0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018990523060448301528216906369328dec90606401602060405180830381600087803b1580156107e357600080fd5b505af11580156107f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081b9190611e60565b506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038083169163573ade81918891908216906370a082319060240160206040518083038186803b15801561088157600080fd5b505afa158015610895573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b99190611e60565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015260026044820152306064820152608401602060405180830381600087803b15801561092457600080fd5b505af1158015610938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095c9190611e60565b50610b12565b6040517fa415bcad0000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015260248201899052600260448301526000606483015230608483015282169063a415bcad9060a401600060405180830381600087803b1580156109d957600080fd5b505af11580156109ed573d6000803e3d6000fd5b50506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03808516935063e8eda9df92508891908216906370a082319060240160206040518083038186803b158015610a5657600080fd5b505afa158015610a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8e9190611e60565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015230604482015260006064820152608401600060405180830381600087803b158015610af957600080fd5b505af1158015610b0d573d6000803e3d6000fd5b505050505b6040517f69328dec0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018890523060448301528216906369328dec90606401602060405180830381600087803b158015610b7b57600080fd5b505af1158015610b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb39190611e60565b505b507f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9979650505050505050565b600084610bf157506000611315565b5083736b175474e89094c44da98b954eedeac495271d0f600084670de0b6b3a7640000610c1e858961131e565b610c2891906120f3565b610c329190611fcd565b905060008415610c5557610c46858861131e565b9050610c528183611fb5565b91505b6000610c5f610151565b6040517f35ea6a750000000000000000000000000000000000000000000000000000000081526001600160a01b0386166004820152909150600090737d2768de32b0b80b7a3454c06bdac94a69ddc7a9906335ea6a75906024016101806040518083038186803b158015610cd257600080fd5b505afa158015610ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0a9190611d73565b602001516040517fd15e00530000000000000000000000000000000000000000000000000000000081526001600160a01b03871660048201526fffffffffffffffffffffffffffffffff9091169150600090737d2768de32b0b80b7a3454c06bdac94a69ddc7a99063d15e00539060240160206040518083038186803b158015610d9357600080fd5b505afa158015610da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcb9190611e60565b9050600082610ddb600282611fcd565b610df16b033b2e3c9fd0803ce8000000896120f3565b610dfb9190611fb5565b610e059190611fcd565b90506b033b2e3c9fd0803ce8000000610e1f600282611fcd565b610e2984846120f3565b610e339190611fb5565b610e3d9190611fcd565b955083861115610ef75781610e5f60026b033b2e3c9fd0803ce8000000611fcd565b610e756b033b2e3c9fd0803ce8000000876120f3565b610e7f9190612112565b610e899190611fcd565b95506b033b2e3c9fd0803ce8000000610ea3600285611fcd565b610ead85896120f3565b610eb79190612112565b610ec19190611fcd565b9550670de0b6b3a76400008a610ee0610eda888a612112565b8e6116d6565b610eea91906120f3565b610ef49190611fcd565b97505b505050505060008884604051602001610f1c9291909115158252602082015260400190565b60408051808303601f19018152908290527fd9d98ce40000000000000000000000000000000000000000000000000000000082526001600160a01b0385166004830152602482018490529150600090731eb4cf3a948e7d72a198fe073ccb8c7a948cd8539063d9d98ce49060440160206040518083038186803b158015610fa257600080fd5b505afa158015610fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fda9190611e60565b90508015610fe757600080fd5b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152306004820152731eb4cf3a948e7d72a198fe073ccb8c7a948cd85360248201526000906001600160a01b0386169063dd62ed3e9060440160206040518083038186803b15801561105c57600080fd5b505afa158015611070573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110949190611e60565b9050838110156111fc576040517f095ea7b3000000000000000000000000000000000000000000000000000000008152731eb4cf3a948e7d72a198fe073ccb8c7a948cd8536004820152600060248201526001600160a01b0386169063095ea7b390604401602060405180830381600087803b15801561111357600080fd5b505af1158015611127573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114b9190611cba565b506040517f095ea7b3000000000000000000000000000000000000000000000000000000008152731eb4cf3a948e7d72a198fe073ccb8c7a948cd853600482015260001960248201526001600160a01b0386169063095ea7b390604401602060405180830381600087803b1580156111c257600080fd5b505af11580156111d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fa9190611cba565b505b6040517f5cffe9de000000000000000000000000000000000000000000000000000000008152731eb4cf3a948e7d72a198fe073ccb8c7a948cd85390635cffe9de90611252903090899089908990600401611ee1565b602060405180830381600087803b15801561126c57600080fd5b505af1158015611280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a49190611cba565b50604080518b815260208101889052908101859052606081018890528b15156080820152731eb4cf3a948e7d72a198fe073ccb8c7a948cd85360a08201527f1b861d4c31d2586a4a0ba63fafad6452b1baf4e1dc2f751a97fef380b34032a79060c00160405180910390a150505050505b95945050505050565b6000736b175474e89094c44da98b954eedeac495271d0f831580611343575060001984145b8061135f5750806001600160a01b0316836001600160a01b0316145b1561136d57839150506116d0565b6001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc214156114c95761139a611a5a565b6040517fb3596f070000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152919091169063b3596f079060240160206040518083038186803b1580156113f657600080fd5b505afa15801561140a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142e9190611e60565b816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561146757600080fd5b505afa15801561147b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149f9190611e79565b6114ad9060ff16600a61204b565b6114b790866120f3565b6114c19190611fcd565b9150506116d0565b60408051600280825260608201835260009260208301908036833701905050905083816000815181106114fe576114fe612158565b60200260200101906001600160a01b031690816001600160a01b031681525050818160018151811061153257611532612158565b60200260200101906001600160a01b031690816001600160a01b031681525050600061155c611a5a565b6001600160a01b0316639d23d9f2836040518263ffffffff1660e01b81526004016115879190611e94565b60006040518083038186803b15801561159f57600080fd5b505afa1580156115b3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115db9190810190611c0d565b90506000856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561161857600080fd5b505afa15801561162c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116509190611e79565b61165e9060ff16600a61204b565b8260008151811061167157611671612158565b60200260200101518861168491906120f3565b61168e9190611fcd565b9050816001815181106116a3576116a3612158565b6020026020010151670de0b6b3a7640000826116bf91906120f3565b6116c99190611fcd565b9450505050505b92915050565b6000736b175474e89094c44da98b954eedeac495271d0f8315806116fb575060001984145b806117175750806001600160a01b0316836001600160a01b0316145b1561172557839150506116d0565b6001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2141561186557806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561178357600080fd5b505afa158015611797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117bb9190611e79565b6117c99060ff16600a61204b565b6117d1611a5a565b6040517fb3596f070000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063b3596f079060240160206040518083038186803b15801561182d57600080fd5b505afa158015611841573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ad9190611e60565b604080516002808252606082018352600092602083019080368337019050509050838160008151811061189a5761189a612158565b60200260200101906001600160a01b031690816001600160a01b03168152505081816001815181106118ce576118ce612158565b60200260200101906001600160a01b031690816001600160a01b03168152505060006118f8611a5a565b6001600160a01b0316639d23d9f2836040518263ffffffff1660e01b81526004016119239190611e94565b60006040518083038186803b15801561193b57600080fd5b505afa15801561194f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119779190810190611c0d565b90506000670de0b6b3a76400008260018151811061199757611997612158565b6020026020010151886119aa91906120f3565b6119b49190611fcd565b9050816000815181106119c9576119c9612158565b6020026020010151866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611a0a57600080fd5b505afa158015611a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a429190611e79565b611a509060ff16600a61204b565b6116bf90836120f3565b600073057835ad21a177dbdd3090bb1cae03eacf78fc6d6001600160a01b0316630542975c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611aa957600080fd5b505afa158015611abd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae19190611be9565b6001600160a01b031663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b158015611b1957600080fd5b505afa158015611b2d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102039190611be9565b8051611b5c816121b6565b919050565b600060208284031215611b7357600080fd5b6040516020810181811067ffffffffffffffff82111715611b9657611b96612187565b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff81168114611b5c57600080fd5b805164ffffffffff81168114611b5c57600080fd5b805160ff81168114611b5c57600080fd5b600060208284031215611bfb57600080fd5b8151611c06816121b6565b9392505050565b60006020808385031215611c2057600080fd5b825167ffffffffffffffff80821115611c3857600080fd5b818501915085601f830112611c4c57600080fd5b815181811115611c5e57611c5e612187565b8060051b9150611c6f848301611f84565b8181528481019084860184860187018a1015611c8a57600080fd5b600095505b83861015611cad578051835260019590950194918601918601611c8f565b5098975050505050505050565b600060208284031215611ccc57600080fd5b8151611c06816121ce565b600080600080600060a08688031215611cef57600080fd5b8535611cfa816121ce565b9450602086013593506040860135611d11816121b6565b94979396509394606081013594506080013592915050565b60008060008060808587031215611d3f57600080fd5b8435611d4a816121ce565b935060208501359250604085013591506060850135611d68816121b6565b939692955090935050565b60006101808284031215611d8657600080fd5b611d8e611f5a565b611d988484611b61565b8152611da660208401611ba3565b6020820152611db760408401611ba3565b6040820152611dc860608401611ba3565b6060820152611dd960808401611ba3565b6080820152611dea60a08401611ba3565b60a0820152611dfb60c08401611bc3565b60c0820152611e0c60e08401611b51565b60e0820152610100611e1f818501611b51565b90820152610120611e31848201611b51565b90820152610140611e43848201611b51565b90820152610160611e55848201611bd8565b908201529392505050565b600060208284031215611e7257600080fd5b5051919050565b600060208284031215611e8b57600080fd5b611c0682611bd8565b6020808252825182820181905260009190848201906040850190845b81811015611ed55783516001600160a01b031683529284019291840191600101611eb0565b50909695505050505050565b60006001600160a01b038087168352602081871681850152856040850152608060608501528451915081608085015260005b82811015611f2f5785810182015185820160a001528101611f13565b82811115611f4157600060a084870101525b5050601f01601f19169190910160a00195945050505050565b604051610180810167ffffffffffffffff81118282101715611f7e57611f7e612187565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611fad57611fad612187565b604052919050565b60008219821115611fc857611fc8612129565b500190565b600082612003577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600181815b8085111561204357816000190482111561202957612029612129565b8085161561203657918102915b93841c939080029061200d565b509250929050565b6000611c068383600082612061575060016116d0565b8161206e575060006116d0565b8160018114612084576002811461208e576120aa565b60019150506116d0565b60ff84111561209f5761209f612129565b50506001821b6116d0565b5060208310610133831016604e8410600b84101617156120cd575081810a6116d0565b6120d78383612008565b80600019048211156120eb576120eb612129565b029392505050565b600081600019048311821515161561210d5761210d612129565b500290565b60008282101561212457612124612129565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b03811681146121cb57600080fd5b50565b80151581146121cb57600080fdfea2646970667358221220f988c1bcd42cd99669ca17e73f3efa39d0a8ed8fb874d1eb8f527ac334d6e84664736f6c63430008070033",
      "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061007c5760003560e01c80638237e5381161005a5780638237e538146100ea578063bf04d6e814610111578063bf5061df1461013157600080fd5b806338a1046d1461008157806339ec407b146100b957806370c0345c146100d4575b600080fd5b61009c731eb4cf3a948e7d72a198fe073ccb8c7a948cd85381565b6040516001600160a01b0390911681526020015b60405180910390f35b61009c73028171bca77440897b824ca71d1c56cac55b68a381565b6100dc610151565b6040519081526020016100b0565b6100dc7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd981565b81801561011d57600080fd5b506100dc61012c366004611d29565b610208565b81801561013d57600080fd5b506100dc61014c366004611cd7565b610be2565b6040517f613255ab000000000000000000000000000000000000000000000000000000008152736b175474e89094c44da98b954eedeac495271d0f6004820152600090731eb4cf3a948e7d72a198fe073ccb8c7a948cd8539063613255ab9060240160206040518083038186803b1580156101cb57600080fd5b505afa1580156101df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102039190611e60565b905090565b6000736b175474e89094c44da98b954eedeac495271d0f6001600160a01b0383168114737d2768de32b0b80b7a3454c06bdac94a69ddc7a981156106ec5787156104d2576001600160a01b03811663e8eda9df846102668a8a612112565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015230604482015260006064820152608401600060405180830381600087803b1580156102d157600080fd5b505af11580156102e5573d6000803e3d6000fd5b50506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03808516935063573ade8192508691908216906370a082319060240160206040518083038186803b15801561034e57600080fd5b505afa158015610362573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103869190611e60565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015260026044820152306064820152608401602060405180830381600087803b1580156103f157600080fd5b505af1158015610405573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104299190611e60565b506040517f69328dec0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018890523060448301528216906369328dec906064015b602060405180830381600087803b15801561049457600080fd5b505af11580156104a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cc9190611e60565b50610bb5565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038083169163e8eda9df918691908216906370a082319060240160206040518083038186803b15801561053757600080fd5b505afa15801561054b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056f9190611e60565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015230604482015260006064820152608401600060405180830381600087803b1580156105da57600080fd5b505af11580156105ee573d6000803e3d6000fd5b50506040517fa415bcad0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018b905260026044830152600060648301523060848301528416925063a415bcad915060a401600060405180830381600087803b15801561066957600080fd5b505af115801561067d573d6000803e3d6000fd5b50505050806001600160a01b03166369328dec84898961069d9190612112565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015230604482015260640161047a565b6040517fe8eda9df0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018890523060448301526000606483015282169063e8eda9df90608401600060405180830381600087803b15801561075c57600080fd5b505af1158015610770573d6000803e3d6000fd5b505050508715610962576040517f69328dec0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018990523060448301528216906369328dec90606401602060405180830381600087803b1580156107e357600080fd5b505af11580156107f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081b9190611e60565b506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038083169163573ade81918891908216906370a082319060240160206040518083038186803b15801561088157600080fd5b505afa158015610895573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b99190611e60565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015260026044820152306064820152608401602060405180830381600087803b15801561092457600080fd5b505af1158015610938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095c9190611e60565b50610b12565b6040517fa415bcad0000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015260248201899052600260448301526000606483015230608483015282169063a415bcad9060a401600060405180830381600087803b1580156109d957600080fd5b505af11580156109ed573d6000803e3d6000fd5b50506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03808516935063e8eda9df92508891908216906370a082319060240160206040518083038186803b158015610a5657600080fd5b505afa158015610a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8e9190611e60565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015230604482015260006064820152608401600060405180830381600087803b158015610af957600080fd5b505af1158015610b0d573d6000803e3d6000fd5b505050505b6040517f69328dec0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018890523060448301528216906369328dec90606401602060405180830381600087803b158015610b7b57600080fd5b505af1158015610b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb39190611e60565b505b507f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9979650505050505050565b600084610bf157506000611315565b5083736b175474e89094c44da98b954eedeac495271d0f600084670de0b6b3a7640000610c1e858961131e565b610c2891906120f3565b610c329190611fcd565b905060008415610c5557610c46858861131e565b9050610c528183611fb5565b91505b6000610c5f610151565b6040517f35ea6a750000000000000000000000000000000000000000000000000000000081526001600160a01b0386166004820152909150600090737d2768de32b0b80b7a3454c06bdac94a69ddc7a9906335ea6a75906024016101806040518083038186803b158015610cd257600080fd5b505afa158015610ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0a9190611d73565b602001516040517fd15e00530000000000000000000000000000000000000000000000000000000081526001600160a01b03871660048201526fffffffffffffffffffffffffffffffff9091169150600090737d2768de32b0b80b7a3454c06bdac94a69ddc7a99063d15e00539060240160206040518083038186803b158015610d9357600080fd5b505afa158015610da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcb9190611e60565b9050600082610ddb600282611fcd565b610df16b033b2e3c9fd0803ce8000000896120f3565b610dfb9190611fb5565b610e059190611fcd565b90506b033b2e3c9fd0803ce8000000610e1f600282611fcd565b610e2984846120f3565b610e339190611fb5565b610e3d9190611fcd565b955083861115610ef75781610e5f60026b033b2e3c9fd0803ce8000000611fcd565b610e756b033b2e3c9fd0803ce8000000876120f3565b610e7f9190612112565b610e899190611fcd565b95506b033b2e3c9fd0803ce8000000610ea3600285611fcd565b610ead85896120f3565b610eb79190612112565b610ec19190611fcd565b9550670de0b6b3a76400008a610ee0610eda888a612112565b8e6116d6565b610eea91906120f3565b610ef49190611fcd565b97505b505050505060008884604051602001610f1c9291909115158252602082015260400190565b60408051808303601f19018152908290527fd9d98ce40000000000000000000000000000000000000000000000000000000082526001600160a01b0385166004830152602482018490529150600090731eb4cf3a948e7d72a198fe073ccb8c7a948cd8539063d9d98ce49060440160206040518083038186803b158015610fa257600080fd5b505afa158015610fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fda9190611e60565b90508015610fe757600080fd5b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152306004820152731eb4cf3a948e7d72a198fe073ccb8c7a948cd85360248201526000906001600160a01b0386169063dd62ed3e9060440160206040518083038186803b15801561105c57600080fd5b505afa158015611070573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110949190611e60565b9050838110156111fc576040517f095ea7b3000000000000000000000000000000000000000000000000000000008152731eb4cf3a948e7d72a198fe073ccb8c7a948cd8536004820152600060248201526001600160a01b0386169063095ea7b390604401602060405180830381600087803b15801561111357600080fd5b505af1158015611127573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114b9190611cba565b506040517f095ea7b3000000000000000000000000000000000000000000000000000000008152731eb4cf3a948e7d72a198fe073ccb8c7a948cd853600482015260001960248201526001600160a01b0386169063095ea7b390604401602060405180830381600087803b1580156111c257600080fd5b505af11580156111d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fa9190611cba565b505b6040517f5cffe9de000000000000000000000000000000000000000000000000000000008152731eb4cf3a948e7d72a198fe073ccb8c7a948cd85390635cffe9de90611252903090899089908990600401611ee1565b602060405180830381600087803b15801561126c57600080fd5b505af1158015611280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a49190611cba565b50604080518b815260208101889052908101859052606081018890528b15156080820152731eb4cf3a948e7d72a198fe073ccb8c7a948cd85360a08201527f1b861d4c31d2586a4a0ba63fafad6452b1baf4e1dc2f751a97fef380b34032a79060c00160405180910390a150505050505b95945050505050565b6000736b175474e89094c44da98b954eedeac495271d0f831580611343575060001984145b8061135f5750806001600160a01b0316836001600160a01b0316145b1561136d57839150506116d0565b6001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc214156114c95761139a611a5a565b6040517fb3596f070000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152919091169063b3596f079060240160206040518083038186803b1580156113f657600080fd5b505afa15801561140a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142e9190611e60565b816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561146757600080fd5b505afa15801561147b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149f9190611e79565b6114ad9060ff16600a61204b565b6114b790866120f3565b6114c19190611fcd565b9150506116d0565b60408051600280825260608201835260009260208301908036833701905050905083816000815181106114fe576114fe612158565b60200260200101906001600160a01b031690816001600160a01b031681525050818160018151811061153257611532612158565b60200260200101906001600160a01b031690816001600160a01b031681525050600061155c611a5a565b6001600160a01b0316639d23d9f2836040518263ffffffff1660e01b81526004016115879190611e94565b60006040518083038186803b15801561159f57600080fd5b505afa1580156115b3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115db9190810190611c0d565b90506000856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561161857600080fd5b505afa15801561162c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116509190611e79565b61165e9060ff16600a61204b565b8260008151811061167157611671612158565b60200260200101518861168491906120f3565b61168e9190611fcd565b9050816001815181106116a3576116a3612158565b6020026020010151670de0b6b3a7640000826116bf91906120f3565b6116c99190611fcd565b9450505050505b92915050565b6000736b175474e89094c44da98b954eedeac495271d0f8315806116fb575060001984145b806117175750806001600160a01b0316836001600160a01b0316145b1561172557839150506116d0565b6001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2141561186557806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561178357600080fd5b505afa158015611797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117bb9190611e79565b6117c99060ff16600a61204b565b6117d1611a5a565b6040517fb3596f070000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063b3596f079060240160206040518083038186803b15801561182d57600080fd5b505afa158015611841573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ad9190611e60565b604080516002808252606082018352600092602083019080368337019050509050838160008151811061189a5761189a612158565b60200260200101906001600160a01b031690816001600160a01b03168152505081816001815181106118ce576118ce612158565b60200260200101906001600160a01b031690816001600160a01b03168152505060006118f8611a5a565b6001600160a01b0316639d23d9f2836040518263ffffffff1660e01b81526004016119239190611e94565b60006040518083038186803b15801561193b57600080fd5b505afa15801561194f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119779190810190611c0d565b90506000670de0b6b3a76400008260018151811061199757611997612158565b6020026020010151886119aa91906120f3565b6119b49190611fcd565b9050816000815181106119c9576119c9612158565b6020026020010151866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611a0a57600080fd5b505afa158015611a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a429190611e79565b611a509060ff16600a61204b565b6116bf90836120f3565b600073057835ad21a177dbdd3090bb1cae03eacf78fc6d6001600160a01b0316630542975c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611aa957600080fd5b505afa158015611abd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae19190611be9565b6001600160a01b031663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b158015611b1957600080fd5b505afa158015611b2d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102039190611be9565b8051611b5c816121b6565b919050565b600060208284031215611b7357600080fd5b6040516020810181811067ffffffffffffffff82111715611b9657611b96612187565b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff81168114611b5c57600080fd5b805164ffffffffff81168114611b5c57600080fd5b805160ff81168114611b5c57600080fd5b600060208284031215611bfb57600080fd5b8151611c06816121b6565b9392505050565b60006020808385031215611c2057600080fd5b825167ffffffffffffffff80821115611c3857600080fd5b818501915085601f830112611c4c57600080fd5b815181811115611c5e57611c5e612187565b8060051b9150611c6f848301611f84565b8181528481019084860184860187018a1015611c8a57600080fd5b600095505b83861015611cad578051835260019590950194918601918601611c8f565b5098975050505050505050565b600060208284031215611ccc57600080fd5b8151611c06816121ce565b600080600080600060a08688031215611cef57600080fd5b8535611cfa816121ce565b9450602086013593506040860135611d11816121b6565b94979396509394606081013594506080013592915050565b60008060008060808587031215611d3f57600080fd5b8435611d4a816121ce565b935060208501359250604085013591506060850135611d68816121b6565b939692955090935050565b60006101808284031215611d8657600080fd5b611d8e611f5a565b611d988484611b61565b8152611da660208401611ba3565b6020820152611db760408401611ba3565b6040820152611dc860608401611ba3565b6060820152611dd960808401611ba3565b6080820152611dea60a08401611ba3565b60a0820152611dfb60c08401611bc3565b60c0820152611e0c60e08401611b51565b60e0820152610100611e1f818501611b51565b90820152610120611e31848201611b51565b90820152610140611e43848201611b51565b90820152610160611e55848201611bd8565b908201529392505050565b600060208284031215611e7257600080fd5b5051919050565b600060208284031215611e8b57600080fd5b611c0682611bd8565b6020808252825182820181905260009190848201906040850190845b81811015611ed55783516001600160a01b031683529284019291840191600101611eb0565b50909695505050505050565b60006001600160a01b038087168352602081871681850152856040850152608060608501528451915081608085015260005b82811015611f2f5785810182015185820160a001528101611f13565b82811115611f4157600060a084870101525b5050601f01601f19169190910160a00195945050505050565b604051610180810167ffffffffffffffff81118282101715611f7e57611f7e612187565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611fad57611fad612187565b604052919050565b60008219821115611fc857611fc8612129565b500190565b600082612003577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600181815b8085111561204357816000190482111561202957612029612129565b8085161561203657918102915b93841c939080029061200d565b509250929050565b6000611c068383600082612061575060016116d0565b8161206e575060006116d0565b8160018114612084576002811461208e576120aa565b60019150506116d0565b60ff84111561209f5761209f612129565b50506001821b6116d0565b5060208310610133831016604e8410600b84101617156120cd575081810a6116d0565b6120d78383612008565b80600019048211156120eb576120eb612129565b029392505050565b600081600019048311821515161561210d5761210d612129565b500290565b60008282101561212457612124612129565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b03811681146121cb57600080fd5b50565b80151581146121cb57600080fdfea2646970667358221220f988c1bcd42cd99669ca17e73f3efa39d0a8ed8fb874d1eb8f527ac334d6e84664736f6c63430008070033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {},
          "generatedSources": [],
          "linkReferences": {},
          "object": "61221261003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061007c5760003560e01c80638237e5381161005a5780638237e538146100ea578063bf04d6e814610111578063bf5061df1461013157600080fd5b806338a1046d1461008157806339ec407b146100b957806370c0345c146100d4575b600080fd5b61009c731eb4cf3a948e7d72a198fe073ccb8c7a948cd85381565b6040516001600160a01b0390911681526020015b60405180910390f35b61009c73028171bca77440897b824ca71d1c56cac55b68a381565b6100dc610151565b6040519081526020016100b0565b6100dc7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd981565b81801561011d57600080fd5b506100dc61012c366004611d29565b610208565b81801561013d57600080fd5b506100dc61014c366004611cd7565b610be2565b6040517f613255ab000000000000000000000000000000000000000000000000000000008152736b175474e89094c44da98b954eedeac495271d0f6004820152600090731eb4cf3a948e7d72a198fe073ccb8c7a948cd8539063613255ab9060240160206040518083038186803b1580156101cb57600080fd5b505afa1580156101df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102039190611e60565b905090565b6000736b175474e89094c44da98b954eedeac495271d0f6001600160a01b0383168114737d2768de32b0b80b7a3454c06bdac94a69ddc7a981156106ec5787156104d2576001600160a01b03811663e8eda9df846102668a8a612112565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015230604482015260006064820152608401600060405180830381600087803b1580156102d157600080fd5b505af11580156102e5573d6000803e3d6000fd5b50506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03808516935063573ade8192508691908216906370a082319060240160206040518083038186803b15801561034e57600080fd5b505afa158015610362573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103869190611e60565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015260026044820152306064820152608401602060405180830381600087803b1580156103f157600080fd5b505af1158015610405573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104299190611e60565b506040517f69328dec0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018890523060448301528216906369328dec906064015b602060405180830381600087803b15801561049457600080fd5b505af11580156104a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cc9190611e60565b50610bb5565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038083169163e8eda9df918691908216906370a082319060240160206040518083038186803b15801561053757600080fd5b505afa15801561054b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056f9190611e60565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015230604482015260006064820152608401600060405180830381600087803b1580156105da57600080fd5b505af11580156105ee573d6000803e3d6000fd5b50506040517fa415bcad0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018b905260026044830152600060648301523060848301528416925063a415bcad915060a401600060405180830381600087803b15801561066957600080fd5b505af115801561067d573d6000803e3d6000fd5b50505050806001600160a01b03166369328dec84898961069d9190612112565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015230604482015260640161047a565b6040517fe8eda9df0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018890523060448301526000606483015282169063e8eda9df90608401600060405180830381600087803b15801561075c57600080fd5b505af1158015610770573d6000803e3d6000fd5b505050508715610962576040517f69328dec0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018990523060448301528216906369328dec90606401602060405180830381600087803b1580156107e357600080fd5b505af11580156107f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081b9190611e60565b506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038083169163573ade81918891908216906370a082319060240160206040518083038186803b15801561088157600080fd5b505afa158015610895573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b99190611e60565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015260026044820152306064820152608401602060405180830381600087803b15801561092457600080fd5b505af1158015610938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095c9190611e60565b50610b12565b6040517fa415bcad0000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015260248201899052600260448301526000606483015230608483015282169063a415bcad9060a401600060405180830381600087803b1580156109d957600080fd5b505af11580156109ed573d6000803e3d6000fd5b50506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03808516935063e8eda9df92508891908216906370a082319060240160206040518083038186803b158015610a5657600080fd5b505afa158015610a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8e9190611e60565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015230604482015260006064820152608401600060405180830381600087803b158015610af957600080fd5b505af1158015610b0d573d6000803e3d6000fd5b505050505b6040517f69328dec0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018890523060448301528216906369328dec90606401602060405180830381600087803b158015610b7b57600080fd5b505af1158015610b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb39190611e60565b505b507f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9979650505050505050565b600084610bf157506000611315565b5083736b175474e89094c44da98b954eedeac495271d0f600084670de0b6b3a7640000610c1e858961131e565b610c2891906120f3565b610c329190611fcd565b905060008415610c5557610c46858861131e565b9050610c528183611fb5565b91505b6000610c5f610151565b6040517f35ea6a750000000000000000000000000000000000000000000000000000000081526001600160a01b0386166004820152909150600090737d2768de32b0b80b7a3454c06bdac94a69ddc7a9906335ea6a75906024016101806040518083038186803b158015610cd257600080fd5b505afa158015610ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0a9190611d73565b602001516040517fd15e00530000000000000000000000000000000000000000000000000000000081526001600160a01b03871660048201526fffffffffffffffffffffffffffffffff9091169150600090737d2768de32b0b80b7a3454c06bdac94a69ddc7a99063d15e00539060240160206040518083038186803b158015610d9357600080fd5b505afa158015610da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcb9190611e60565b9050600082610ddb600282611fcd565b610df16b033b2e3c9fd0803ce8000000896120f3565b610dfb9190611fb5565b610e059190611fcd565b90506b033b2e3c9fd0803ce8000000610e1f600282611fcd565b610e2984846120f3565b610e339190611fb5565b610e3d9190611fcd565b955083861115610ef75781610e5f60026b033b2e3c9fd0803ce8000000611fcd565b610e756b033b2e3c9fd0803ce8000000876120f3565b610e7f9190612112565b610e899190611fcd565b95506b033b2e3c9fd0803ce8000000610ea3600285611fcd565b610ead85896120f3565b610eb79190612112565b610ec19190611fcd565b9550670de0b6b3a76400008a610ee0610eda888a612112565b8e6116d6565b610eea91906120f3565b610ef49190611fcd565b97505b505050505060008884604051602001610f1c9291909115158252602082015260400190565b60408051808303601f19018152908290527fd9d98ce40000000000000000000000000000000000000000000000000000000082526001600160a01b0385166004830152602482018490529150600090731eb4cf3a948e7d72a198fe073ccb8c7a948cd8539063d9d98ce49060440160206040518083038186803b158015610fa257600080fd5b505afa158015610fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fda9190611e60565b90508015610fe757600080fd5b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152306004820152731eb4cf3a948e7d72a198fe073ccb8c7a948cd85360248201526000906001600160a01b0386169063dd62ed3e9060440160206040518083038186803b15801561105c57600080fd5b505afa158015611070573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110949190611e60565b9050838110156111fc576040517f095ea7b3000000000000000000000000000000000000000000000000000000008152731eb4cf3a948e7d72a198fe073ccb8c7a948cd8536004820152600060248201526001600160a01b0386169063095ea7b390604401602060405180830381600087803b15801561111357600080fd5b505af1158015611127573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114b9190611cba565b506040517f095ea7b3000000000000000000000000000000000000000000000000000000008152731eb4cf3a948e7d72a198fe073ccb8c7a948cd853600482015260001960248201526001600160a01b0386169063095ea7b390604401602060405180830381600087803b1580156111c257600080fd5b505af11580156111d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fa9190611cba565b505b6040517f5cffe9de000000000000000000000000000000000000000000000000000000008152731eb4cf3a948e7d72a198fe073ccb8c7a948cd85390635cffe9de90611252903090899089908990600401611ee1565b602060405180830381600087803b15801561126c57600080fd5b505af1158015611280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a49190611cba565b50604080518b815260208101889052908101859052606081018890528b15156080820152731eb4cf3a948e7d72a198fe073ccb8c7a948cd85360a08201527f1b861d4c31d2586a4a0ba63fafad6452b1baf4e1dc2f751a97fef380b34032a79060c00160405180910390a150505050505b95945050505050565b6000736b175474e89094c44da98b954eedeac495271d0f831580611343575060001984145b8061135f5750806001600160a01b0316836001600160a01b0316145b1561136d57839150506116d0565b6001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc214156114c95761139a611a5a565b6040517fb3596f070000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152919091169063b3596f079060240160206040518083038186803b1580156113f657600080fd5b505afa15801561140a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142e9190611e60565b816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561146757600080fd5b505afa15801561147b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149f9190611e79565b6114ad9060ff16600a61204b565b6114b790866120f3565b6114c19190611fcd565b9150506116d0565b60408051600280825260608201835260009260208301908036833701905050905083816000815181106114fe576114fe612158565b60200260200101906001600160a01b031690816001600160a01b031681525050818160018151811061153257611532612158565b60200260200101906001600160a01b031690816001600160a01b031681525050600061155c611a5a565b6001600160a01b0316639d23d9f2836040518263ffffffff1660e01b81526004016115879190611e94565b60006040518083038186803b15801561159f57600080fd5b505afa1580156115b3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115db9190810190611c0d565b90506000856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561161857600080fd5b505afa15801561162c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116509190611e79565b61165e9060ff16600a61204b565b8260008151811061167157611671612158565b60200260200101518861168491906120f3565b61168e9190611fcd565b9050816001815181106116a3576116a3612158565b6020026020010151670de0b6b3a7640000826116bf91906120f3565b6116c99190611fcd565b9450505050505b92915050565b6000736b175474e89094c44da98b954eedeac495271d0f8315806116fb575060001984145b806117175750806001600160a01b0316836001600160a01b0316145b1561172557839150506116d0565b6001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2141561186557806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561178357600080fd5b505afa158015611797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117bb9190611e79565b6117c99060ff16600a61204b565b6117d1611a5a565b6040517fb3596f070000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063b3596f079060240160206040518083038186803b15801561182d57600080fd5b505afa158015611841573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ad9190611e60565b604080516002808252606082018352600092602083019080368337019050509050838160008151811061189a5761189a612158565b60200260200101906001600160a01b031690816001600160a01b03168152505081816001815181106118ce576118ce612158565b60200260200101906001600160a01b031690816001600160a01b03168152505060006118f8611a5a565b6001600160a01b0316639d23d9f2836040518263ffffffff1660e01b81526004016119239190611e94565b60006040518083038186803b15801561193b57600080fd5b505afa15801561194f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119779190810190611c0d565b90506000670de0b6b3a76400008260018151811061199757611997612158565b6020026020010151886119aa91906120f3565b6119b49190611fcd565b9050816000815181106119c9576119c9612158565b6020026020010151866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611a0a57600080fd5b505afa158015611a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a429190611e79565b611a509060ff16600a61204b565b6116bf90836120f3565b600073057835ad21a177dbdd3090bb1cae03eacf78fc6d6001600160a01b0316630542975c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611aa957600080fd5b505afa158015611abd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae19190611be9565b6001600160a01b031663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b158015611b1957600080fd5b505afa158015611b2d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102039190611be9565b8051611b5c816121b6565b919050565b600060208284031215611b7357600080fd5b6040516020810181811067ffffffffffffffff82111715611b9657611b96612187565b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff81168114611b5c57600080fd5b805164ffffffffff81168114611b5c57600080fd5b805160ff81168114611b5c57600080fd5b600060208284031215611bfb57600080fd5b8151611c06816121b6565b9392505050565b60006020808385031215611c2057600080fd5b825167ffffffffffffffff80821115611c3857600080fd5b818501915085601f830112611c4c57600080fd5b815181811115611c5e57611c5e612187565b8060051b9150611c6f848301611f84565b8181528481019084860184860187018a1015611c8a57600080fd5b600095505b83861015611cad578051835260019590950194918601918601611c8f565b5098975050505050505050565b600060208284031215611ccc57600080fd5b8151611c06816121ce565b600080600080600060a08688031215611cef57600080fd5b8535611cfa816121ce565b9450602086013593506040860135611d11816121b6565b94979396509394606081013594506080013592915050565b60008060008060808587031215611d3f57600080fd5b8435611d4a816121ce565b935060208501359250604085013591506060850135611d68816121b6565b939692955090935050565b60006101808284031215611d8657600080fd5b611d8e611f5a565b611d988484611b61565b8152611da660208401611ba3565b6020820152611db760408401611ba3565b6040820152611dc860608401611ba3565b6060820152611dd960808401611ba3565b6080820152611dea60a08401611ba3565b60a0820152611dfb60c08401611bc3565b60c0820152611e0c60e08401611b51565b60e0820152610100611e1f818501611b51565b90820152610120611e31848201611b51565b90820152610140611e43848201611b51565b90820152610160611e55848201611bd8565b908201529392505050565b600060208284031215611e7257600080fd5b5051919050565b600060208284031215611e8b57600080fd5b611c0682611bd8565b6020808252825182820181905260009190848201906040850190845b81811015611ed55783516001600160a01b031683529284019291840191600101611eb0565b50909695505050505050565b60006001600160a01b038087168352602081871681850152856040850152608060608501528451915081608085015260005b82811015611f2f5785810182015185820160a001528101611f13565b82811115611f4157600060a084870101525b5050601f01601f19169190910160a00195945050505050565b604051610180810167ffffffffffffffff81118282101715611f7e57611f7e612187565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611fad57611fad612187565b604052919050565b60008219821115611fc857611fc8612129565b500190565b600082612003577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600181815b8085111561204357816000190482111561202957612029612129565b8085161561203657918102915b93841c939080029061200d565b509250929050565b6000611c068383600082612061575060016116d0565b8161206e575060006116d0565b8160018114612084576002811461208e576120aa565b60019150506116d0565b60ff84111561209f5761209f612129565b50506001821b6116d0565b5060208310610133831016604e8410600b84101617156120cd575081810a6116d0565b6120d78383612008565b80600019048211156120eb576120eb612129565b029392505050565b600081600019048311821515161561210d5761210d612129565b500290565b60008282101561212457612124612129565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b03811681146121cb57600080fd5b50565b80151581146121cb57600080fdfea2646970667358221220f988c1bcd42cd99669ca17e73f3efa39d0a8ed8fb874d1eb8f527ac334d6e84664736f6c63430008070033",
          "opcodes": "PUSH2 0x2212 PUSH2 0x3A PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x2D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8237E538 GT PUSH2 0x5A JUMPI DUP1 PUSH4 0x8237E538 EQ PUSH2 0xEA JUMPI DUP1 PUSH4 0xBF04D6E8 EQ PUSH2 0x111 JUMPI DUP1 PUSH4 0xBF5061DF EQ PUSH2 0x131 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x38A1046D EQ PUSH2 0x81 JUMPI DUP1 PUSH4 0x39EC407B EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0x70C0345C EQ PUSH2 0xD4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9C PUSH20 0x1EB4CF3A948E7D72A198FE073CCB8C7A948CD853 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9C PUSH20 0x28171BCA77440897B824CA71D1C56CAC55B68A3 DUP2 JUMP JUMPDEST PUSH2 0xDC PUSH2 0x151 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB0 JUMP JUMPDEST PUSH2 0xDC PUSH32 0x439148F0BBC682CA079E46D6E2C2F0C1E3B820F1A291B069D8882ABF8CF18DD9 DUP2 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x11D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDC PUSH2 0x12C CALLDATASIZE PUSH1 0x4 PUSH2 0x1D29 JUMP JUMPDEST PUSH2 0x208 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x13D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDC PUSH2 0x14C CALLDATASIZE PUSH1 0x4 PUSH2 0x1CD7 JUMP JUMPDEST PUSH2 0xBE2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x613255AB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0x6B175474E89094C44DA98B954EEDEAC495271D0F PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH20 0x1EB4CF3A948E7D72A198FE073CCB8C7A948CD853 SWAP1 PUSH4 0x613255AB SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1DF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x203 SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0x6B175474E89094C44DA98B954EEDEAC495271D0F PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 EQ PUSH20 0x7D2768DE32B0B80B7A3454C06BDAC94A69DDC7A9 DUP2 ISZERO PUSH2 0x6EC JUMPI DUP8 ISZERO PUSH2 0x4D2 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH4 0xE8EDA9DF DUP5 PUSH2 0x266 DUP11 DUP11 PUSH2 0x2112 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2E5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 POP PUSH4 0x573ADE81 SWAP3 POP DUP7 SWAP2 SWAP1 DUP3 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x34E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x362 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x386 SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x44 DUP3 ADD MSTORE ADDRESS PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x405 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x429 SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0x69328DEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP9 SWAP1 MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE DUP3 AND SWAP1 PUSH4 0x69328DEC SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x494 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4A8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4CC SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST POP PUSH2 0xBB5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND SWAP2 PUSH4 0xE8EDA9DF SWAP2 DUP7 SWAP2 SWAP1 DUP3 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x537 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x54B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x56F SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5EE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xA415BCAD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP12 SWAP1 MSTORE PUSH1 0x2 PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x64 DUP4 ADD MSTORE ADDRESS PUSH1 0x84 DUP4 ADD MSTORE DUP5 AND SWAP3 POP PUSH4 0xA415BCAD SWAP2 POP PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x669 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x67D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x69328DEC DUP5 DUP10 DUP10 PUSH2 0x69D SWAP2 SWAP1 PUSH2 0x2112 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x47A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE8EDA9DF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP9 SWAP1 MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x64 DUP4 ADD MSTORE DUP3 AND SWAP1 PUSH4 0xE8EDA9DF SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x75C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x770 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP8 ISZERO PUSH2 0x962 JUMPI PUSH1 0x40 MLOAD PUSH32 0x69328DEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP10 SWAP1 MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE DUP3 AND SWAP1 PUSH4 0x69328DEC SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7F7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x81B SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND SWAP2 PUSH4 0x573ADE81 SWAP2 DUP9 SWAP2 SWAP1 DUP3 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x881 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x895 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8B9 SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x44 DUP3 ADD MSTORE ADDRESS PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x924 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x938 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x95C SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST POP PUSH2 0xB12 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA415BCAD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP10 SWAP1 MSTORE PUSH1 0x2 PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x64 DUP4 ADD MSTORE ADDRESS PUSH1 0x84 DUP4 ADD MSTORE DUP3 AND SWAP1 PUSH4 0xA415BCAD SWAP1 PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x9ED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 POP PUSH4 0xE8EDA9DF SWAP3 POP DUP9 SWAP2 SWAP1 DUP3 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA6A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA8E SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB0D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x69328DEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP9 SWAP1 MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE DUP3 AND SWAP1 PUSH4 0x69328DEC SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB8F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBB3 SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST POP JUMPDEST POP PUSH32 0x439148F0BBC682CA079E46D6E2C2F0C1E3B820F1A291B069D8882ABF8CF18DD9 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH2 0xBF1 JUMPI POP PUSH1 0x0 PUSH2 0x1315 JUMP JUMPDEST POP DUP4 PUSH20 0x6B175474E89094C44DA98B954EEDEAC495271D0F PUSH1 0x0 DUP5 PUSH8 0xDE0B6B3A7640000 PUSH2 0xC1E DUP6 DUP10 PUSH2 0x131E JUMP JUMPDEST PUSH2 0xC28 SWAP2 SWAP1 PUSH2 0x20F3 JUMP JUMPDEST PUSH2 0xC32 SWAP2 SWAP1 PUSH2 0x1FCD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 ISZERO PUSH2 0xC55 JUMPI PUSH2 0xC46 DUP6 DUP9 PUSH2 0x131E JUMP JUMPDEST SWAP1 POP PUSH2 0xC52 DUP2 DUP4 PUSH2 0x1FB5 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0xC5F PUSH2 0x151 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x35EA6A7500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0x7D2768DE32B0B80B7A3454C06BDAC94A69DDC7A9 SWAP1 PUSH4 0x35EA6A75 SWAP1 PUSH1 0x24 ADD PUSH2 0x180 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCE6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD0A SWAP2 SWAP1 PUSH2 0x1D73 JUMP JUMPDEST PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0xD15E005300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0x7D2768DE32B0B80B7A3454C06BDAC94A69DDC7A9 SWAP1 PUSH4 0xD15E0053 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDA7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDCB SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH2 0xDDB PUSH1 0x2 DUP3 PUSH2 0x1FCD JUMP JUMPDEST PUSH2 0xDF1 PUSH12 0x33B2E3C9FD0803CE8000000 DUP10 PUSH2 0x20F3 JUMP JUMPDEST PUSH2 0xDFB SWAP2 SWAP1 PUSH2 0x1FB5 JUMP JUMPDEST PUSH2 0xE05 SWAP2 SWAP1 PUSH2 0x1FCD JUMP JUMPDEST SWAP1 POP PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0xE1F PUSH1 0x2 DUP3 PUSH2 0x1FCD JUMP JUMPDEST PUSH2 0xE29 DUP5 DUP5 PUSH2 0x20F3 JUMP JUMPDEST PUSH2 0xE33 SWAP2 SWAP1 PUSH2 0x1FB5 JUMP JUMPDEST PUSH2 0xE3D SWAP2 SWAP1 PUSH2 0x1FCD JUMP JUMPDEST SWAP6 POP DUP4 DUP7 GT ISZERO PUSH2 0xEF7 JUMPI DUP2 PUSH2 0xE5F PUSH1 0x2 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x1FCD JUMP JUMPDEST PUSH2 0xE75 PUSH12 0x33B2E3C9FD0803CE8000000 DUP8 PUSH2 0x20F3 JUMP JUMPDEST PUSH2 0xE7F SWAP2 SWAP1 PUSH2 0x2112 JUMP JUMPDEST PUSH2 0xE89 SWAP2 SWAP1 PUSH2 0x1FCD JUMP JUMPDEST SWAP6 POP PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0xEA3 PUSH1 0x2 DUP6 PUSH2 0x1FCD JUMP JUMPDEST PUSH2 0xEAD DUP6 DUP10 PUSH2 0x20F3 JUMP JUMPDEST PUSH2 0xEB7 SWAP2 SWAP1 PUSH2 0x2112 JUMP JUMPDEST PUSH2 0xEC1 SWAP2 SWAP1 PUSH2 0x1FCD JUMP JUMPDEST SWAP6 POP PUSH8 0xDE0B6B3A7640000 DUP11 PUSH2 0xEE0 PUSH2 0xEDA DUP9 DUP11 PUSH2 0x2112 JUMP JUMPDEST DUP15 PUSH2 0x16D6 JUMP JUMPDEST PUSH2 0xEEA SWAP2 SWAP1 PUSH2 0x20F3 JUMP JUMPDEST PUSH2 0xEF4 SWAP2 SWAP1 PUSH2 0x1FCD JUMP JUMPDEST SWAP8 POP JUMPDEST POP POP POP POP POP PUSH1 0x0 DUP9 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF1C SWAP3 SWAP2 SWAP1 SWAP2 ISZERO ISZERO DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH32 0xD9D98CE400000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0x1EB4CF3A948E7D72A198FE073CCB8C7A948CD853 SWAP1 PUSH4 0xD9D98CE4 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFB6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFDA SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xFE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0x1EB4CF3A948E7D72A198FE073CCB8C7A948CD853 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x105C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1070 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1094 SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x11FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0x1EB4CF3A948E7D72A198FE073CCB8C7A948CD853 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1113 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1127 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x114B SWAP2 SWAP1 PUSH2 0x1CBA JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0x1EB4CF3A948E7D72A198FE073CCB8C7A948CD853 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 NOT PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x11D6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11FA SWAP2 SWAP1 PUSH2 0x1CBA JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x5CFFE9DE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0x1EB4CF3A948E7D72A198FE073CCB8C7A948CD853 SWAP1 PUSH4 0x5CFFE9DE SWAP1 PUSH2 0x1252 SWAP1 ADDRESS SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x1EE1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x126C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1280 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12A4 SWAP2 SWAP1 PUSH2 0x1CBA JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP12 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP9 SWAP1 MSTORE DUP12 ISZERO ISZERO PUSH1 0x80 DUP3 ADD MSTORE PUSH20 0x1EB4CF3A948E7D72A198FE073CCB8C7A948CD853 PUSH1 0xA0 DUP3 ADD MSTORE PUSH32 0x1B861D4C31D2586A4A0BA63FAFAD6452B1BAF4E1DC2F751A97FEF380B34032A7 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0x6B175474E89094C44DA98B954EEDEAC495271D0F DUP4 ISZERO DUP1 PUSH2 0x1343 JUMPI POP PUSH1 0x0 NOT DUP5 EQ JUMPDEST DUP1 PUSH2 0x135F JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0x136D JUMPI DUP4 SWAP2 POP POP PUSH2 0x16D0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 EQ ISZERO PUSH2 0x14C9 JUMPI PUSH2 0x139A PUSH2 0x1A5A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xB3596F0700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0xB3596F07 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x140A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x142E SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1467 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x147B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x149F SWAP2 SWAP1 PUSH2 0x1E79 JUMP JUMPDEST PUSH2 0x14AD SWAP1 PUSH1 0xFF AND PUSH1 0xA PUSH2 0x204B JUMP JUMPDEST PUSH2 0x14B7 SWAP1 DUP7 PUSH2 0x20F3 JUMP JUMPDEST PUSH2 0x14C1 SWAP2 SWAP1 PUSH2 0x1FCD JUMP JUMPDEST SWAP2 POP POP PUSH2 0x16D0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD DUP4 MSTORE PUSH1 0x0 SWAP3 PUSH1 0x20 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP4 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x14FE JUMPI PUSH2 0x14FE PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP2 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1532 JUMPI PUSH2 0x1532 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH1 0x0 PUSH2 0x155C PUSH2 0x1A5A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9D23D9F2 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1587 SWAP2 SWAP1 PUSH2 0x1E94 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x159F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x15B3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x15DB SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1C0D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1618 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x162C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1650 SWAP2 SWAP1 PUSH2 0x1E79 JUMP JUMPDEST PUSH2 0x165E SWAP1 PUSH1 0xFF AND PUSH1 0xA PUSH2 0x204B JUMP JUMPDEST DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1671 JUMPI PUSH2 0x1671 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH2 0x1684 SWAP2 SWAP1 PUSH2 0x20F3 JUMP JUMPDEST PUSH2 0x168E SWAP2 SWAP1 PUSH2 0x1FCD JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x16A3 JUMPI PUSH2 0x16A3 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH8 0xDE0B6B3A7640000 DUP3 PUSH2 0x16BF SWAP2 SWAP1 PUSH2 0x20F3 JUMP JUMPDEST PUSH2 0x16C9 SWAP2 SWAP1 PUSH2 0x1FCD JUMP JUMPDEST SWAP5 POP POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0x6B175474E89094C44DA98B954EEDEAC495271D0F DUP4 ISZERO DUP1 PUSH2 0x16FB JUMPI POP PUSH1 0x0 NOT DUP5 EQ JUMPDEST DUP1 PUSH2 0x1717 JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0x1725 JUMPI DUP4 SWAP2 POP POP PUSH2 0x16D0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 EQ ISZERO PUSH2 0x1865 JUMPI DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1783 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1797 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17BB SWAP2 SWAP1 PUSH2 0x1E79 JUMP JUMPDEST PUSH2 0x17C9 SWAP1 PUSH1 0xFF AND PUSH1 0xA PUSH2 0x204B JUMP JUMPDEST PUSH2 0x17D1 PUSH2 0x1A5A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xB3596F0700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0xB3596F07 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x182D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1841 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14AD SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD DUP4 MSTORE PUSH1 0x0 SWAP3 PUSH1 0x20 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP4 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x189A JUMPI PUSH2 0x189A PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP2 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x18CE JUMPI PUSH2 0x18CE PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH1 0x0 PUSH2 0x18F8 PUSH2 0x1A5A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9D23D9F2 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1923 SWAP2 SWAP1 PUSH2 0x1E94 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x193B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x194F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1977 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1C0D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP3 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1997 JUMPI PUSH2 0x1997 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH2 0x19AA SWAP2 SWAP1 PUSH2 0x20F3 JUMP JUMPDEST PUSH2 0x19B4 SWAP2 SWAP1 PUSH2 0x1FCD JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x19C9 JUMPI PUSH2 0x19C9 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A0A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A1E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A42 SWAP2 SWAP1 PUSH2 0x1E79 JUMP JUMPDEST PUSH2 0x1A50 SWAP1 PUSH1 0xFF AND PUSH1 0xA PUSH2 0x204B JUMP JUMPDEST PUSH2 0x16BF SWAP1 DUP4 PUSH2 0x20F3 JUMP JUMPDEST PUSH1 0x0 PUSH20 0x57835AD21A177DBDD3090BB1CAE03EACF78FC6D PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x542975C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1AA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1ABD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AE1 SWAP2 SWAP1 PUSH2 0x1BE9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFCA513A8 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B2D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x203 SWAP2 SWAP1 PUSH2 0x1BE9 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1B5C DUP2 PUSH2 0x21B6 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1B96 JUMPI PUSH2 0x1B96 PUSH2 0x2187 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 MLOAD DUP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1B5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH5 0xFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1B5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1B5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1C06 DUP2 PUSH2 0x21B6 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1C38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1C4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x1C5E JUMPI PUSH2 0x1C5E PUSH2 0x2187 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL SWAP2 POP PUSH2 0x1C6F DUP5 DUP4 ADD PUSH2 0x1F84 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP5 DUP7 ADD DUP5 DUP7 ADD DUP8 ADD DUP11 LT ISZERO PUSH2 0x1C8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP6 POP JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x1CAD JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x1C8F JUMP JUMPDEST POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1CCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1C06 DUP2 PUSH2 0x21CE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1CEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1CFA DUP2 PUSH2 0x21CE JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x1D11 DUP2 PUSH2 0x21B6 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1D3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x1D4A DUP2 PUSH2 0x21CE JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x1D68 DUP2 PUSH2 0x21B6 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D8E PUSH2 0x1F5A JUMP JUMPDEST PUSH2 0x1D98 DUP5 DUP5 PUSH2 0x1B61 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1DA6 PUSH1 0x20 DUP5 ADD PUSH2 0x1BA3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1DB7 PUSH1 0x40 DUP5 ADD PUSH2 0x1BA3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1DC8 PUSH1 0x60 DUP5 ADD PUSH2 0x1BA3 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x1DD9 PUSH1 0x80 DUP5 ADD PUSH2 0x1BA3 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x1DEA PUSH1 0xA0 DUP5 ADD PUSH2 0x1BA3 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x1DFB PUSH1 0xC0 DUP5 ADD PUSH2 0x1BC3 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x1E0C PUSH1 0xE0 DUP5 ADD PUSH2 0x1B51 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x1E1F DUP2 DUP6 ADD PUSH2 0x1B51 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 PUSH2 0x1E31 DUP5 DUP3 ADD PUSH2 0x1B51 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x140 PUSH2 0x1E43 DUP5 DUP3 ADD PUSH2 0x1B51 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x160 PUSH2 0x1E55 DUP5 DUP3 ADD PUSH2 0x1BD8 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E72 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C06 DUP3 PUSH2 0x1BD8 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1ED5 JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1EB0 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE PUSH1 0x20 DUP2 DUP8 AND DUP2 DUP6 ADD MSTORE DUP6 PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP6 ADD MSTORE DUP5 MLOAD SWAP2 POP DUP2 PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1F2F JUMPI DUP6 DUP2 ADD DUP3 ADD MLOAD DUP6 DUP3 ADD PUSH1 0xA0 ADD MSTORE DUP2 ADD PUSH2 0x1F13 JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1F41 JUMPI PUSH1 0x0 PUSH1 0xA0 DUP5 DUP8 ADD ADD MSTORE JUMPDEST POP POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0xA0 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x180 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1F7E JUMPI PUSH2 0x1F7E PUSH2 0x2187 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1FAD JUMPI PUSH2 0x1FAD PUSH2 0x2187 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1FC8 JUMPI PUSH2 0x1FC8 PUSH2 0x2129 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2003 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x2043 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x2029 JUMPI PUSH2 0x2029 PUSH2 0x2129 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x2036 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x200D JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C06 DUP4 DUP4 PUSH1 0x0 DUP3 PUSH2 0x2061 JUMPI POP PUSH1 0x1 PUSH2 0x16D0 JUMP JUMPDEST DUP2 PUSH2 0x206E JUMPI POP PUSH1 0x0 PUSH2 0x16D0 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x2084 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x208E JUMPI PUSH2 0x20AA JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x16D0 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x209F JUMPI PUSH2 0x209F PUSH2 0x2129 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x16D0 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x20CD JUMPI POP DUP2 DUP2 EXP PUSH2 0x16D0 JUMP JUMPDEST PUSH2 0x20D7 DUP4 DUP4 PUSH2 0x2008 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x20EB JUMPI PUSH2 0x20EB PUSH2 0x2129 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x210D JUMPI PUSH2 0x210D PUSH2 0x2129 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x2124 JUMPI PUSH2 0x2124 PUSH2 0x2129 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x21CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x21CB JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 DUP9 0xC1 0xBC 0xD4 0x2C 0xD9 SWAP7 PUSH10 0xCA17E73F3EFA39D0A8ED DUP16 0xB8 PUSH21 0xD1EB8F527AC334D6E84664736F6C63430008070033 ",
          "sourceMap": "1973:7623:39:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1973:7623:39;;;;;;;;;;;;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@ADAI_11220": {
              "entryPoint": null,
              "id": 11220,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@CALLBACK_SUCCESS_11237": {
              "entryPoint": null,
              "id": 11237,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@LENDER_11202": {
              "entryPoint": null,
              "id": 11202,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@doFlashMint_11505": {
              "entryPoint": 3042,
              "id": 11505,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "@fromDAI_12000": {
              "entryPoint": 5846,
              "id": 12000,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@loanLogic_11727": {
              "entryPoint": 520,
              "id": 11727,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@maxLiquidity_12013": {
              "entryPoint": 337,
              "id": 12013,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@priceOracle_11742": {
              "entryPoint": 6746,
              "id": 11742,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@toDAI_11871": {
              "entryPoint": 4894,
              "id": 11871,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_address_fromMemory": {
              "entryPoint": 6993,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_struct_ReserveConfigurationMap_fromMemory": {
              "entryPoint": 7009,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address_fromMemory": {
              "entryPoint": 7145,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr_fromMemory": {
              "entryPoint": 7181,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bool_fromMemory": {
              "entryPoint": 7354,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_boolt_uint256t_addresst_uint256t_uint256": {
              "entryPoint": 7383,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 5
            },
            "abi_decode_tuple_t_boolt_uint256t_uint256t_address": {
              "entryPoint": 7465,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_decode_tuple_t_contract$_ILendingPoolAddressesProvider_$10814_fromMemory": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_struct$_ReserveData_$11174_memory_ptr_fromMemory": {
              "entryPoint": 7539,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256_fromMemory": {
              "entryPoint": 7776,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint8_fromMemory": {
              "entryPoint": 7801,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_uint128_fromMemory": {
              "entryPoint": 7075,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_uint40_fromMemory": {
              "entryPoint": 7107,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_uint8_fromMemory": {
              "entryPoint": 7128,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_library_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_rational_0_by_1__to_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256_t_address_t_uint16__to_t_address_t_uint256_t_address_t_uint16__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256_t_rational_2_by_1_t_address__to_t_address_t_uint256_t_uint256_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256_t_rational_2_by_1_t_uint16_t_address__to_t_address_t_uint256_t_uint256_t_uint16_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed": {
              "entryPoint": 7828,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool_t_uint256__to_t_bool_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_library_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_IAToken_$11054__to_t_address__fromStack_library_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_IERC3156FlashBorrower_$967_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
              "entryPoint": 7905,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_address__to_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 7,
              "returnSlots": 1
            },
            "allocate_memory": {
              "entryPoint": 8068,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "allocate_memory_2152": {
              "entryPoint": 8026,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 8117,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_div_t_uint256": {
              "entryPoint": 8141,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_exp_helper": {
              "entryPoint": 8200,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "checked_exp_t_uint256_t_uint256": {
              "entryPoint": 8267,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_exp_unsigned": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_mul_t_uint256": {
              "entryPoint": 8435,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint256": {
              "entryPoint": 8466,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "panic_error_0x11": {
              "entryPoint": 8489,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x32": {
              "entryPoint": 8536,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 8583,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "validator_revert_address": {
              "entryPoint": 8630,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_bool": {
              "entryPoint": 8654,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:15968:45",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:45",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "74:78:45",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "84:22:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "99:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "93:5:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "93:13:45"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "84:5:45"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "140:5:45"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "115:24:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "115:31:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "115:31:45"
                        }
                      ]
                    },
                    "name": "abi_decode_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "53:6:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "64:5:45",
                        "type": ""
                      }
                    ],
                    "src": "14:138:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "248:335:45",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "292:16:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "301:1:45",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "304:1:45",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "294:6:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "294:12:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "294:12:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "269:3:45"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "274:9:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "265:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "265:19:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "286:4:45",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "261:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "261:30:45"
                          },
                          "nodeType": "YulIf",
                          "src": "258:50:45"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "317:23:45",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "337:2:45",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "331:5:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "331:9:45"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "321:6:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "349:35:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "371:6:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "379:4:45",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "367:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "367:17:45"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "353:10:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "459:22:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "461:16:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "461:18:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "461:18:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "402:10:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "414:18:45",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "399:2:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "399:34:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "438:10:45"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "450:6:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "435:2:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "435:22:45"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "396:2:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "396:62:45"
                          },
                          "nodeType": "YulIf",
                          "src": "393:88:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "497:2:45",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "501:10:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "490:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "490:22:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "490:22:45"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "521:15:45",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "530:6:45"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "521:5:45"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "552:6:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "566:9:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "560:5:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "560:16:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "545:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "545:32:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "545:32:45"
                        }
                      ]
                    },
                    "name": "abi_decode_struct_ReserveConfigurationMap_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "219:9:45",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "230:3:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "238:5:45",
                        "type": ""
                      }
                    ],
                    "src": "157:426:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "648:132:45",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "658:22:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "673:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "667:5:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "667:13:45"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "658:5:45"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "758:16:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "767:1:45",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "770:1:45",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "760:6:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "760:12:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "760:12:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "702:5:45"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "713:5:45"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "720:34:45",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "709:3:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "709:46:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "699:2:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "699:57:45"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "692:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "692:65:45"
                          },
                          "nodeType": "YulIf",
                          "src": "689:85:45"
                        }
                      ]
                    },
                    "name": "abi_decode_uint128_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "627:6:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "638:5:45",
                        "type": ""
                      }
                    ],
                    "src": "588:192:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "844:110:45",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "854:22:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "869:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "863:5:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "863:13:45"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "854:5:45"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "932:16:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "941:1:45",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "944:1:45",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "934:6:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "934:12:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "934:12:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "898:5:45"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "909:5:45"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "916:12:45",
                                        "type": "",
                                        "value": "0xffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "905:3:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "905:24:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "895:2:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "895:35:45"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "888:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "888:43:45"
                          },
                          "nodeType": "YulIf",
                          "src": "885:63:45"
                        }
                      ]
                    },
                    "name": "abi_decode_uint40_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "823:6:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "834:5:45",
                        "type": ""
                      }
                    ],
                    "src": "785:169:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1017:102:45",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1027:22:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1042:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1036:5:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1036:13:45"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "1027:5:45"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1097:16:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1106:1:45",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1109:1:45",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1099:6:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1099:12:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1099:12:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1071:5:45"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "1082:5:45"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1089:4:45",
                                        "type": "",
                                        "value": "0xff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1078:3:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1078:16:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "1068:2:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1068:27:45"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1061:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1061:35:45"
                          },
                          "nodeType": "YulIf",
                          "src": "1058:55:45"
                        }
                      ]
                    },
                    "name": "abi_decode_uint8_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "996:6:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1007:5:45",
                        "type": ""
                      }
                    ],
                    "src": "959:160:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1205:170:45",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1251:16:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1260:1:45",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1263:1:45",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1253:6:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1253:12:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1253:12:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1226:7:45"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1235:9:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1222:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1222:23:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1247:2:45",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1218:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1218:32:45"
                          },
                          "nodeType": "YulIf",
                          "src": "1215:52:45"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1276:29:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1295:9:45"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1289:5:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1289:16:45"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "1280:5:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1339:5:45"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "1314:24:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1314:31:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1314:31:45"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1354:15:45",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1364:5:45"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1354:6:45"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1171:9:45",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1182:7:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1194:6:45",
                        "type": ""
                      }
                    ],
                    "src": "1124:251:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1486:841:45",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1496:12:45",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1506:2:45",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "1500:2:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1553:16:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1562:1:45",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1565:1:45",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1555:6:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1555:12:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1555:12:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1528:7:45"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1537:9:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1524:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1524:23:45"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1549:2:45"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1520:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1520:32:45"
                          },
                          "nodeType": "YulIf",
                          "src": "1517:52:45"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1578:30:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1598:9:45"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1592:5:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1592:16:45"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "1582:6:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1617:28:45",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1627:18:45",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "1621:2:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1672:16:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1681:1:45",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1684:1:45",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1674:6:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1674:12:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1674:12:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1660:6:45"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "1668:2:45"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1657:2:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1657:14:45"
                          },
                          "nodeType": "YulIf",
                          "src": "1654:34:45"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1697:32:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1711:9:45"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1722:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1707:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1707:22:45"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "1701:2:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1777:16:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1786:1:45",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1789:1:45",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1779:6:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1779:12:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1779:12:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "1756:2:45"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1760:4:45",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1752:3:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1752:13:45"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1767:7:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1748:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1748:27:45"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1741:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1741:35:45"
                          },
                          "nodeType": "YulIf",
                          "src": "1738:55:45"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1802:19:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "1818:2:45"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1812:5:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1812:9:45"
                          },
                          "variables": [
                            {
                              "name": "_4",
                              "nodeType": "YulTypedName",
                              "src": "1806:2:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1844:22:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "1846:16:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1846:18:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1846:18:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "1836:2:45"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "1840:2:45"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1833:2:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1833:10:45"
                          },
                          "nodeType": "YulIf",
                          "src": "1830:36:45"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1875:20:45",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1889:1:45",
                                "type": "",
                                "value": "5"
                              },
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "1892:2:45"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "1885:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1885:10:45"
                          },
                          "variables": [
                            {
                              "name": "_5",
                              "nodeType": "YulTypedName",
                              "src": "1879:2:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1904:39:45",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_5",
                                    "nodeType": "YulIdentifier",
                                    "src": "1935:2:45"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1939:2:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1931:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1931:11:45"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "1915:15:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1915:28:45"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "1908:3:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1952:16:45",
                          "value": {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "1965:3:45"
                          },
                          "variables": [
                            {
                              "name": "dst_1",
                              "nodeType": "YulTypedName",
                              "src": "1956:5:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "1984:3:45"
                              },
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "1989:2:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1977:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1977:15:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1977:15:45"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2001:19:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "2012:3:45"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2017:2:45"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2008:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2008:12:45"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "2001:3:45"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2029:22:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "2044:2:45"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2048:2:45"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2040:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2040:11:45"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "2033:3:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2097:16:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2106:1:45",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2109:1:45",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2099:6:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2099:12:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2099:12:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "2074:2:45"
                                      },
                                      {
                                        "name": "_5",
                                        "nodeType": "YulIdentifier",
                                        "src": "2078:2:45"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2070:3:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2070:11:45"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2083:2:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2066:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2066:20:45"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2088:7:45"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2063:2:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2063:33:45"
                          },
                          "nodeType": "YulIf",
                          "src": "2060:53:45"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2122:10:45",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2131:1:45",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "2126:1:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2186:111:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "2207:3:45"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "2218:3:45"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "2212:5:45"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2212:10:45"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2200:6:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2200:23:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2200:23:45"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "2236:19:45",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "2247:3:45"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2252:2:45"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "2243:3:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2243:12:45"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "2236:3:45"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "2268:19:45",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "2279:3:45"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2284:2:45"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "2275:3:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2275:12:45"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "2268:3:45"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "2152:1:45"
                              },
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "2155:2:45"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "2149:2:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2149:9:45"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "2159:18:45",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "2161:14:45",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "2170:1:45"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2173:1:45",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "2166:3:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2166:9:45"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "2161:1:45"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "2145:3:45",
                            "statements": []
                          },
                          "src": "2141:156:45"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2306:15:45",
                          "value": {
                            "name": "dst_1",
                            "nodeType": "YulIdentifier",
                            "src": "2316:5:45"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2306:6:45"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1452:9:45",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1463:7:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1475:6:45",
                        "type": ""
                      }
                    ],
                    "src": "1380:947:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2410:167:45",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2456:16:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2465:1:45",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2468:1:45",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2458:6:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2458:12:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2458:12:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2431:7:45"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2440:9:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2427:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2427:23:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2452:2:45",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2423:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2423:32:45"
                          },
                          "nodeType": "YulIf",
                          "src": "2420:52:45"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2481:29:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2500:9:45"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2494:5:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2494:16:45"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "2485:5:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2541:5:45"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bool",
                              "nodeType": "YulIdentifier",
                              "src": "2519:21:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2519:28:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2519:28:45"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2556:15:45",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2566:5:45"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2556:6:45"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bool_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2376:9:45",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2387:7:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2399:6:45",
                        "type": ""
                      }
                    ],
                    "src": "2332:245:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2717:453:45",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2764:16:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2773:1:45",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2776:1:45",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2766:6:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2766:12:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2766:12:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2738:7:45"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2747:9:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2734:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2734:23:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2759:3:45",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2730:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2730:33:45"
                          },
                          "nodeType": "YulIf",
                          "src": "2727:53:45"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2789:36:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2815:9:45"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2802:12:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2802:23:45"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "2793:5:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2856:5:45"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bool",
                              "nodeType": "YulIdentifier",
                              "src": "2834:21:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2834:28:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2834:28:45"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2871:15:45",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2881:5:45"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2871:6:45"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2895:42:45",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2922:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2933:2:45",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2918:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2918:18:45"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2905:12:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2905:32:45"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2895:6:45"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2946:47:45",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2978:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2989:2:45",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2974:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2974:18:45"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2961:12:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2961:32:45"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "2950:7:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "3027:7:45"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "3002:24:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3002:33:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3002:33:45"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3044:17:45",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "3054:7:45"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "3044:6:45"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3070:42:45",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3097:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3108:2:45",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3093:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3093:18:45"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3080:12:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3080:32:45"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "3070:6:45"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3121:43:45",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3148:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3159:3:45",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3144:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3144:19:45"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3131:12:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3131:33:45"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "3121:6:45"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_boolt_uint256t_addresst_uint256t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2651:9:45",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2662:7:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2674:6:45",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2682:6:45",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "2690:6:45",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "2698:6:45",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "2706:6:45",
                        "type": ""
                      }
                    ],
                    "src": "2582:588:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3293:401:45",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3340:16:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3349:1:45",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3352:1:45",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3342:6:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3342:12:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3342:12:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3314:7:45"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3323:9:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3310:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3310:23:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3335:3:45",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3306:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3306:33:45"
                          },
                          "nodeType": "YulIf",
                          "src": "3303:53:45"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3365:36:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3391:9:45"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3378:12:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3378:23:45"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "3369:5:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3432:5:45"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bool",
                              "nodeType": "YulIdentifier",
                              "src": "3410:21:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3410:28:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3410:28:45"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3447:15:45",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "3457:5:45"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3447:6:45"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3471:42:45",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3498:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3509:2:45",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3494:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3494:18:45"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3481:12:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3481:32:45"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "3471:6:45"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3522:42:45",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3549:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3560:2:45",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3545:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3545:18:45"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3532:12:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3532:32:45"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "3522:6:45"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3573:47:45",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3605:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3616:2:45",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3601:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3601:18:45"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3588:12:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3588:32:45"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "3577:7:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "3654:7:45"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "3629:24:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3629:33:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3629:33:45"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3671:17:45",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "3681:7:45"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "3671:6:45"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_boolt_uint256t_uint256t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3235:9:45",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3246:7:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3258:6:45",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "3266:6:45",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "3274:6:45",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "3282:6:45",
                        "type": ""
                      }
                    ],
                    "src": "3175:519:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3819:170:45",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3865:16:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3874:1:45",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3877:1:45",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3867:6:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3867:12:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3867:12:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3840:7:45"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3849:9:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3836:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3836:23:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3861:2:45",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3832:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3832:32:45"
                          },
                          "nodeType": "YulIf",
                          "src": "3829:52:45"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3890:29:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3909:9:45"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3903:5:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3903:16:45"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "3894:5:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3953:5:45"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "3928:24:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3928:31:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3928:31:45"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3968:15:45",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "3978:5:45"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3968:6:45"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_contract$_ILendingPoolAddressesProvider_$10814_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3785:9:45",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3796:7:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3808:6:45",
                        "type": ""
                      }
                    ],
                    "src": "3699:290:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4105:1228:45",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4152:16:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4161:1:45",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4164:1:45",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4154:6:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4154:12:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4154:12:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4126:7:45"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4135:9:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4122:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4122:23:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4147:3:45",
                                "type": "",
                                "value": "384"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4118:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4118:33:45"
                          },
                          "nodeType": "YulIf",
                          "src": "4115:53:45"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4177:35:45",
                          "value": {
                            "arguments": [],
                            "functionName": {
                              "name": "allocate_memory_2152",
                              "nodeType": "YulIdentifier",
                              "src": "4190:20:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4190:22:45"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "4181:5:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "4228:5:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4288:9:45"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4299:7:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_struct_ReserveConfigurationMap_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "4235:52:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4235:72:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4221:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4221:87:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4221:87:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4328:5:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4335:2:45",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4324:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4324:14:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4374:9:45"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4385:2:45",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4370:3:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4370:18:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_uint128_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "4340:29:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4340:49:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4317:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4317:73:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4317:73:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4410:5:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4417:2:45",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4406:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4406:14:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4456:9:45"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4467:2:45",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4452:3:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4452:18:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_uint128_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "4422:29:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4422:49:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4399:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4399:73:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4399:73:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4492:5:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4499:2:45",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4488:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4488:14:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4538:9:45"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4549:2:45",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4534:3:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4534:18:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_uint128_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "4504:29:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4504:49:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4481:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4481:73:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4481:73:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4574:5:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4581:3:45",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4570:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4570:15:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4621:9:45"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4632:3:45",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4617:3:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4617:19:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_uint128_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "4587:29:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4587:50:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4563:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4563:75:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4563:75:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4658:5:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4665:3:45",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4654:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4654:15:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4705:9:45"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4716:3:45",
                                        "type": "",
                                        "value": "160"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4701:3:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4701:19:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_uint128_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "4671:29:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4671:50:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4647:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4647:75:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4647:75:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4742:5:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4749:3:45",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4738:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4738:15:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4788:9:45"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4799:3:45",
                                        "type": "",
                                        "value": "192"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4784:3:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4784:19:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_uint40_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "4755:28:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4755:49:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4731:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4731:74:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4731:74:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4825:5:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4832:3:45",
                                    "type": "",
                                    "value": "224"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4821:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4821:15:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4872:9:45"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4883:3:45",
                                        "type": "",
                                        "value": "224"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4868:3:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4868:19:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_address_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "4838:29:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4838:50:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4814:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4814:75:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4814:75:45"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4898:13:45",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4908:3:45",
                            "type": "",
                            "value": "256"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "4902:2:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4931:5:45"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4938:2:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4927:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4927:14:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4977:9:45"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "4988:2:45"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4973:3:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4973:18:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_address_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "4943:29:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4943:49:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4920:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4920:73:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4920:73:45"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5002:13:45",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5012:3:45",
                            "type": "",
                            "value": "288"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "5006:2:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "5035:5:45"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "5042:2:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5031:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5031:14:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5081:9:45"
                                      },
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "5092:2:45"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5077:3:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5077:18:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_address_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "5047:29:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5047:49:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5024:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5024:73:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5024:73:45"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5106:13:45",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5116:3:45",
                            "type": "",
                            "value": "320"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "5110:2:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "5139:5:45"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "5146:2:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5135:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5135:14:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5185:9:45"
                                      },
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "5196:2:45"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5181:3:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5181:18:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_address_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "5151:29:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5151:49:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5128:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5128:73:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5128:73:45"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5210:13:45",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5220:3:45",
                            "type": "",
                            "value": "352"
                          },
                          "variables": [
                            {
                              "name": "_4",
                              "nodeType": "YulTypedName",
                              "src": "5214:2:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "5243:5:45"
                                  },
                                  {
                                    "name": "_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "5250:2:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5239:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5239:14:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5287:9:45"
                                      },
                                      {
                                        "name": "_4",
                                        "nodeType": "YulIdentifier",
                                        "src": "5298:2:45"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5283:3:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5283:18:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_uint8_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "5255:27:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5255:47:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5232:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5232:71:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5232:71:45"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5312:15:45",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "5322:5:45"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5312:6:45"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_struct$_ReserveData_$11174_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4071:9:45",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4082:7:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4094:6:45",
                        "type": ""
                      }
                    ],
                    "src": "3994:1339:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5419:103:45",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5465:16:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5474:1:45",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5477:1:45",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5467:6:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5467:12:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5467:12:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5440:7:45"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5449:9:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5436:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5436:23:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5461:2:45",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5432:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5432:32:45"
                          },
                          "nodeType": "YulIf",
                          "src": "5429:52:45"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5490:26:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5506:9:45"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "5500:5:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5500:16:45"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5490:6:45"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5385:9:45",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5396:7:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5408:6:45",
                        "type": ""
                      }
                    ],
                    "src": "5338:184:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5606:125:45",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5652:16:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5661:1:45",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5664:1:45",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5654:6:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5654:12:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5654:12:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5627:7:45"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5636:9:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5623:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5623:23:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5648:2:45",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5619:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5619:32:45"
                          },
                          "nodeType": "YulIf",
                          "src": "5616:52:45"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5677:48:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5715:9:45"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint8_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "5687:27:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5687:38:45"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5677:6:45"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint8_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5572:9:45",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5583:7:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5595:6:45",
                        "type": ""
                      }
                    ],
                    "src": "5527:204:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5845:125:45",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "5855:26:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5867:9:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5878:2:45",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5863:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5863:18:45"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5855:4:45"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5897:9:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "5912:6:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5920:42:45",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "5908:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5908:55:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5890:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5890:74:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5890:74:45"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_library_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5814:9:45",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5825:6:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5836:4:45",
                        "type": ""
                      }
                    ],
                    "src": "5736:234:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6076:125:45",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6086:26:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6098:9:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6109:2:45",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6094:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6094:18:45"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6086:4:45"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6128:9:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "6143:6:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6151:42:45",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "6139:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6139:55:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6121:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6121:74:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6121:74:45"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6045:9:45",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6056:6:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6067:4:45",
                        "type": ""
                      }
                    ],
                    "src": "5975:226:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6335:198:45",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6345:26:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6357:9:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6368:2:45",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6353:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6353:18:45"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6345:4:45"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6380:52:45",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6390:42:45",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "6384:2:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6448:9:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "6463:6:45"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6471:2:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "6459:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6459:15:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6441:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6441:34:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6441:34:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6495:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6506:2:45",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6491:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6491:18:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6515:6:45"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6523:2:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "6511:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6511:15:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6484:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6484:43:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6484:43:45"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6296:9:45",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "6307:6:45",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6315:6:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6326:4:45",
                        "type": ""
                      }
                    ],
                    "src": "6206:327:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6675:168:45",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6685:26:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6697:9:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6708:2:45",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6693:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6693:18:45"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6685:4:45"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6727:9:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "6742:6:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6750:42:45",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "6738:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6738:55:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6720:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6720:74:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6720:74:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6814:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6825:2:45",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6810:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6810:18:45"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "6830:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6803:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6803:34:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6803:34:45"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_rational_0_by_1__to_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6636:9:45",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "6647:6:45",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6655:6:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6666:4:45",
                        "type": ""
                      }
                    ],
                    "src": "6538:305:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6977:168:45",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6987:26:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6999:9:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7010:2:45",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6995:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6995:18:45"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6987:4:45"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7029:9:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "7044:6:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7052:42:45",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7040:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7040:55:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7022:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7022:74:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7022:74:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7116:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7127:2:45",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7112:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7112:18:45"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "7132:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7105:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7105:34:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7105:34:45"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6938:9:45",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "6949:6:45",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6957:6:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6968:4:45",
                        "type": ""
                      }
                    ],
                    "src": "6848:297:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7307:241:45",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7317:26:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7329:9:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7340:2:45",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7325:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7325:18:45"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7317:4:45"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7352:52:45",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7362:42:45",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "7356:2:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7420:9:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "7435:6:45"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7443:2:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7431:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7431:15:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7413:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7413:34:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7413:34:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7467:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7478:2:45",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7463:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7463:18:45"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "7483:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7456:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7456:34:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7456:34:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7510:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7521:2:45",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7506:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7506:18:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "7530:6:45"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7538:2:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7526:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7526:15:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7499:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7499:43:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7499:43:45"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7260:9:45",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "7271:6:45",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7279:6:45",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7287:6:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7298:4:45",
                        "type": ""
                      }
                    ],
                    "src": "7150:398:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7736:298:45",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7746:27:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7758:9:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7769:3:45",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7754:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7754:19:45"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7746:4:45"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7782:52:45",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7792:42:45",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "7786:2:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7850:9:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "7865:6:45"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7873:2:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7861:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7861:15:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7843:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7843:34:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7843:34:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7897:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7908:2:45",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7893:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7893:18:45"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "7913:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7886:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7886:34:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7886:34:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7940:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7951:2:45",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7936:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7936:18:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "7960:6:45"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7968:2:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7956:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7956:15:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7929:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7929:43:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7929:43:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7992:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8003:2:45",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7988:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7988:18:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "8012:6:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8020:6:45",
                                    "type": "",
                                    "value": "0xffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "8008:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8008:19:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7981:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7981:47:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7981:47:45"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256_t_address_t_uint16__to_t_address_t_uint256_t_address_t_uint16__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7681:9:45",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "7692:6:45",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "7700:6:45",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7708:6:45",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7716:6:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7727:4:45",
                        "type": ""
                      }
                    ],
                    "src": "7553:481:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8232:285:45",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8242:27:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8254:9:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8265:3:45",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8250:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8250:19:45"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8242:4:45"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8278:52:45",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8288:42:45",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "8282:2:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8346:9:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "8361:6:45"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "8369:2:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "8357:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8357:15:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8339:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8339:34:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8339:34:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8393:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8404:2:45",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8389:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8389:18:45"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "8409:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8382:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8382:34:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8382:34:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8436:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8447:2:45",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8432:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8432:18:45"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "8452:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8425:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8425:34:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8425:34:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8479:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8490:2:45",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8475:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8475:18:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "8499:6:45"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "8507:2:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "8495:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8495:15:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8468:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8468:43:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8468:43:45"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256_t_rational_2_by_1_t_address__to_t_address_t_uint256_t_uint256_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8177:9:45",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "8188:6:45",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "8196:6:45",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "8204:6:45",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8212:6:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8223:4:45",
                        "type": ""
                      }
                    ],
                    "src": "8039:478:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8741:342:45",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8751:27:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8763:9:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8774:3:45",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8759:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8759:19:45"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8751:4:45"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8787:52:45",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8797:42:45",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "8791:2:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8855:9:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "8870:6:45"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "8878:2:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "8866:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8866:15:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8848:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8848:34:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8848:34:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8902:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8913:2:45",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8898:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8898:18:45"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "8918:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8891:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8891:34:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8891:34:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8945:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8956:2:45",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8941:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8941:18:45"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "8961:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8934:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8934:34:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8934:34:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8988:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8999:2:45",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8984:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8984:18:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "9008:6:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9016:6:45",
                                    "type": "",
                                    "value": "0xffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "9004:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9004:19:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8977:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8977:47:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8977:47:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9044:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9055:3:45",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9040:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9040:19:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value4",
                                    "nodeType": "YulIdentifier",
                                    "src": "9065:6:45"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "9073:2:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "9061:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9061:15:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9033:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9033:44:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9033:44:45"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256_t_rational_2_by_1_t_uint16_t_address__to_t_address_t_uint256_t_uint256_t_uint16_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8678:9:45",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "8689:6:45",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "8697:6:45",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "8705:6:45",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "8713:6:45",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8721:6:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8732:4:45",
                        "type": ""
                      }
                    ],
                    "src": "8522:561:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9239:530:45",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9249:12:45",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9259:2:45",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "9253:2:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9270:32:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9288:9:45"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "9299:2:45"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9284:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9284:18:45"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "9274:6:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9318:9:45"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "9329:2:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9311:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9311:21:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9311:21:45"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9341:17:45",
                          "value": {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "9352:6:45"
                          },
                          "variables": [
                            {
                              "name": "pos",
                              "nodeType": "YulTypedName",
                              "src": "9345:3:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9367:27:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "9387:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "9381:5:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9381:13:45"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "9371:6:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "9410:6:45"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "9418:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9403:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9403:22:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9403:22:45"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9434:25:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9445:9:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9456:2:45",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9441:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9441:18:45"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "9434:3:45"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9468:29:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "9486:6:45"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "9494:2:45"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9482:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9482:15:45"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nodeType": "YulTypedName",
                              "src": "9472:6:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9506:10:45",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9515:1:45",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "9510:1:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9574:169:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "9595:3:45"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "srcPtr",
                                              "nodeType": "YulIdentifier",
                                              "src": "9610:6:45"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "9604:5:45"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "9604:13:45"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "9619:42:45",
                                          "type": "",
                                          "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nodeType": "YulIdentifier",
                                        "src": "9600:3:45"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "9600:62:45"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "9588:6:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9588:75:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9588:75:45"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "9676:19:45",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "9687:3:45"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "9692:2:45"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "9683:3:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9683:12:45"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "9676:3:45"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "9708:25:45",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "9722:6:45"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "9730:2:45"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "9718:3:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9718:15:45"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "9708:6:45"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "9536:1:45"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "9539:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "9533:2:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9533:13:45"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "9547:18:45",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "9549:14:45",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "9558:1:45"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9561:1:45",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "9554:3:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9554:9:45"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "9549:1:45"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "9529:3:45",
                            "statements": []
                          },
                          "src": "9525:218:45"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9752:11:45",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "9760:3:45"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9752:4:45"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9208:9:45",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9219:6:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9230:4:45",
                        "type": ""
                      }
                    ],
                    "src": "9088:681:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9897:135:45",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "9907:26:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9919:9:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9930:2:45",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9915:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9915:18:45"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9907:4:45"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9949:9:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "9974:6:45"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "9967:6:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9967:14:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "9960:6:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9960:22:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9942:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9942:41:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9942:41:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10003:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10014:2:45",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9999:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9999:18:45"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "10019:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9992:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9992:34:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9992:34:45"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool_t_uint256__to_t_bool_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9858:9:45",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "9869:6:45",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9877:6:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9888:4:45",
                        "type": ""
                      }
                    ],
                    "src": "9774:258:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10146:76:45",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "10156:26:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10168:9:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10179:2:45",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10164:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10164:18:45"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10156:4:45"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10198:9:45"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "10209:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10191:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10191:25:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10191:25:45"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_library_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10115:9:45",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10126:6:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10137:4:45",
                        "type": ""
                      }
                    ],
                    "src": "10037:185:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10353:125:45",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "10363:26:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10375:9:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10386:2:45",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10371:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10371:18:45"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10363:4:45"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10405:9:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "10420:6:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10428:42:45",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "10416:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10416:55:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10398:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10398:74:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10398:74:45"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_IAToken_$11054__to_t_address__fromStack_library_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10322:9:45",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10333:6:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10344:4:45",
                        "type": ""
                      }
                    ],
                    "src": "10227:251:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10715:748:45",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10725:52:45",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10735:42:45",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "10729:2:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10793:9:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "10808:6:45"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "10816:2:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "10804:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10804:15:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10786:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10786:34:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10786:34:45"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10829:12:45",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10839:2:45",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "10833:2:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10861:9:45"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "10872:2:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10857:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10857:18:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "10881:6:45"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "10889:2:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "10877:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10877:15:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10850:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10850:43:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10850:43:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10913:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10924:2:45",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10909:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10909:18:45"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "10929:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10902:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10902:34:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10902:34:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10956:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10967:2:45",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10952:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10952:18:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10972:3:45",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10945:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10945:31:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10945:31:45"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10985:27:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "11005:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "10999:5:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10999:13:45"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "10989:6:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11032:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11043:3:45",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11028:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11028:19:45"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "11049:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11021:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11021:35:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11021:35:45"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11065:10:45",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11074:1:45",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "11069:1:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11134:91:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "headStart",
                                              "nodeType": "YulIdentifier",
                                              "src": "11163:9:45"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "11174:1:45"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "11159:3:45"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "11159:17:45"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "11178:3:45",
                                          "type": "",
                                          "value": "160"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "11155:3:45"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "11155:27:45"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "value3",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "11198:6:45"
                                                },
                                                {
                                                  "name": "i",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "11206:1:45"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "11194:3:45"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "11194:14:45"
                                            },
                                            {
                                              "name": "_2",
                                              "nodeType": "YulIdentifier",
                                              "src": "11210:2:45"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "11190:3:45"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "11190:23:45"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "11184:5:45"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "11184:30:45"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "11148:6:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11148:67:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11148:67:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "11095:1:45"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "11098:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "11092:2:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11092:13:45"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "11106:19:45",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "11108:15:45",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "11117:1:45"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "11120:2:45"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "11113:3:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11113:10:45"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "11108:1:45"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "11088:3:45",
                            "statements": []
                          },
                          "src": "11084:141:45"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11259:67:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "headStart",
                                              "nodeType": "YulIdentifier",
                                              "src": "11288:9:45"
                                            },
                                            {
                                              "name": "length",
                                              "nodeType": "YulIdentifier",
                                              "src": "11299:6:45"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "11284:3:45"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "11284:22:45"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "11308:3:45",
                                          "type": "",
                                          "value": "160"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "11280:3:45"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "11280:32:45"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11314:1:45",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "11273:6:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11273:43:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11273:43:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "11240:1:45"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "11243:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "11237:2:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11237:13:45"
                          },
                          "nodeType": "YulIf",
                          "src": "11234:92:45"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11335:122:45",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11351:9:45"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "11370:6:45"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "11378:2:45",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "11366:3:45"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "11366:15:45"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11383:66:45",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "11362:3:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11362:88:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11347:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11347:104:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11453:3:45",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11343:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11343:114:45"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11335:4:45"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_IERC3156FlashBorrower_$967_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10660:9:45",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "10671:6:45",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "10679:6:45",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "10687:6:45",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10695:6:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10706:4:45",
                        "type": ""
                      }
                    ],
                    "src": "10483:980:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11577:76:45",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "11587:26:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11599:9:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11610:2:45",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11595:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11595:18:45"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11587:4:45"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11629:9:45"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "11640:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11622:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11622:25:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11622:25:45"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11546:9:45",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "11557:6:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11568:4:45",
                        "type": ""
                      }
                    ],
                    "src": "11468:185:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11893:359:45",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "11903:27:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11915:9:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11926:3:45",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11911:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11911:19:45"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11903:4:45"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11946:9:45"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "11957:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11939:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11939:25:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11939:25:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11984:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11995:2:45",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11980:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11980:18:45"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "12000:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11973:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11973:34:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11973:34:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12027:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12038:2:45",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12023:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12023:18:45"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "12043:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12016:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12016:34:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12016:34:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12070:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12081:2:45",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12066:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12066:18:45"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "12086:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12059:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12059:34:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12059:34:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12113:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12124:3:45",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12109:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12109:19:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value4",
                                        "nodeType": "YulIdentifier",
                                        "src": "12144:6:45"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "12137:6:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12137:14:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "12130:6:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12130:22:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12102:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12102:51:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12102:51:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12173:9:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12184:3:45",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12169:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12169:19:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value5",
                                    "nodeType": "YulIdentifier",
                                    "src": "12194:6:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12202:42:45",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "12190:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12190:55:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12162:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12162:84:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12162:84:45"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_address__to_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11822:9:45",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "11833:6:45",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "11841:6:45",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "11849:6:45",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "11857:6:45",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "11865:6:45",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "11873:6:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11884:4:45",
                        "type": ""
                      }
                    ],
                    "src": "11658:594:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12303:206:45",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12313:19:45",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12329:2:45",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "12323:5:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12323:9:45"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "12313:6:45"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12341:34:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "12363:6:45"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12371:3:45",
                                "type": "",
                                "value": "384"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12359:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12359:16:45"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "12345:10:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12450:22:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "12452:16:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12452:18:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12452:18:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "12393:10:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12405:18:45",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "12390:2:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12390:34:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "12429:10:45"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "12441:6:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "12426:2:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12426:22:45"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "12387:2:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12387:62:45"
                          },
                          "nodeType": "YulIf",
                          "src": "12384:88:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12488:2:45",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "12492:10:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12481:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12481:22:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12481:22:45"
                        }
                      ]
                    },
                    "name": "allocate_memory_2152",
                    "nodeType": "YulFunctionDefinition",
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "12292:6:45",
                        "type": ""
                      }
                    ],
                    "src": "12257:252:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12559:289:45",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12569:19:45",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12585:2:45",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "12579:5:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12579:9:45"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "12569:6:45"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12597:117:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "12619:6:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "size",
                                        "nodeType": "YulIdentifier",
                                        "src": "12635:4:45"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12641:2:45",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12631:3:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12631:13:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12646:66:45",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "12627:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12627:86:45"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12615:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12615:99:45"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "12601:10:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12789:22:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "12791:16:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12791:18:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12791:18:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "12732:10:45"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12744:18:45",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "12729:2:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12729:34:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "12768:10:45"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "12780:6:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "12765:2:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12765:22:45"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "12726:2:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12726:62:45"
                          },
                          "nodeType": "YulIf",
                          "src": "12723:88:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12827:2:45",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "12831:10:45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12820:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12820:22:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12820:22:45"
                        }
                      ]
                    },
                    "name": "allocate_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "12539:4:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "12548:6:45",
                        "type": ""
                      }
                    ],
                    "src": "12514:334:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12901:80:45",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12928:22:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "12930:16:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12930:18:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12930:18:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "12917:1:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "12924:1:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "12920:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12920:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "12914:2:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12914:13:45"
                          },
                          "nodeType": "YulIf",
                          "src": "12911:39:45"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12959:16:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "12970:1:45"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "12973:1:45"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12966:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12966:9:45"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "12959:3:45"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "12884:1:45",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "12887:1:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "12893:3:45",
                        "type": ""
                      }
                    ],
                    "src": "12853:128:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13032:228:45",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13063:168:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13084:1:45",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13087:77:45",
                                      "type": "",
                                      "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "13077:6:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13077:88:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13077:88:45"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13185:1:45",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13188:4:45",
                                      "type": "",
                                      "value": "0x12"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "13178:6:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13178:15:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13178:15:45"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13213:1:45",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13216:4:45",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "13206:6:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13206:15:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13206:15:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "13052:1:45"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "13045:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13045:9:45"
                          },
                          "nodeType": "YulIf",
                          "src": "13042:189:45"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13240:14:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "13249:1:45"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "13252:1:45"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "13245:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13245:9:45"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "13240:1:45"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_div_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "13017:1:45",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "13020:1:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "13026:1:45",
                        "type": ""
                      }
                    ],
                    "src": "12986:274:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13329:418:45",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13339:16:45",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13354:1:45",
                            "type": "",
                            "value": "1"
                          },
                          "variables": [
                            {
                              "name": "power_1",
                              "nodeType": "YulTypedName",
                              "src": "13343:7:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13364:16:45",
                          "value": {
                            "name": "power_1",
                            "nodeType": "YulIdentifier",
                            "src": "13373:7:45"
                          },
                          "variableNames": [
                            {
                              "name": "power",
                              "nodeType": "YulIdentifier",
                              "src": "13364:5:45"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13389:13:45",
                          "value": {
                            "name": "_base",
                            "nodeType": "YulIdentifier",
                            "src": "13397:5:45"
                          },
                          "variableNames": [
                            {
                              "name": "base",
                              "nodeType": "YulIdentifier",
                              "src": "13389:4:45"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13453:288:45",
                            "statements": [
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "13558:22:45",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [],
                                        "functionName": {
                                          "name": "panic_error_0x11",
                                          "nodeType": "YulIdentifier",
                                          "src": "13560:16:45"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "13560:18:45"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "13560:18:45"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "13473:4:45"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "13483:66:45",
                                          "type": "",
                                          "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                                        },
                                        {
                                          "name": "base",
                                          "nodeType": "YulIdentifier",
                                          "src": "13551:4:45"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "div",
                                        "nodeType": "YulIdentifier",
                                        "src": "13479:3:45"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13479:77:45"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "gt",
                                    "nodeType": "YulIdentifier",
                                    "src": "13470:2:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13470:87:45"
                                },
                                "nodeType": "YulIf",
                                "src": "13467:113:45"
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "13619:29:45",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "13621:25:45",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "power",
                                            "nodeType": "YulIdentifier",
                                            "src": "13634:5:45"
                                          },
                                          {
                                            "name": "base",
                                            "nodeType": "YulIdentifier",
                                            "src": "13641:4:45"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mul",
                                          "nodeType": "YulIdentifier",
                                          "src": "13630:3:45"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "13630:16:45"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "power",
                                          "nodeType": "YulIdentifier",
                                          "src": "13621:5:45"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "13600:8:45"
                                    },
                                    {
                                      "name": "power_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "13610:7:45"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "13596:3:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13596:22:45"
                                },
                                "nodeType": "YulIf",
                                "src": "13593:55:45"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "13661:23:45",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "13673:4:45"
                                    },
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "13679:4:45"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mul",
                                    "nodeType": "YulIdentifier",
                                    "src": "13669:3:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13669:15:45"
                                },
                                "variableNames": [
                                  {
                                    "name": "base",
                                    "nodeType": "YulIdentifier",
                                    "src": "13661:4:45"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "13697:34:45",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "power_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "13713:7:45"
                                    },
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "13722:8:45"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shr",
                                    "nodeType": "YulIdentifier",
                                    "src": "13709:3:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13709:22:45"
                                },
                                "variableNames": [
                                  {
                                    "name": "exponent",
                                    "nodeType": "YulIdentifier",
                                    "src": "13697:8:45"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "13422:8:45"
                              },
                              {
                                "name": "power_1",
                                "nodeType": "YulIdentifier",
                                "src": "13432:7:45"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "13419:2:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13419:21:45"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "13441:3:45",
                            "statements": []
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "13415:3:45",
                            "statements": []
                          },
                          "src": "13411:330:45"
                        }
                      ]
                    },
                    "name": "checked_exp_helper",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "_base",
                        "nodeType": "YulTypedName",
                        "src": "13293:5:45",
                        "type": ""
                      },
                      {
                        "name": "exponent",
                        "nodeType": "YulTypedName",
                        "src": "13300:8:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "power",
                        "nodeType": "YulTypedName",
                        "src": "13313:5:45",
                        "type": ""
                      },
                      {
                        "name": "base",
                        "nodeType": "YulTypedName",
                        "src": "13320:4:45",
                        "type": ""
                      }
                    ],
                    "src": "13265:482:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13822:61:45",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "13832:45:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "base",
                                "nodeType": "YulIdentifier",
                                "src": "13862:4:45"
                              },
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "13868:8:45"
                              }
                            ],
                            "functionName": {
                              "name": "checked_exp_unsigned",
                              "nodeType": "YulIdentifier",
                              "src": "13841:20:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13841:36:45"
                          },
                          "variableNames": [
                            {
                              "name": "power",
                              "nodeType": "YulIdentifier",
                              "src": "13832:5:45"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_exp_t_uint256_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "base",
                        "nodeType": "YulTypedName",
                        "src": "13793:4:45",
                        "type": ""
                      },
                      {
                        "name": "exponent",
                        "nodeType": "YulTypedName",
                        "src": "13799:8:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "power",
                        "nodeType": "YulTypedName",
                        "src": "13812:5:45",
                        "type": ""
                      }
                    ],
                    "src": "13752:131:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13947:807:45",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13985:52:45",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "13999:10:45",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "14008:1:45",
                                  "type": "",
                                  "value": "1"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nodeType": "YulIdentifier",
                                    "src": "13999:5:45"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulLeave",
                                "src": "14022:5:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "13967:8:45"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "13960:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13960:16:45"
                          },
                          "nodeType": "YulIf",
                          "src": "13957:80:45"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14070:52:45",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "14084:10:45",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "14093:1:45",
                                  "type": "",
                                  "value": "0"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nodeType": "YulIdentifier",
                                    "src": "14084:5:45"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulLeave",
                                "src": "14107:5:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "base",
                                "nodeType": "YulIdentifier",
                                "src": "14056:4:45"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "14049:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14049:12:45"
                          },
                          "nodeType": "YulIf",
                          "src": "14046:76:45"
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "14158:52:45",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "14172:10:45",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14181:1:45",
                                      "type": "",
                                      "value": "1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "power",
                                        "nodeType": "YulIdentifier",
                                        "src": "14172:5:45"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulLeave",
                                    "src": "14195:5:45"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "14151:59:45",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14156:1:45",
                                "type": "",
                                "value": "1"
                              }
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "14226:123:45",
                                "statements": [
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "14261:22:45",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [],
                                            "functionName": {
                                              "name": "panic_error_0x11",
                                              "nodeType": "YulIdentifier",
                                              "src": "14263:16:45"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "14263:18:45"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "14263:18:45"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "exponent",
                                          "nodeType": "YulIdentifier",
                                          "src": "14246:8:45"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "14256:3:45",
                                          "type": "",
                                          "value": "255"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "gt",
                                        "nodeType": "YulIdentifier",
                                        "src": "14243:2:45"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14243:17:45"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "14240:43:45"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "14296:25:45",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "exponent",
                                          "nodeType": "YulIdentifier",
                                          "src": "14309:8:45"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "14319:1:45",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "14305:3:45"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14305:16:45"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "power",
                                        "nodeType": "YulIdentifier",
                                        "src": "14296:5:45"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulLeave",
                                    "src": "14334:5:45"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "14219:130:45",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14224:1:45",
                                "type": "",
                                "value": "2"
                              }
                            }
                          ],
                          "expression": {
                            "name": "base",
                            "nodeType": "YulIdentifier",
                            "src": "14138:4:45"
                          },
                          "nodeType": "YulSwitch",
                          "src": "14131:218:45"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14447:70:45",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "14461:28:45",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "14474:4:45"
                                    },
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "14480:8:45"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "exp",
                                    "nodeType": "YulIdentifier",
                                    "src": "14470:3:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14470:19:45"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nodeType": "YulIdentifier",
                                    "src": "14461:5:45"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulLeave",
                                "src": "14502:5:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "base",
                                        "nodeType": "YulIdentifier",
                                        "src": "14371:4:45"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14377:2:45",
                                        "type": "",
                                        "value": "11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "14368:2:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14368:12:45"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "exponent",
                                        "nodeType": "YulIdentifier",
                                        "src": "14385:8:45"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14395:2:45",
                                        "type": "",
                                        "value": "78"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "14382:2:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14382:16:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "14364:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14364:35:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "base",
                                        "nodeType": "YulIdentifier",
                                        "src": "14408:4:45"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14414:3:45",
                                        "type": "",
                                        "value": "307"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "14405:2:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14405:13:45"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "exponent",
                                        "nodeType": "YulIdentifier",
                                        "src": "14423:8:45"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14433:2:45",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "14420:2:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14420:16:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "14401:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14401:36:45"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "14361:2:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14361:77:45"
                          },
                          "nodeType": "YulIf",
                          "src": "14358:159:45"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14526:57:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "base",
                                "nodeType": "YulIdentifier",
                                "src": "14568:4:45"
                              },
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "14574:8:45"
                              }
                            ],
                            "functionName": {
                              "name": "checked_exp_helper",
                              "nodeType": "YulIdentifier",
                              "src": "14549:18:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14549:34:45"
                          },
                          "variables": [
                            {
                              "name": "power_1",
                              "nodeType": "YulTypedName",
                              "src": "14530:7:45",
                              "type": ""
                            },
                            {
                              "name": "base_1",
                              "nodeType": "YulTypedName",
                              "src": "14539:6:45",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14688:22:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "14690:16:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14690:18:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14690:18:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "power_1",
                                "nodeType": "YulIdentifier",
                                "src": "14598:7:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14611:66:45",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                                  },
                                  {
                                    "name": "base_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "14679:6:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "div",
                                  "nodeType": "YulIdentifier",
                                  "src": "14607:3:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14607:79:45"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "14595:2:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14595:92:45"
                          },
                          "nodeType": "YulIf",
                          "src": "14592:118:45"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14719:29:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "power_1",
                                "nodeType": "YulIdentifier",
                                "src": "14732:7:45"
                              },
                              {
                                "name": "base_1",
                                "nodeType": "YulIdentifier",
                                "src": "14741:6:45"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "14728:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14728:20:45"
                          },
                          "variableNames": [
                            {
                              "name": "power",
                              "nodeType": "YulIdentifier",
                              "src": "14719:5:45"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_exp_unsigned",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "base",
                        "nodeType": "YulTypedName",
                        "src": "13918:4:45",
                        "type": ""
                      },
                      {
                        "name": "exponent",
                        "nodeType": "YulTypedName",
                        "src": "13924:8:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "power",
                        "nodeType": "YulTypedName",
                        "src": "13937:5:45",
                        "type": ""
                      }
                    ],
                    "src": "13888:866:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14811:176:45",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14930:22:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "14932:16:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14932:18:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14932:18:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "14842:1:45"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "14835:6:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14835:9:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "14828:6:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14828:17:45"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "14850:1:45"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14857:66:45",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                                      },
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "14925:1:45"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "div",
                                      "nodeType": "YulIdentifier",
                                      "src": "14853:3:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14853:74:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "14847:2:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14847:81:45"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "14824:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14824:105:45"
                          },
                          "nodeType": "YulIf",
                          "src": "14821:131:45"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14961:20:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "14976:1:45"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "14979:1:45"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "14972:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14972:9:45"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "14961:7:45"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "14790:1:45",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "14793:1:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "14799:7:45",
                        "type": ""
                      }
                    ],
                    "src": "14759:228:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15041:76:45",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15063:22:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "15065:16:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15065:18:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15065:18:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "15057:1:45"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "15060:1:45"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "15054:2:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15054:8:45"
                          },
                          "nodeType": "YulIf",
                          "src": "15051:34:45"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15094:17:45",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "15106:1:45"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "15109:1:45"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "15102:3:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15102:9:45"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "15094:4:45"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "15023:1:45",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "15026:1:45",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "15032:4:45",
                        "type": ""
                      }
                    ],
                    "src": "14992:125:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15154:152:45",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15171:1:45",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15174:77:45",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15164:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15164:88:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15164:88:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15268:1:45",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15271:4:45",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15261:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15261:15:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15261:15:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15292:1:45",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15295:4:45",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "15285:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15285:15:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15285:15:45"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "15122:184:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15343:152:45",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15360:1:45",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15363:77:45",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15353:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15353:88:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15353:88:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15457:1:45",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15460:4:45",
                                "type": "",
                                "value": "0x32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15450:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15450:15:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15450:15:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15481:1:45",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15484:4:45",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "15474:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15474:15:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15474:15:45"
                        }
                      ]
                    },
                    "name": "panic_error_0x32",
                    "nodeType": "YulFunctionDefinition",
                    "src": "15311:184:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15532:152:45",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15549:1:45",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15552:77:45",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15542:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15542:88:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15542:88:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15646:1:45",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15649:4:45",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15639:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15639:15:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15639:15:45"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15670:1:45",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15673:4:45",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "15663:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15663:15:45"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15663:15:45"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "15500:184:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15734:109:45",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15821:16:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15830:1:45",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15833:1:45",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "15823:6:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15823:12:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15823:12:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "15757:5:45"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "15768:5:45"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15775:42:45",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "15764:3:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15764:54:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "15754:2:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15754:65:45"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "15747:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15747:73:45"
                          },
                          "nodeType": "YulIf",
                          "src": "15744:93:45"
                        }
                      ]
                    },
                    "name": "validator_revert_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "15723:5:45",
                        "type": ""
                      }
                    ],
                    "src": "15689:154:45"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15890:76:45",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15944:16:45",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15953:1:45",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15956:1:45",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "15946:6:45"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15946:12:45"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15946:12:45"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "15913:5:45"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "15934:5:45"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "15927:6:45"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "15927:13:45"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "15920:6:45"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15920:21:45"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "15910:2:45"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15910:32:45"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "15903:6:45"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15903:40:45"
                          },
                          "nodeType": "YulIf",
                          "src": "15900:60:45"
                        }
                      ]
                    },
                    "name": "validator_revert_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "15879:5:45",
                        "type": ""
                      }
                    ],
                    "src": "15848:118:45"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        validator_revert_address(value)\n    }\n    function abi_decode_struct_ReserveConfigurationMap_fromMemory(headStart, end) -> value\n    {\n        if slt(sub(end, headStart), 0x20) { revert(0, 0) }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0x20)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        value := memPtr\n        mstore(memPtr, mload(headStart))\n    }\n    function abi_decode_uint128_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_uint40_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_uint8_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := mload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := shl(5, _4)\n        let dst := allocate_memory(add(_5, _1))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _1)\n        let src := add(_3, _1)\n        if gt(add(add(_3, _5), _1), dataEnd) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _4) { i := add(i, 1) }\n        {\n            mstore(dst, mload(src))\n            dst := add(dst, _1)\n            src := add(src, _1)\n        }\n        value0 := dst_1\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_boolt_uint256t_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        let value_1 := calldataload(add(headStart, 64))\n        validator_revert_address(value_1)\n        value2 := value_1\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n    }\n    function abi_decode_tuple_t_boolt_uint256t_uint256t_address(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let value_1 := calldataload(add(headStart, 96))\n        validator_revert_address(value_1)\n        value3 := value_1\n    }\n    function abi_decode_tuple_t_contract$_ILendingPoolAddressesProvider_$10814_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_struct$_ReserveData_$11174_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 384) { revert(0, 0) }\n        let value := allocate_memory_2152()\n        mstore(value, abi_decode_struct_ReserveConfigurationMap_fromMemory(headStart, dataEnd))\n        mstore(add(value, 32), abi_decode_uint128_fromMemory(add(headStart, 32)))\n        mstore(add(value, 64), abi_decode_uint128_fromMemory(add(headStart, 64)))\n        mstore(add(value, 96), abi_decode_uint128_fromMemory(add(headStart, 96)))\n        mstore(add(value, 128), abi_decode_uint128_fromMemory(add(headStart, 128)))\n        mstore(add(value, 160), abi_decode_uint128_fromMemory(add(headStart, 160)))\n        mstore(add(value, 192), abi_decode_uint40_fromMemory(add(headStart, 192)))\n        mstore(add(value, 224), abi_decode_address_fromMemory(add(headStart, 224)))\n        let _1 := 256\n        mstore(add(value, _1), abi_decode_address_fromMemory(add(headStart, _1)))\n        let _2 := 288\n        mstore(add(value, _2), abi_decode_address_fromMemory(add(headStart, _2)))\n        let _3 := 320\n        mstore(add(value, _3), abi_decode_address_fromMemory(add(headStart, _3)))\n        let _4 := 352\n        mstore(add(value, _4), abi_decode_uint8_fromMemory(add(headStart, _4)))\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint8_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_uint8_fromMemory(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_library_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_address_t_rational_0_by_1__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_address_t_uint16__to_t_address_t_uint256_t_address_t_uint16__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), and(value3, 0xffff))\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_rational_2_by_1_t_address__to_t_address_t_uint256_t_uint256_t_address__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, _1))\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_rational_2_by_1_t_uint16_t_address__to_t_address_t_uint256_t_uint256_t_uint16_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, 0xffff))\n        mstore(add(headStart, 128), and(value4, _1))\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), 0xffffffffffffffffffffffffffffffffffffffff))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_bool_t_uint256__to_t_bool_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_library_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_contract$_IAToken_$11054__to_t_address__fromStack_library_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_IERC3156FlashBorrower_$967_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        let _2 := 32\n        mstore(add(headStart, _2), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        let length := mload(value3)\n        mstore(add(headStart, 128), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _2) }\n        {\n            mstore(add(add(headStart, i), 160), mload(add(add(value3, i), _2)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 160), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 160)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_address__to_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_address__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), iszero(iszero(value4)))\n        mstore(add(headStart, 160), and(value5, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function allocate_memory_2152() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 384)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := power_1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, exponent)\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n}",
              "id": 45,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8237E538 GT PUSH2 0x5A JUMPI DUP1 PUSH4 0x8237E538 EQ PUSH2 0xEA JUMPI DUP1 PUSH4 0xBF04D6E8 EQ PUSH2 0x111 JUMPI DUP1 PUSH4 0xBF5061DF EQ PUSH2 0x131 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x38A1046D EQ PUSH2 0x81 JUMPI DUP1 PUSH4 0x39EC407B EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0x70C0345C EQ PUSH2 0xD4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9C PUSH20 0x1EB4CF3A948E7D72A198FE073CCB8C7A948CD853 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9C PUSH20 0x28171BCA77440897B824CA71D1C56CAC55B68A3 DUP2 JUMP JUMPDEST PUSH2 0xDC PUSH2 0x151 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB0 JUMP JUMPDEST PUSH2 0xDC PUSH32 0x439148F0BBC682CA079E46D6E2C2F0C1E3B820F1A291B069D8882ABF8CF18DD9 DUP2 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x11D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDC PUSH2 0x12C CALLDATASIZE PUSH1 0x4 PUSH2 0x1D29 JUMP JUMPDEST PUSH2 0x208 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x13D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDC PUSH2 0x14C CALLDATASIZE PUSH1 0x4 PUSH2 0x1CD7 JUMP JUMPDEST PUSH2 0xBE2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x613255AB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0x6B175474E89094C44DA98B954EEDEAC495271D0F PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH20 0x1EB4CF3A948E7D72A198FE073CCB8C7A948CD853 SWAP1 PUSH4 0x613255AB SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1DF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x203 SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0x6B175474E89094C44DA98B954EEDEAC495271D0F PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 EQ PUSH20 0x7D2768DE32B0B80B7A3454C06BDAC94A69DDC7A9 DUP2 ISZERO PUSH2 0x6EC JUMPI DUP8 ISZERO PUSH2 0x4D2 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH4 0xE8EDA9DF DUP5 PUSH2 0x266 DUP11 DUP11 PUSH2 0x2112 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2E5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 POP PUSH4 0x573ADE81 SWAP3 POP DUP7 SWAP2 SWAP1 DUP3 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x34E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x362 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x386 SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x44 DUP3 ADD MSTORE ADDRESS PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x405 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x429 SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0x69328DEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP9 SWAP1 MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE DUP3 AND SWAP1 PUSH4 0x69328DEC SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x494 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4A8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4CC SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST POP PUSH2 0xBB5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND SWAP2 PUSH4 0xE8EDA9DF SWAP2 DUP7 SWAP2 SWAP1 DUP3 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x537 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x54B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x56F SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5EE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xA415BCAD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP12 SWAP1 MSTORE PUSH1 0x2 PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x64 DUP4 ADD MSTORE ADDRESS PUSH1 0x84 DUP4 ADD MSTORE DUP5 AND SWAP3 POP PUSH4 0xA415BCAD SWAP2 POP PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x669 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x67D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x69328DEC DUP5 DUP10 DUP10 PUSH2 0x69D SWAP2 SWAP1 PUSH2 0x2112 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x47A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE8EDA9DF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP9 SWAP1 MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x64 DUP4 ADD MSTORE DUP3 AND SWAP1 PUSH4 0xE8EDA9DF SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x75C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x770 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP8 ISZERO PUSH2 0x962 JUMPI PUSH1 0x40 MLOAD PUSH32 0x69328DEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP10 SWAP1 MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE DUP3 AND SWAP1 PUSH4 0x69328DEC SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7F7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x81B SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND SWAP2 PUSH4 0x573ADE81 SWAP2 DUP9 SWAP2 SWAP1 DUP3 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x881 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x895 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8B9 SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x44 DUP3 ADD MSTORE ADDRESS PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x924 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x938 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x95C SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST POP PUSH2 0xB12 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA415BCAD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP10 SWAP1 MSTORE PUSH1 0x2 PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x64 DUP4 ADD MSTORE ADDRESS PUSH1 0x84 DUP4 ADD MSTORE DUP3 AND SWAP1 PUSH4 0xA415BCAD SWAP1 PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x9ED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 POP PUSH4 0xE8EDA9DF SWAP3 POP DUP9 SWAP2 SWAP1 DUP3 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA6A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA8E SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB0D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x69328DEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP9 SWAP1 MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE DUP3 AND SWAP1 PUSH4 0x69328DEC SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB8F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBB3 SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST POP JUMPDEST POP PUSH32 0x439148F0BBC682CA079E46D6E2C2F0C1E3B820F1A291B069D8882ABF8CF18DD9 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH2 0xBF1 JUMPI POP PUSH1 0x0 PUSH2 0x1315 JUMP JUMPDEST POP DUP4 PUSH20 0x6B175474E89094C44DA98B954EEDEAC495271D0F PUSH1 0x0 DUP5 PUSH8 0xDE0B6B3A7640000 PUSH2 0xC1E DUP6 DUP10 PUSH2 0x131E JUMP JUMPDEST PUSH2 0xC28 SWAP2 SWAP1 PUSH2 0x20F3 JUMP JUMPDEST PUSH2 0xC32 SWAP2 SWAP1 PUSH2 0x1FCD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 ISZERO PUSH2 0xC55 JUMPI PUSH2 0xC46 DUP6 DUP9 PUSH2 0x131E JUMP JUMPDEST SWAP1 POP PUSH2 0xC52 DUP2 DUP4 PUSH2 0x1FB5 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0xC5F PUSH2 0x151 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x35EA6A7500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0x7D2768DE32B0B80B7A3454C06BDAC94A69DDC7A9 SWAP1 PUSH4 0x35EA6A75 SWAP1 PUSH1 0x24 ADD PUSH2 0x180 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCE6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD0A SWAP2 SWAP1 PUSH2 0x1D73 JUMP JUMPDEST PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0xD15E005300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0x7D2768DE32B0B80B7A3454C06BDAC94A69DDC7A9 SWAP1 PUSH4 0xD15E0053 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDA7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDCB SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH2 0xDDB PUSH1 0x2 DUP3 PUSH2 0x1FCD JUMP JUMPDEST PUSH2 0xDF1 PUSH12 0x33B2E3C9FD0803CE8000000 DUP10 PUSH2 0x20F3 JUMP JUMPDEST PUSH2 0xDFB SWAP2 SWAP1 PUSH2 0x1FB5 JUMP JUMPDEST PUSH2 0xE05 SWAP2 SWAP1 PUSH2 0x1FCD JUMP JUMPDEST SWAP1 POP PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0xE1F PUSH1 0x2 DUP3 PUSH2 0x1FCD JUMP JUMPDEST PUSH2 0xE29 DUP5 DUP5 PUSH2 0x20F3 JUMP JUMPDEST PUSH2 0xE33 SWAP2 SWAP1 PUSH2 0x1FB5 JUMP JUMPDEST PUSH2 0xE3D SWAP2 SWAP1 PUSH2 0x1FCD JUMP JUMPDEST SWAP6 POP DUP4 DUP7 GT ISZERO PUSH2 0xEF7 JUMPI DUP2 PUSH2 0xE5F PUSH1 0x2 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x1FCD JUMP JUMPDEST PUSH2 0xE75 PUSH12 0x33B2E3C9FD0803CE8000000 DUP8 PUSH2 0x20F3 JUMP JUMPDEST PUSH2 0xE7F SWAP2 SWAP1 PUSH2 0x2112 JUMP JUMPDEST PUSH2 0xE89 SWAP2 SWAP1 PUSH2 0x1FCD JUMP JUMPDEST SWAP6 POP PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0xEA3 PUSH1 0x2 DUP6 PUSH2 0x1FCD JUMP JUMPDEST PUSH2 0xEAD DUP6 DUP10 PUSH2 0x20F3 JUMP JUMPDEST PUSH2 0xEB7 SWAP2 SWAP1 PUSH2 0x2112 JUMP JUMPDEST PUSH2 0xEC1 SWAP2 SWAP1 PUSH2 0x1FCD JUMP JUMPDEST SWAP6 POP PUSH8 0xDE0B6B3A7640000 DUP11 PUSH2 0xEE0 PUSH2 0xEDA DUP9 DUP11 PUSH2 0x2112 JUMP JUMPDEST DUP15 PUSH2 0x16D6 JUMP JUMPDEST PUSH2 0xEEA SWAP2 SWAP1 PUSH2 0x20F3 JUMP JUMPDEST PUSH2 0xEF4 SWAP2 SWAP1 PUSH2 0x1FCD JUMP JUMPDEST SWAP8 POP JUMPDEST POP POP POP POP POP PUSH1 0x0 DUP9 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF1C SWAP3 SWAP2 SWAP1 SWAP2 ISZERO ISZERO DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH32 0xD9D98CE400000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0x1EB4CF3A948E7D72A198FE073CCB8C7A948CD853 SWAP1 PUSH4 0xD9D98CE4 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFB6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFDA SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xFE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0x1EB4CF3A948E7D72A198FE073CCB8C7A948CD853 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x105C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1070 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1094 SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x11FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0x1EB4CF3A948E7D72A198FE073CCB8C7A948CD853 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1113 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1127 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x114B SWAP2 SWAP1 PUSH2 0x1CBA JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0x1EB4CF3A948E7D72A198FE073CCB8C7A948CD853 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 NOT PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x11D6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11FA SWAP2 SWAP1 PUSH2 0x1CBA JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x5CFFE9DE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0x1EB4CF3A948E7D72A198FE073CCB8C7A948CD853 SWAP1 PUSH4 0x5CFFE9DE SWAP1 PUSH2 0x1252 SWAP1 ADDRESS SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x1EE1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x126C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1280 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12A4 SWAP2 SWAP1 PUSH2 0x1CBA JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP12 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP9 SWAP1 MSTORE DUP12 ISZERO ISZERO PUSH1 0x80 DUP3 ADD MSTORE PUSH20 0x1EB4CF3A948E7D72A198FE073CCB8C7A948CD853 PUSH1 0xA0 DUP3 ADD MSTORE PUSH32 0x1B861D4C31D2586A4A0BA63FAFAD6452B1BAF4E1DC2F751A97FEF380B34032A7 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0x6B175474E89094C44DA98B954EEDEAC495271D0F DUP4 ISZERO DUP1 PUSH2 0x1343 JUMPI POP PUSH1 0x0 NOT DUP5 EQ JUMPDEST DUP1 PUSH2 0x135F JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0x136D JUMPI DUP4 SWAP2 POP POP PUSH2 0x16D0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 EQ ISZERO PUSH2 0x14C9 JUMPI PUSH2 0x139A PUSH2 0x1A5A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xB3596F0700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0xB3596F07 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x140A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x142E SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1467 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x147B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x149F SWAP2 SWAP1 PUSH2 0x1E79 JUMP JUMPDEST PUSH2 0x14AD SWAP1 PUSH1 0xFF AND PUSH1 0xA PUSH2 0x204B JUMP JUMPDEST PUSH2 0x14B7 SWAP1 DUP7 PUSH2 0x20F3 JUMP JUMPDEST PUSH2 0x14C1 SWAP2 SWAP1 PUSH2 0x1FCD JUMP JUMPDEST SWAP2 POP POP PUSH2 0x16D0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD DUP4 MSTORE PUSH1 0x0 SWAP3 PUSH1 0x20 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP4 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x14FE JUMPI PUSH2 0x14FE PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP2 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1532 JUMPI PUSH2 0x1532 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH1 0x0 PUSH2 0x155C PUSH2 0x1A5A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9D23D9F2 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1587 SWAP2 SWAP1 PUSH2 0x1E94 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x159F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x15B3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x15DB SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1C0D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1618 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x162C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1650 SWAP2 SWAP1 PUSH2 0x1E79 JUMP JUMPDEST PUSH2 0x165E SWAP1 PUSH1 0xFF AND PUSH1 0xA PUSH2 0x204B JUMP JUMPDEST DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1671 JUMPI PUSH2 0x1671 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH2 0x1684 SWAP2 SWAP1 PUSH2 0x20F3 JUMP JUMPDEST PUSH2 0x168E SWAP2 SWAP1 PUSH2 0x1FCD JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x16A3 JUMPI PUSH2 0x16A3 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH8 0xDE0B6B3A7640000 DUP3 PUSH2 0x16BF SWAP2 SWAP1 PUSH2 0x20F3 JUMP JUMPDEST PUSH2 0x16C9 SWAP2 SWAP1 PUSH2 0x1FCD JUMP JUMPDEST SWAP5 POP POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0x6B175474E89094C44DA98B954EEDEAC495271D0F DUP4 ISZERO DUP1 PUSH2 0x16FB JUMPI POP PUSH1 0x0 NOT DUP5 EQ JUMPDEST DUP1 PUSH2 0x1717 JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0x1725 JUMPI DUP4 SWAP2 POP POP PUSH2 0x16D0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 EQ ISZERO PUSH2 0x1865 JUMPI DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1783 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1797 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17BB SWAP2 SWAP1 PUSH2 0x1E79 JUMP JUMPDEST PUSH2 0x17C9 SWAP1 PUSH1 0xFF AND PUSH1 0xA PUSH2 0x204B JUMP JUMPDEST PUSH2 0x17D1 PUSH2 0x1A5A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xB3596F0700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0xB3596F07 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x182D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1841 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14AD SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD DUP4 MSTORE PUSH1 0x0 SWAP3 PUSH1 0x20 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP4 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x189A JUMPI PUSH2 0x189A PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP2 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x18CE JUMPI PUSH2 0x18CE PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH1 0x0 PUSH2 0x18F8 PUSH2 0x1A5A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9D23D9F2 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1923 SWAP2 SWAP1 PUSH2 0x1E94 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x193B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x194F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1977 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1C0D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP3 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1997 JUMPI PUSH2 0x1997 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH2 0x19AA SWAP2 SWAP1 PUSH2 0x20F3 JUMP JUMPDEST PUSH2 0x19B4 SWAP2 SWAP1 PUSH2 0x1FCD JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x19C9 JUMPI PUSH2 0x19C9 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A0A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A1E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A42 SWAP2 SWAP1 PUSH2 0x1E79 JUMP JUMPDEST PUSH2 0x1A50 SWAP1 PUSH1 0xFF AND PUSH1 0xA PUSH2 0x204B JUMP JUMPDEST PUSH2 0x16BF SWAP1 DUP4 PUSH2 0x20F3 JUMP JUMPDEST PUSH1 0x0 PUSH20 0x57835AD21A177DBDD3090BB1CAE03EACF78FC6D PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x542975C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1AA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1ABD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AE1 SWAP2 SWAP1 PUSH2 0x1BE9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFCA513A8 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B2D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x203 SWAP2 SWAP1 PUSH2 0x1BE9 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1B5C DUP2 PUSH2 0x21B6 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1B96 JUMPI PUSH2 0x1B96 PUSH2 0x2187 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 MLOAD DUP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1B5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH5 0xFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1B5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1B5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1C06 DUP2 PUSH2 0x21B6 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1C38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1C4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x1C5E JUMPI PUSH2 0x1C5E PUSH2 0x2187 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL SWAP2 POP PUSH2 0x1C6F DUP5 DUP4 ADD PUSH2 0x1F84 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP5 DUP7 ADD DUP5 DUP7 ADD DUP8 ADD DUP11 LT ISZERO PUSH2 0x1C8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP6 POP JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x1CAD JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x1C8F JUMP JUMPDEST POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1CCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1C06 DUP2 PUSH2 0x21CE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1CEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1CFA DUP2 PUSH2 0x21CE JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x1D11 DUP2 PUSH2 0x21B6 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1D3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x1D4A DUP2 PUSH2 0x21CE JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x1D68 DUP2 PUSH2 0x21B6 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D8E PUSH2 0x1F5A JUMP JUMPDEST PUSH2 0x1D98 DUP5 DUP5 PUSH2 0x1B61 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1DA6 PUSH1 0x20 DUP5 ADD PUSH2 0x1BA3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1DB7 PUSH1 0x40 DUP5 ADD PUSH2 0x1BA3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1DC8 PUSH1 0x60 DUP5 ADD PUSH2 0x1BA3 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x1DD9 PUSH1 0x80 DUP5 ADD PUSH2 0x1BA3 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x1DEA PUSH1 0xA0 DUP5 ADD PUSH2 0x1BA3 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x1DFB PUSH1 0xC0 DUP5 ADD PUSH2 0x1BC3 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x1E0C PUSH1 0xE0 DUP5 ADD PUSH2 0x1B51 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x1E1F DUP2 DUP6 ADD PUSH2 0x1B51 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 PUSH2 0x1E31 DUP5 DUP3 ADD PUSH2 0x1B51 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x140 PUSH2 0x1E43 DUP5 DUP3 ADD PUSH2 0x1B51 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x160 PUSH2 0x1E55 DUP5 DUP3 ADD PUSH2 0x1BD8 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E72 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C06 DUP3 PUSH2 0x1BD8 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1ED5 JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1EB0 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE PUSH1 0x20 DUP2 DUP8 AND DUP2 DUP6 ADD MSTORE DUP6 PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP6 ADD MSTORE DUP5 MLOAD SWAP2 POP DUP2 PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1F2F JUMPI DUP6 DUP2 ADD DUP3 ADD MLOAD DUP6 DUP3 ADD PUSH1 0xA0 ADD MSTORE DUP2 ADD PUSH2 0x1F13 JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1F41 JUMPI PUSH1 0x0 PUSH1 0xA0 DUP5 DUP8 ADD ADD MSTORE JUMPDEST POP POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0xA0 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x180 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1F7E JUMPI PUSH2 0x1F7E PUSH2 0x2187 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1FAD JUMPI PUSH2 0x1FAD PUSH2 0x2187 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1FC8 JUMPI PUSH2 0x1FC8 PUSH2 0x2129 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2003 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x2043 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x2029 JUMPI PUSH2 0x2029 PUSH2 0x2129 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x2036 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x200D JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C06 DUP4 DUP4 PUSH1 0x0 DUP3 PUSH2 0x2061 JUMPI POP PUSH1 0x1 PUSH2 0x16D0 JUMP JUMPDEST DUP2 PUSH2 0x206E JUMPI POP PUSH1 0x0 PUSH2 0x16D0 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x2084 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x208E JUMPI PUSH2 0x20AA JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x16D0 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x209F JUMPI PUSH2 0x209F PUSH2 0x2129 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x16D0 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x20CD JUMPI POP DUP2 DUP2 EXP PUSH2 0x16D0 JUMP JUMPDEST PUSH2 0x20D7 DUP4 DUP4 PUSH2 0x2008 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x20EB JUMPI PUSH2 0x20EB PUSH2 0x2129 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x210D JUMPI PUSH2 0x210D PUSH2 0x2129 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x2124 JUMPI PUSH2 0x2124 PUSH2 0x2129 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x21CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x21CB JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 DUP9 0xC1 0xBC 0xD4 0x2C 0xD9 SWAP7 PUSH10 0xCA17E73F3EFA39D0A8ED DUP16 0xB8 PUSH21 0xD1EB8F527AC334D6E84664736F6C63430008070033 ",
          "sourceMap": "1973:7623:39:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2203:75;;2236:42;2203:75;;;;;-1:-1:-1;;;;;5908:55:45;;;5890:74;;5878:2;5863:18;2203:75:39;;;;;;;;2560:82;;2599:42;2560:82;;9470:124;;;:::i;:::-;;;10191:25:45;;;10179:2;10164:18;9470:124:39;10037:185:45;2898:88:39;;2941:45;2898:88;;6180:1606;;;;;;;;;;-1:-1:-1;6180:1606:39;;;;;:::i;:::-;;:::i;3117:3057::-;;;;;;;;;;-1:-1:-1;3117:3057:39;;;;;:::i;:::-;;:::i;9470:124::-;9541:46;;;;;2512:42;9541:46;;;5890:74:45;9515:7:39;;2236:42;;9541:40;;5863:18:45;;9541:46:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9534:53;;9470:124;:::o;6180:1606::-;6322:7;2512:42;-1:-1:-1;;;;;6383:11:39;;;;2848:42;6447:1299;;;;6476:7;6472:528;;;-1:-1:-1;;;;;6503:10:39;;;6514:3;6519:24;6537:6;6519:15;:24;:::i;:::-;6503:67;;;;;;;;;;-1:-1:-1;;;;;7861:15:45;;;6503:67:39;;;7843:34:45;7893:18;;;7886:34;6553:4:39;7936:18:45;;;7929:43;3029:1:39;7988:18:45;;;7981:47;7754:19;;6503:67:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6602:36:39;;;;;6632:4;6602:36;;;5890:74:45;-1:-1:-1;;;;;6588:8:39;;;;-1:-1:-1;6588:8:39;;-1:-1:-1;6597:3:39;;6602:21;;;;;;5863:18:45;;6602:36:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6588:69;;;;;;;;;;-1:-1:-1;;;;;8357:15:45;;;6588:69:39;;;8339:34:45;8389:18;;;8382:34;6640:1:39;8432:18:45;;;8425:34;6651:4:39;8475:18:45;;;8468:43;8250:19;;6588:69:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;6675:48:39;;;;;-1:-1:-1;;;;;7431:15:45;;;6675:48:39;;;7413:34:45;7463:18;;;7456:34;;;6717:4:39;7506:18:45;;;7499:43;6675:11:39;;;;;7325:18:45;;6675:48:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6447:1299;;6472:528;6778:36;;;;;6808:4;6778:36;;;5890:74:45;-1:-1:-1;;;;;6762:10:39;;;;;;6773:3;;6778:21;;;;;;5863:18:45;;6778:36:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6762:79;;;;;;;;;;-1:-1:-1;;;;;7861:15:45;;;6762:79:39;;;7843:34:45;7893:18;;;7886:34;6824:4:39;7936:18:45;;;7929:43;3029:1:39;7988:18:45;;;7981:47;7754:19;;6762:79:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6859:51:39;;;;;-1:-1:-1;;;;;8866:15:45;;;6859:51:39;;;8848:34:45;8898:18;;;8891:34;;;6882:1:39;8941:18:45;;;8934:34;3029:1:39;8984:18:45;;;8977:47;6904:4:39;9040:19:45;;;9033:44;6859:9:39;;;-1:-1:-1;6859:9:39;;-1:-1:-1;8759:19:45;;6859:51:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6928:2;-1:-1:-1;;;;;6928:11:39;;6940:3;6963:6;6945:15;:24;;;;:::i;:::-;6928:57;;;;;;;;;;-1:-1:-1;;;;;7431:15:45;;;6928:57:39;;;7413:34:45;7463:18;;;7456:34;6979:4:39;7506:18:45;;;7499:43;7325:18;;6928:57:39;7150:398:45;6447:1299:39;7082:58;;;;;-1:-1:-1;;;;;7861:15:45;;;7082:58:39;;;7843:34:45;7893:18;;;7886:34;;;7123:4:39;7936:18:45;;;7929:43;3029:1:39;7988:18:45;;;7981:47;7082:10:39;;;;;7754:19:45;;7082:58:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7159:7;7155:488;;;7252:40;;;;;-1:-1:-1;;;;;7431:15:45;;;7252:40:39;;;7413:34:45;7463:18;;;7456:34;;;7286:4:39;7506:18:45;;;7499:43;7252:11:39;;;;;7325:18:45;;7252:40:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;7325:37:39;;;;;7356:4;7325:37;;;5890:74:45;-1:-1:-1;;;;;7310:8:39;;;;;;7319:4;;7325:22;;;;;;5863:18:45;;7325:37:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7310:71;;;;;;;;;;-1:-1:-1;;;;;8357:15:45;;;7310:71:39;;;8339:34:45;8389:18;;;8382:34;7364:1:39;8432:18:45;;;8425:34;7375:4:39;8475:18:45;;;8468:43;8250:19;;7310:71:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;7155:488;;;7477:52;;;;;-1:-1:-1;;;;;8866:15:45;;;7477:52:39;;;8848:34:45;8898:18;;;8891:34;;;7501:1:39;8941:18:45;;;8934:34;3029:1:39;8984:18:45;;;8977:47;7523:4:39;9040:19:45;;;9033:44;7477:9:39;;;;;8759:19:45;;7477:52:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7564:37:39;;;;;7595:4;7564:37;;;5890:74:45;-1:-1:-1;;;;;7547:10:39;;;;-1:-1:-1;7547:10:39;;-1:-1:-1;7558:4:39;;7564:22;;;;;;5863:18:45;;7564:37:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7547:81;;;;;;;;;;-1:-1:-1;;;;;7861:15:45;;;7547:81:39;;;7843:34:45;7893:18;;;7886:34;7611:4:39;7936:18:45;;;7929:43;3029:1:39;7988:18:45;;;7981:47;7754:19;;7547:81:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7155:488;7687:48;;;;;-1:-1:-1;;;;;7431:15:45;;;7687:48:39;;;7413:34:45;7463:18;;;7456:34;;;7729:4:39;7506:18:45;;;7499:43;7687:11:39;;;;;7325:18:45;;7687:48:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6447:1299;-1:-1:-1;2941:45:39;;6180:1606;-1:-1:-1;;;;;;;6180:1606:39:o;3117:3057::-;3306:14;3336:18;3332:57;;-1:-1:-1;3377:1:39;3370:8;;3332:57;-1:-1:-1;3407:13:39;2512:42;3430:11;3610:14;2386:7;3560:20;3407:13;3574:5;3560;:20::i;:::-;:46;;;;:::i;:::-;3559:65;;;;:::i;:::-;3545:79;-1:-1:-1;3639:32:39;3693:24;;3689:194;;3764:34;3770:20;3792:5;3764;:34::i;:::-;3737:61;-1:-1:-1;3830:38:39;3737:61;3830:11;:38;:::i;:::-;3816:52;;3689:194;3897:21;3921:14;:12;:14::i;:::-;4541:32;;;;;-1:-1:-1;;;;;5908:55:45;;4541:32:39;;;5890:74:45;3897:38:39;;-1:-1:-1;4516:22:39;;2848:42;;4541:27;;5863:18:45;;4541:32:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:47;;;4639:44;;;;;-1:-1:-1;;;;;5908:55:45;;4639:44:39;;;5890:74:45;4516:72:39;;;;;-1:-1:-1;4602:34:39;;2848:42;;4639:39;;5863:18:45;;4639:44:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4602:81;-1:-1:-1;4697:14:39;4759;4737:18;4754:1;4759:14;4737:18;:::i;:::-;4716;3104:6;4716:11;:18;:::i;:::-;:39;;;;:::i;:::-;4715:58;;;;:::i;:::-;4697:77;-1:-1:-1;3104:6:39;4842:8;4849:1;3104:6;4842:8;:::i;:::-;4803:35;4812:26;4803:6;:35;:::i;:::-;:48;;;;:::i;:::-;4802:57;;;;:::i;:::-;4788:71;;4892:13;4878:11;:27;4874:487;;;4977:26;4964:8;4971:1;3104:6;4964:8;:::i;:::-;4940:20;3104:6;4940:13;:20;:::i;:::-;:33;;;;:::i;:::-;4939:64;;;;:::i;:::-;4925:78;-1:-1:-1;3104:6:39;5067:18;5084:1;5067:14;:18;:::i;:::-;5036:28;5050:14;5036:11;:28;:::i;:::-;:49;;;;:::i;:::-;5035:58;;;;:::i;:::-;5021:72;-1:-1:-1;2386:7:39;5285:14;5228:54;5236:38;5250:24;5021:72;5236:38;:::i;:::-;5276:5;5228:7;:54::i;:::-;:71;;;;:::i;:::-;5227:119;;;;:::i;:::-;5198:148;;4874:487;3531:1840;;;;;5381:17;5412:7;5421:6;5401:27;;;;;;;;9967:14:45;;9960:22;9942:41;;10014:2;9999:18;;9992:34;9930:2;9915:18;;9774:258;5401:27:39;;;;;;;-1:-1:-1;;5401:27:39;;;;;;;5453:54;;;-1:-1:-1;;;;;6738:55:45;;5453:54:39;;;6720:74:45;6810:18;;;6803:34;;;5401:27:39;-1:-1:-1;5438:12:39;;2236:42;;5453:36;;6693:18:45;;5453:54:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5438:69;-1:-1:-1;5595:9:39;;5587:18;;;;;;5636:53;;;;;5666:4;5636:53;;;6441:34:45;2236:42:39;6491:18:45;;;6484:43;5615:18:39;;-1:-1:-1;;;;;5636:21:39;;;;;6353:18:45;;5636:53:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5615:74;;5716:11;5703:10;:24;5699:163;;;5743:39;;;;;2236:42;5743:39;;;6720:74:45;5780:1:39;6810:18:45;;;6803:34;-1:-1:-1;;;;;5743:19:39;;;;;6693:18:45;;5743:39:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;5796:55:39;;;;;2236:42;5796:55;;;6720:74:45;-1:-1:-1;;6810:18:45;;;6803:34;-1:-1:-1;;;;;5796:19:39;;;;;6693:18:45;;5796:55:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5699:163;5872:99;;;;;2236:42;;5872:37;;:99;;5940:4;;5948:3;;5953:11;;5966:4;;5872:99;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;5987:83:39;;;11939:25:45;;;11995:2;11980:18;;11973:34;;;12023:18;;;12016:34;;;12081:2;12066:18;;12059:34;;;12137:14;;12130:22;12124:3;12109:19;;12102:51;2236:42:39;12184:3:45;12169:19;;12162:84;5987:83:39;;11926:3:45;11911:19;5987:83:39;;;;;;;6081:13;;;;;3117:3057;;;;;;;;:::o;7955:750::-;8025:7;2512:42;8076:12;;;:44;;;-1:-1:-1;;8092:7:39;:28;8076:44;:60;;;;8133:3;-1:-1:-1;;;;;8124:12:39;:5;-1:-1:-1;;;;;8124:12:39;;8076:60;8072:105;;;8159:7;8152:14;;;;;8072:105;-1:-1:-1;;;;;8191:14:39;;2432:42;8191:14;8187:169;;;8313:13;:11;:13::i;:::-;:32;;;;;-1:-1:-1;;;;;5908:55:45;;;8313:32:39;;;5890:74:45;8313:27:39;;;;;;;5863:18:45;;8313:32:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8292:3;-1:-1:-1;;;;;8277:28:39;;:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8256:52;;8269:39;;8264:2;8256:52;:::i;:::-;8245:64;;:7;:64;:::i;:::-;8244:101;;;;:::i;:::-;8221:124;;;;;8187:169;8392:16;;;8406:1;8392:16;;;;;;;;8366:23;;8392:16;;;;;;;;;;-1:-1:-1;8392:16:39;8366:42;;8430:5;8418:6;8425:1;8418:9;;;;;;;;:::i;:::-;;;;;;:17;-1:-1:-1;;;;;8418:17:39;;;-1:-1:-1;;;;;8418:17:39;;;;;8457:3;8445:6;8452:1;8445:9;;;;;;;;:::i;:::-;;;;;;:15;-1:-1:-1;;;;;8445:15:39;;;-1:-1:-1;;;;;8445:15:39;;;;;8470:23;8496:13;:11;:13::i;:::-;-1:-1:-1;;;;;8496:29:39;;8526:6;8496:37;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;8496:37:39;;;;;;;;;;;;:::i;:::-;8470:63;;8544:16;8624:5;-1:-1:-1;;;;;8609:30:39;;:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8588:54;;8601:41;;8596:2;8588:54;:::i;:::-;8574:6;8581:1;8574:9;;;;;;;;:::i;:::-;;;;;;;8564:7;:19;;;;:::i;:::-;8563:80;;;;:::i;:::-;8544:99;;8689:6;8696:1;8689:9;;;;;;;;:::i;:::-;;;;;;;2325:4;8661:8;:24;;;;:::i;:::-;8660:38;;;;:::i;:::-;8653:45;;;;;;7955:750;;;;;:::o;8711:753::-;8783:7;2512:42;8834:12;;;:44;;;-1:-1:-1;;8850:7:39;:28;8834:44;:60;;;;8891:3;-1:-1:-1;;;;;8882:12:39;:5;-1:-1:-1;;;;;8882:12:39;;8834:60;8830:105;;;8917:7;8910:14;;;;;8830:105;-1:-1:-1;;;;;8949:14:39;;2432:42;8949:14;8945:169;;;9086:3;-1:-1:-1;;;;;9071:28:39;;:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9050:52;;9063:39;;9058:2;9050:52;:::i;:::-;9013:13;:11;:13::i;:::-;:32;;;;;-1:-1:-1;;;;;5908:55:45;;;9013:32:39;;;5890:74:45;9013:27:39;;;;;;;5863:18:45;;9013:32:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;8945:169::-;9150:16;;;9164:1;9150:16;;;;;;;;9124:23;;9150:16;;;;;;;;;;-1:-1:-1;9150:16:39;9124:42;;9188:5;9176:6;9183:1;9176:9;;;;;;;;:::i;:::-;;;;;;:17;-1:-1:-1;;;;;9176:17:39;;;-1:-1:-1;;;;;9176:17:39;;;;;9215:3;9203:6;9210:1;9203:9;;;;;;;;:::i;:::-;;;;;;:15;-1:-1:-1;;;;;9203:15:39;;;-1:-1:-1;;;;;9203:15:39;;;;;9228:23;9254:13;:11;:13::i;:::-;-1:-1:-1;;;;;9254:29:39;;9284:6;9254:37;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;9254:37:39;;;;;;;;;;;;:::i;:::-;9228:63;;9302:16;2325:4;9332:6;9339:1;9332:9;;;;;;;;:::i;:::-;;;;;;;9322:7;:19;;;;:::i;:::-;9321:37;;;;:::i;:::-;9302:56;;9448:6;9455:1;9448:9;;;;;;;;:::i;:::-;;;;;;;9425:5;-1:-1:-1;;;;;9410:30:39;;:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9389:54;;9402:41;;9397:2;9389:54;:::i;:::-;9377:67;;:8;:67;:::i;7792:157::-;7838:12;2741:42;-1:-1:-1;;;;;7882:40:39;;:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;7882:57:39;;:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;14:138:45:-;93:13;;115:31;93:13;115:31;:::i;:::-;14:138;;;:::o;157:426::-;238:5;286:4;274:9;269:3;265:19;261:30;258:50;;;304:1;301;294:12;258:50;337:2;331:9;379:4;371:6;367:17;450:6;438:10;435:22;414:18;402:10;399:34;396:62;393:88;;;461:18;;:::i;:::-;497:2;490:22;560:16;;545:32;;-1:-1:-1;530:6:45;157:426;-1:-1:-1;157:426:45:o;588:192::-;667:13;;720:34;709:46;;699:57;;689:85;;770:1;767;760:12;785:169;863:13;;916:12;905:24;;895:35;;885:63;;944:1;941;934:12;959:160;1036:13;;1089:4;1078:16;;1068:27;;1058:55;;1109:1;1106;1099:12;1124:251;1194:6;1247:2;1235:9;1226:7;1222:23;1218:32;1215:52;;;1263:1;1260;1253:12;1215:52;1295:9;1289:16;1314:31;1339:5;1314:31;:::i;:::-;1364:5;1124:251;-1:-1:-1;;;1124:251:45:o;1380:947::-;1475:6;1506:2;1549;1537:9;1528:7;1524:23;1520:32;1517:52;;;1565:1;1562;1555:12;1517:52;1598:9;1592:16;1627:18;1668:2;1660:6;1657:14;1654:34;;;1684:1;1681;1674:12;1654:34;1722:6;1711:9;1707:22;1697:32;;1767:7;1760:4;1756:2;1752:13;1748:27;1738:55;;1789:1;1786;1779:12;1738:55;1818:2;1812:9;1840:2;1836;1833:10;1830:36;;;1846:18;;:::i;:::-;1892:2;1889:1;1885:10;1875:20;;1915:28;1939:2;1935;1931:11;1915:28;:::i;:::-;1977:15;;;2008:12;;;;2040:11;;;2070;;;2066:20;;2063:33;-1:-1:-1;2060:53:45;;;2109:1;2106;2099:12;2060:53;2131:1;2122:10;;2141:156;2155:2;2152:1;2149:9;2141:156;;;2212:10;;2200:23;;2173:1;2166:9;;;;;2243:12;;;;2275;;2141:156;;;-1:-1:-1;2316:5:45;1380:947;-1:-1:-1;;;;;;;;1380:947:45:o;2332:245::-;2399:6;2452:2;2440:9;2431:7;2427:23;2423:32;2420:52;;;2468:1;2465;2458:12;2420:52;2500:9;2494:16;2519:28;2541:5;2519:28;:::i;2582:588::-;2674:6;2682;2690;2698;2706;2759:3;2747:9;2738:7;2734:23;2730:33;2727:53;;;2776:1;2773;2766:12;2727:53;2815:9;2802:23;2834:28;2856:5;2834:28;:::i;:::-;2881:5;-1:-1:-1;2933:2:45;2918:18;;2905:32;;-1:-1:-1;2989:2:45;2974:18;;2961:32;3002:33;2961:32;3002:33;:::i;:::-;2582:588;;;;-1:-1:-1;3054:7:45;;3108:2;3093:18;;3080:32;;-1:-1:-1;3159:3:45;3144:19;3131:33;;2582:588;-1:-1:-1;;2582:588:45:o;3175:519::-;3258:6;3266;3274;3282;3335:3;3323:9;3314:7;3310:23;3306:33;3303:53;;;3352:1;3349;3342:12;3303:53;3391:9;3378:23;3410:28;3432:5;3410:28;:::i;:::-;3457:5;-1:-1:-1;3509:2:45;3494:18;;3481:32;;-1:-1:-1;3560:2:45;3545:18;;3532:32;;-1:-1:-1;3616:2:45;3601:18;;3588:32;3629:33;3588:32;3629:33;:::i;:::-;3175:519;;;;-1:-1:-1;3175:519:45;;-1:-1:-1;;3175:519:45:o;3994:1339::-;4094:6;4147:3;4135:9;4126:7;4122:23;4118:33;4115:53;;;4164:1;4161;4154:12;4115:53;4190:22;;:::i;:::-;4235:72;4299:7;4288:9;4235:72;:::i;:::-;4228:5;4221:87;4340:49;4385:2;4374:9;4370:18;4340:49;:::i;:::-;4335:2;4328:5;4324:14;4317:73;4422:49;4467:2;4456:9;4452:18;4422:49;:::i;:::-;4417:2;4410:5;4406:14;4399:73;4504:49;4549:2;4538:9;4534:18;4504:49;:::i;:::-;4499:2;4492:5;4488:14;4481:73;4587:50;4632:3;4621:9;4617:19;4587:50;:::i;:::-;4581:3;4574:5;4570:15;4563:75;4671:50;4716:3;4705:9;4701:19;4671:50;:::i;:::-;4665:3;4658:5;4654:15;4647:75;4755:49;4799:3;4788:9;4784:19;4755:49;:::i;:::-;4749:3;4742:5;4738:15;4731:74;4838:50;4883:3;4872:9;4868:19;4838:50;:::i;:::-;4832:3;4825:5;4821:15;4814:75;4908:3;4943:49;4988:2;4977:9;4973:18;4943:49;:::i;:::-;4927:14;;;4920:73;5012:3;5047:49;5077:18;;;5047:49;:::i;:::-;5031:14;;;5024:73;5116:3;5151:49;5181:18;;;5151:49;:::i;:::-;5135:14;;;5128:73;5220:3;5255:47;5283:18;;;5255:47;:::i;:::-;5239:14;;;5232:71;5243:5;3994:1339;-1:-1:-1;;;3994:1339:45:o;5338:184::-;5408:6;5461:2;5449:9;5440:7;5436:23;5432:32;5429:52;;;5477:1;5474;5467:12;5429:52;-1:-1:-1;5500:16:45;;5338:184;-1:-1:-1;5338:184:45:o;5527:204::-;5595:6;5648:2;5636:9;5627:7;5623:23;5619:32;5616:52;;;5664:1;5661;5654:12;5616:52;5687:38;5715:9;5687:38;:::i;9088:681::-;9259:2;9311:21;;;9381:13;;9284:18;;;9403:22;;;9230:4;;9259:2;9482:15;;;;9456:2;9441:18;;;9230:4;9525:218;9539:6;9536:1;9533:13;9525:218;;;9604:13;;-1:-1:-1;;;;;9600:62:45;9588:75;;9718:15;;;;9683:12;;;;9561:1;9554:9;9525:218;;;-1:-1:-1;9760:3:45;;9088:681;-1:-1:-1;;;;;;9088:681:45:o;10483:980::-;10706:4;-1:-1:-1;;;;;10816:2:45;10808:6;10804:15;10793:9;10786:34;10839:2;10889;10881:6;10877:15;10872:2;10861:9;10857:18;10850:43;10929:6;10924:2;10913:9;10909:18;10902:34;10972:3;10967:2;10956:9;10952:18;10945:31;11005:6;10999:13;10985:27;;11049:6;11043:3;11032:9;11028:19;11021:35;11074:1;11084:141;11098:6;11095:1;11092:13;11084:141;;;11194:14;;;11190:23;;11184:30;11159:17;;;11178:3;11155:27;11148:67;11113:10;;11084:141;;;11243:6;11240:1;11237:13;11234:92;;;11314:1;11308:3;11299:6;11288:9;11284:22;11280:32;11273:43;11234:92;-1:-1:-1;;11378:2:45;11366:15;-1:-1:-1;;11362:88:45;11347:104;;;;11453:3;11343:114;;10483:980;-1:-1:-1;;;;;10483:980:45:o;12257:252::-;12329:2;12323:9;12371:3;12359:16;;12405:18;12390:34;;12426:22;;;12387:62;12384:88;;;12452:18;;:::i;:::-;12488:2;12481:22;12257:252;:::o;12514:334::-;12585:2;12579:9;12641:2;12631:13;;-1:-1:-1;;12627:86:45;12615:99;;12744:18;12729:34;;12765:22;;;12726:62;12723:88;;;12791:18;;:::i;:::-;12827:2;12820:22;12514:334;;-1:-1:-1;12514:334:45:o;12853:128::-;12893:3;12924:1;12920:6;12917:1;12914:13;12911:39;;;12930:18;;:::i;:::-;-1:-1:-1;12966:9:45;;12853:128::o;12986:274::-;13026:1;13052;13042:189;;13087:77;13084:1;13077:88;13188:4;13185:1;13178:15;13216:4;13213:1;13206:15;13042:189;-1:-1:-1;13245:9:45;;12986:274::o;13265:482::-;13354:1;13397:5;13354:1;13411:330;13432:7;13422:8;13419:21;13411:330;;;13551:4;-1:-1:-1;;13479:77:45;13473:4;13470:87;13467:113;;;13560:18;;:::i;:::-;13610:7;13600:8;13596:22;13593:55;;;13630:16;;;;13593:55;13709:22;;;;13669:15;;;;13411:330;;;13415:3;13265:482;;;;;:::o;13752:131::-;13812:5;13841:36;13868:8;13862:4;13937:5;13967:8;13957:80;;-1:-1:-1;14008:1:45;14022:5;;13957:80;14056:4;14046:76;;-1:-1:-1;14093:1:45;14107:5;;14046:76;14138:4;14156:1;14151:59;;;;14224:1;14219:130;;;;14131:218;;14151:59;14181:1;14172:10;;14195:5;;;14219:130;14256:3;14246:8;14243:17;14240:43;;;14263:18;;:::i;:::-;-1:-1:-1;;14319:1:45;14305:16;;14334:5;;14131:218;;14433:2;14423:8;14420:16;14414:3;14408:4;14405:13;14401:36;14395:2;14385:8;14382:16;14377:2;14371:4;14368:12;14364:35;14361:77;14358:159;;;-1:-1:-1;14470:19:45;;;14502:5;;14358:159;14549:34;14574:8;14568:4;14549:34;:::i;:::-;14679:6;-1:-1:-1;;14607:79:45;14598:7;14595:92;14592:118;;;14690:18;;:::i;:::-;14728:20;;13888:866;-1:-1:-1;;;13888:866:45:o;14759:228::-;14799:7;14925:1;-1:-1:-1;;14853:74:45;14850:1;14847:81;14842:1;14835:9;14828:17;14824:105;14821:131;;;14932:18;;:::i;:::-;-1:-1:-1;14972:9:45;;14759:228::o;14992:125::-;15032:4;15060:1;15057;15054:8;15051:34;;;15065:18;;:::i;:::-;-1:-1:-1;15102:9:45;;14992:125::o;15122:184::-;15174:77;15171:1;15164:88;15271:4;15268:1;15261:15;15295:4;15292:1;15285:15;15311:184;15363:77;15360:1;15353:88;15460:4;15457:1;15450:15;15484:4;15481:1;15474:15;15500:184;15552:77;15549:1;15542:88;15649:4;15646:1;15639:15;15673:4;15670:1;15663:15;15689:154;-1:-1:-1;;;;;15768:5:45;15764:54;15757:5;15754:65;15744:93;;15833:1;15830;15823:12;15744:93;15689:154;:::o;15848:118::-;15934:5;15927:13;15920:21;15913:5;15910:32;15900:60;;15956:1;15953;15946:12"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "1744400",
            "executionCost": "1865",
            "totalCost": "1746265"
          },
          "external": {
            "ADAI()": "212",
            "CALLBACK_SUCCESS()": "179",
            "LENDER()": "190",
            "doFlashMint(bool,uint256,address,uint256,uint256)": "infinite",
            "loanLogic(bool,uint256,uint256,address)": "infinite",
            "maxLiquidity()": "infinite"
          },
          "internal": {
            "fromDAI(uint256,address)": "infinite",
            "priceOracle()": "infinite",
            "toDAI(uint256,address)": "infinite"
          }
        },
        "methodIdentifiers": {
          "ADAI()": "39ec407b",
          "CALLBACK_SUCCESS()": "8237e538",
          "LENDER()": "38a1046d",
          "doFlashMint(bool,uint256,address,uint256,uint256)": "bf5061df",
          "loanLogic(bool,uint256,uint256,address)": "bf04d6e8",
          "maxLiquidity()": "70c0345c"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRequested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredDAI\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToCloseLTVGap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"deficit\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"flashLoan\",\"type\":\"address\"}],\"name\":\"Leverage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADAI\",\"outputs\":[{\"internalType\":\"contract IAToken\",\"name\":\"\",\"type\":\"IAToken\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CALLBACK_SUCCESS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LENDER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/AaveFlashloanStrategy/AaveLibraries.sol\":\"FlashMintLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":3500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC3156FlashBorrower.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashBorrower {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb218fa8b4b52df590ff19b9f6d08b5be7f3abfc168a0ea33f5eb612f8f4dd989\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC3156FlashLender.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC3156 FlashLender, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashLender {\\n    /**\\n     * @dev The amount of currency available to be lended.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0d9159aa6c1a0d8006fb152b0aee46a0f9b8938575ede1a0d7e186b3bc79c8d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"contracts/strategies/AaveFlashloanStrategy/AaveInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\nimport { DataTypes } from \\\"./AaveLibraries.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IAaveIncentivesController {\\n    /**\\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n     * @param user The address of the user\\n     * @return The rewards\\n     **/\\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n     * @param amount Amount of rewards to claim\\n     * @param to Address that will be receiving the rewards\\n     * @return Rewards claimed\\n     **/\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n     * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n     * @param amount Amount of rewards to claim\\n     * @param user Address to check and claim rewards\\n     * @param to Address that will be receiving the rewards\\n     * @return Rewards claimed\\n     **/\\n    function claimRewardsOnBehalf(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address user,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev returns the unclaimed rewards of the user\\n     * @param user the address of the user\\n     * @return the unclaimed user rewards\\n     */\\n    function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n    /**\\n     * @dev for backward compatibility with previous implementation of the Incentives controller\\n     */\\n    function REWARD_TOKEN() external view returns (address);\\n\\n    function getDistributionEnd() external view returns (uint256);\\n\\n    function getAssetData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function assets(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 emissionPerSecond,\\n            uint256 index,\\n            uint256 lastUpdateTimestamp\\n        );\\n\\n    function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond) external;\\n}\\n\\ninterface ILendingPool {\\n    /**\\n     * @dev Emitted on deposit()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the deposit\\n     * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n     * @param amount The amount deposited\\n     * @param referral The referral code used\\n     **/\\n    event Deposit(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referral\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserve The address of the underlyng asset being withdrawn\\n     * @param user The address initiating the withdrawal, owner of aTokens\\n     * @param to Address that will receive the underlying\\n     * @param amount The amount to be withdrawn\\n     **/\\n    event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserve The address of the underlying asset being borrowed\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n     * initiator of the transaction on flashLoan()\\n     * @param onBehalfOf The address that will be getting the debt\\n     * @param amount The amount borrowed out\\n     * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n     * @param borrowRate The numeric rate at which the user has borrowed\\n     * @param referral The referral code used\\n     **/\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint256 borrowRateMode,\\n        uint256 borrowRate,\\n        uint16 indexed referral\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\n     * @param amount The amount repaid\\n     **/\\n    event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\\n\\n    /**\\n     * @dev Emitted on swapBorrowRateMode()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user swapping his rate mode\\n     * @param rateMode The rate mode that the user wants to swap to\\n     **/\\n    event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user for which the rebalance has been executed\\n     **/\\n    event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on flashLoan()\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param premium The fee flash borrowed\\n     * @param referralCode The referral code used\\n     **/\\n    event FlashLoan(\\n        address indexed target,\\n        address indexed initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        uint256 premium,\\n        uint16 referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted when the pause is triggered.\\n     */\\n    event Paused();\\n\\n    /**\\n     * @dev Emitted when the pause is lifted.\\n     */\\n    event Unpaused();\\n\\n    /**\\n     * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n     * LendingPoolCollateral manager using a DELEGATECALL\\n     * This allows to have the events in the generated ABI for LendingPool.\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n     * @param liquidator The address of the liquidator\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed debtAsset,\\n        address indexed user,\\n        uint256 debtToCover,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveAToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n     * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n     * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n     * gets added to the LendingPool ABI\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param liquidityRate The new liquidity rate\\n     * @param stableBorrowRate The new stable borrow rate\\n     * @param variableBorrowRate The new variable borrow rate\\n     * @param liquidityIndex The new liquidity index\\n     * @param variableBorrowIndex The new variable borrow index\\n     **/\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to deposit\\n     * @param amount The amount to be deposited\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to Address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     **/\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     **/\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     **/\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 rateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n     * @param asset The address of the underlying asset borrowed\\n     * @param rateMode The rate mode that the user wants to swap to\\n     **/\\n    function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n    /**\\n     * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n     *        borrowed at a stable rate and depositors are not earning enough\\n     * @param asset The address of the underlying asset borrowed\\n     * @param user The address of the user to be rebalanced\\n     **/\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n     * @param asset The address of the underlying asset deposited\\n     * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n     **/\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n    /**\\n     * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n     * For further details please visit https://developers.aave.com\\n     * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n     * @param assets The addresses of the assets being flash-borrowed\\n     * @param amounts The amounts amounts being flash-borrowed\\n     * @param modes Types of the debt to open if the flash loan is not returned:\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalCollateralETH the total collateral in ETH of the user\\n     * @return totalDebtETH the total debt in ETH of the user\\n     * @return availableBorrowsETH the borrowing power left of the user\\n     * @return currentLiquidationThreshold the liquidation threshold of the user\\n     * @return ltv the loan to value of the user\\n     * @return healthFactor the current health factor of the user\\n     **/\\n    function getUserAccountData(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    function initReserve(\\n        address reserve,\\n        address aTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\\n\\n    function setConfiguration(address reserve, uint256 configuration) external;\\n\\n    /**\\n     * @dev Returns the configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The configuration of the reserve\\n     **/\\n    function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @dev Returns the configuration of the user across all the reserves\\n     * @param user The user address\\n     * @return The configuration of the user\\n     **/\\n    function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n    /**\\n     * @dev Returns the normalized income normalized income of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the normalized variable debt per unit of asset\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 balanceFromAfter,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    function getReservesList() external view returns (address[] memory);\\n\\n    function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n    function setPause(bool val) external;\\n\\n    function paused() external view returns (bool);\\n}\\n\\ninterface IProtocolDataProvider {\\n    struct TokenData {\\n        string symbol;\\n        address tokenAddress;\\n    }\\n\\n    function ADDRESSES_PROVIDER() external view returns (ILendingPoolAddressesProvider);\\n\\n    function getAllReservesTokens() external view returns (TokenData[] memory);\\n\\n    function getAllATokens() external view returns (TokenData[] memory);\\n\\n    function getReserveConfigurationData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 decimals,\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            uint256 reserveFactor,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive,\\n            bool isFrozen\\n        );\\n\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n\\n    function getUserReserveData(address asset, address user)\\n        external\\n        view\\n        returns (\\n            uint256 currentATokenBalance,\\n            uint256 currentStableDebt,\\n            uint256 currentVariableDebt,\\n            uint256 principalStableDebt,\\n            uint256 scaledVariableDebt,\\n            uint256 stableBorrowRate,\\n            uint256 liquidityRate,\\n            uint40 stableRateLastUpdated,\\n            bool usageAsCollateralEnabled\\n        );\\n\\n    function getReserveTokensAddresses(address asset)\\n        external\\n        view\\n        returns (\\n            address aTokenAddress,\\n            address stableDebtTokenAddress,\\n            address variableDebtTokenAddress\\n        );\\n}\\n\\ninterface IScaledBalanceToken {\\n    /**\\n     * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n     * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n     * @param user The user whose balance is calculated\\n     * @return The scaled balance of the user\\n     **/\\n    function scaledBalanceOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the scaled balance of the user and the scaled total supply.\\n     * @param user The address of the user\\n     * @return The scaled balance of the user\\n     * @return The scaled balance and the scaled total supply\\n     **/\\n    function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n    /**\\n     * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n     * @return The scaled total supply\\n     **/\\n    function scaledTotalSupply() external view returns (uint256);\\n}\\n\\n/**\\n * @title IVariableDebtToken\\n * @author Aave\\n * @notice Defines the basic interface for a variable debt token.\\n **/\\ninterface IVariableDebtToken is IERC20, IScaledBalanceToken {\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param from The address performing the mint\\n     * @param onBehalfOf The address of the user on which behalf minting has been performed\\n     * @param value The amount to be minted\\n     * @param index The last index of the reserve\\n     **/\\n    event Mint(address indexed from, address indexed onBehalfOf, uint256 value, uint256 index);\\n\\n    /**\\n     * @dev Mints debt token to the `onBehalfOf` address\\n     * @param user The address receiving the borrowed underlying, being the delegatee in case\\n     * of credit delegate, or same as `onBehalfOf` otherwise\\n     * @param onBehalfOf The address receiving the debt tokens\\n     * @param amount The amount of debt being minted\\n     * @param index The variable debt index of the reserve\\n     * @return `true` if the the previous balance of the user is 0\\n     **/\\n    function mint(\\n        address user,\\n        address onBehalfOf,\\n        uint256 amount,\\n        uint256 index\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when variable debt is burnt\\n     * @param user The user which debt has been burned\\n     * @param amount The amount of debt being burned\\n     * @param index The index of the user\\n     **/\\n    event Burn(address indexed user, uint256 amount, uint256 index);\\n\\n    /**\\n     * @dev Burns user variable debt\\n     * @param user The user which debt is burnt\\n     * @param index The variable debt index of the reserve\\n     **/\\n    function burn(\\n        address user,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n\\n    /**\\n     * @dev Returns the address of the incentives controller contract\\n     **/\\n    function getIncentivesController() external view returns (IAaveIncentivesController);\\n}\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n    event MarketIdSet(string newMarketId);\\n    event LendingPoolUpdated(address indexed newAddress);\\n    event ConfigurationAdminUpdated(address indexed newAddress);\\n    event EmergencyAdminUpdated(address indexed newAddress);\\n    event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n    event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n    event PriceOracleUpdated(address indexed newAddress);\\n    event LendingRateOracleUpdated(address indexed newAddress);\\n    event ProxyCreated(bytes32 id, address indexed newAddress);\\n    event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n    function getMarketId() external view returns (string memory);\\n\\n    function setMarketId(string calldata marketId) external;\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function getLendingPool() external view returns (address);\\n\\n    function setLendingPoolImpl(address pool) external;\\n\\n    function getLendingPoolConfigurator() external view returns (address);\\n\\n    function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n    function getLendingPoolCollateralManager() external view returns (address);\\n\\n    function setLendingPoolCollateralManager(address manager) external;\\n\\n    function getPoolAdmin() external view returns (address);\\n\\n    function setPoolAdmin(address admin) external;\\n\\n    function getEmergencyAdmin() external view returns (address);\\n\\n    function setEmergencyAdmin(address admin) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address priceOracle) external;\\n\\n    function getLendingRateOracle() external view returns (address);\\n\\n    function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\\ninterface IOptionalERC20 {\\n    function decimals() external view returns (uint8);\\n}\\n\\ninterface IPriceOracle {\\n    function getAssetPrice(address _asset) external view returns (uint256);\\n\\n    function getAssetsPrices(address[] calldata _assets) external view returns (uint256[] memory);\\n\\n    function getSourceOfAsset(address _asset) external view returns (address);\\n\\n    function getFallbackOracle() external view returns (address);\\n}\\n\\ninterface IStakedAave is IERC20 {\\n    function stake(address to, uint256 amount) external;\\n\\n    function redeem(address to, uint256 amount) external;\\n\\n    function cooldown() external;\\n\\n    function claimRewards(address to, uint256 amount) external;\\n\\n    function getTotalRewardsBalance(address) external view returns (uint256);\\n\\n    function COOLDOWN_SECONDS() external view returns (uint256);\\n\\n    function stakersCooldowns(address) external view returns (uint256);\\n\\n    function UNSTAKE_WINDOW() external view returns (uint256);\\n}\\n\\n/**\\n * @title IInitializableAToken\\n * @notice Interface for the initialize function on AToken\\n * @author Aave\\n **/\\ninterface IInitializableAToken {\\n    /**\\n     * @dev Emitted when an aToken is initialized\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param pool The address of the associated lending pool\\n     * @param treasury The address of the treasury\\n     * @param incentivesController The address of the incentives controller for this aToken\\n     * @param aTokenDecimals the decimals of the underlying\\n     * @param aTokenName the name of the aToken\\n     * @param aTokenSymbol the symbol of the aToken\\n     * @param params A set of encoded parameters for additional initialization\\n     **/\\n    event Initialized(\\n        address indexed underlyingAsset,\\n        address indexed pool,\\n        address treasury,\\n        address incentivesController,\\n        uint8 aTokenDecimals,\\n        string aTokenName,\\n        string aTokenSymbol,\\n        bytes params\\n    );\\n\\n    /**\\n     * @dev Initializes the aToken\\n     * @param pool The address of the lending pool where this aToken will be used\\n     * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n     * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n     * @param incentivesController The smart contract managing potential incentives distribution\\n     * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n     * @param aTokenName The name of the aToken\\n     * @param aTokenSymbol The symbol of the aToken\\n     */\\n    function initialize(\\n        ILendingPool pool,\\n        address treasury,\\n        address underlyingAsset,\\n        IAaveIncentivesController incentivesController,\\n        uint8 aTokenDecimals,\\n        string calldata aTokenName,\\n        string calldata aTokenSymbol,\\n        bytes calldata params\\n    ) external;\\n}\\n\\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param from The address performing the mint\\n     * @param value The amount being\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    event Mint(address indexed from, uint256 value, uint256 index);\\n\\n    /**\\n     * @dev Mints `amount` aTokens to `user`\\n     * @param user The address receiving the minted tokens\\n     * @param amount The amount of tokens getting minted\\n     * @param index The new liquidity index of the reserve\\n     * @return `true` if the the previous balance of the user was 0\\n     */\\n    function mint(\\n        address user,\\n        uint256 amount,\\n        uint256 index\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted after aTokens are burned\\n     * @param from The owner of the aTokens, getting them burned\\n     * @param target The address that will receive the underlying\\n     * @param value The amount being burned\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\\n\\n    /**\\n     * @dev Emitted during the transfer action\\n     * @param from The user whose tokens are being transferred\\n     * @param to The recipient\\n     * @param value The amount being transferred\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n    /**\\n     * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n     * @param user The owner of the aTokens, getting them burned\\n     * @param receiverOfUnderlying The address that will receive the underlying\\n     * @param amount The amount being burned\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    function burn(\\n        address user,\\n        address receiverOfUnderlying,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n\\n    /**\\n     * @dev Mints aTokens to the reserve treasury\\n     * @param amount The amount of tokens getting minted\\n     * @param index The new liquidity index of the reserve\\n     */\\n    function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n    /**\\n     * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n     * @param from The address getting liquidated, current owner of the aTokens\\n     * @param to The recipient\\n     * @param value The amount of tokens getting transferred\\n     **/\\n    function transferOnLiquidation(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external;\\n\\n    /**\\n     * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\n     * assets in borrow(), withdraw() and flashLoan()\\n     * @param user The recipient of the underlying\\n     * @param amount The amount getting transferred\\n     * @return The amount transferred\\n     **/\\n    function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @dev Invoked to execute actions on the aToken side after a repayment.\\n     * @param user The user executing the repayment\\n     * @param amount The amount getting repaid\\n     **/\\n    function handleRepayment(address user, uint256 amount) external;\\n\\n    /**\\n     * @dev Returns the address of the incentives controller contract\\n     **/\\n    function getIncentivesController() external view returns (IAaveIncentivesController);\\n\\n    /**\\n     * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n     **/\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\\n/**\\n * @title IReserveInterestRateStrategyInterface interface\\n * @dev Interface for the calculation of the interest rates\\n * @author Aave\\n */\\ninterface IReserveInterestRateStrategy {\\n    function baseVariableBorrowRate() external view returns (uint256);\\n\\n    function getMaxVariableBorrowRate() external view returns (uint256);\\n\\n    function stableRateSlope1() external view returns (uint256);\\n\\n    function stableRateSlope2() external view returns (uint256);\\n\\n    function variableRateSlope1() external view returns (uint256);\\n\\n    function variableRateSlope2() external view returns (uint256);\\n\\n    function OPTIMAL_UTILIZATION_RATE() external view returns (uint256);\\n\\n    function calculateInterestRates(\\n        address reserve,\\n        uint256 availableLiquidity,\\n        uint256 totalStableDebt,\\n        uint256 totalVariableDebt,\\n        uint256 averageStableBorrowRate,\\n        uint256 reserveFactor\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 liquidityRate,\\n            uint256 stableBorrowRate,\\n            uint256 variableBorrowRate\\n        );\\n\\n    function calculateInterestRates(\\n        address reserve,\\n        address aToken,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalStableDebt,\\n        uint256 totalVariableDebt,\\n        uint256 averageStableBorrowRate,\\n        uint256 reserveFactor\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 liquidityRate,\\n            uint256 stableBorrowRate,\\n            uint256 variableBorrowRate\\n        );\\n}\\n\",\"keccak256\":\"0x4a127be3e712530ee06158c8db15cb8f72b53fee94a1afabdeddb8c734c67c5a\",\"license\":\"GPL-3.0\"},\"contracts/strategies/AaveFlashloanStrategy/AaveLibraries.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\nimport { IAToken, IProtocolDataProvider, IProtocolDataProvider, ILendingPool, IPriceOracle, IOptionalERC20 } from \\\"./AaveInterfaces.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary DataTypes {\\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        uint40 lastUpdateTimestamp;\\n        //tokens addresses\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint8 id;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: Reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60-63: reserved\\n        //bit 64-79: reserve factor\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        uint256 data;\\n    }\\n\\n    enum InterestRateMode {\\n        NONE,\\n        STABLE,\\n        VARIABLE\\n    }\\n}\\n\\nlibrary FlashMintLib {\\n    event Leverage(\\n        uint256 amountRequested,\\n        uint256 amountUsed,\\n        uint256 requiredDAI,\\n        uint256 amountToCloseLTVGap,\\n        bool deficit,\\n        address flashLoan\\n    );\\n\\n    address public constant LENDER = 0x1EB4CF3A948E7D72A198fe073cCb8C7a948cD853;\\n    uint256 private constant _DAI_DECIMALS = 1e18;\\n    uint256 private constant _COLLAT_RATIO_PRECISION = 1 ether;\\n    address private constant _WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address private constant _DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    IAToken public constant ADAI = IAToken(0x028171bCA77440897B824Ca71D1c56caC55b68A3);\\n    IProtocolDataProvider private constant _protocolDataProvider =\\n        IProtocolDataProvider(0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d);\\n    ILendingPool private constant _lendingPool = ILendingPool(0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9);\\n\\n    bytes32 public constant CALLBACK_SUCCESS = keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n    uint16 private constant _referral = 0; // TODO: get our own referral code\\n\\n    uint256 private constant _RAY = 10**27;\\n\\n    function doFlashMint(\\n        bool deficit,\\n        uint256 amountDesired,\\n        address token,\\n        uint256 collatRatioDAI,\\n        uint256 depositToCloseLTVGap\\n    ) public returns (uint256 amount) {\\n        if (amountDesired == 0) {\\n            return 0;\\n        }\\n        amount = amountDesired;\\n        address dai = _DAI;\\n\\n        // calculate amount of dai we need\\n        uint256 requiredDAI;\\n        {\\n            requiredDAI = (toDAI(amount, token) * _COLLAT_RATIO_PRECISION) / collatRatioDAI;\\n\\n            uint256 requiredDAIToCloseLTVGap = 0;\\n            if (depositToCloseLTVGap > 0) {\\n                requiredDAIToCloseLTVGap = toDAI(depositToCloseLTVGap, token);\\n                requiredDAI = requiredDAI + requiredDAIToCloseLTVGap;\\n            }\\n\\n            uint256 _maxLiquidity = maxLiquidity();\\n\\n            /*\\n            When depositing/withdrawing in the `lendingPool` the amounts are scaled by a `liquidityIndex` and rounded with the functions rayDiv and rayMul (in the aDAI contract)\\n            Weirdly, 2 different indexes are used: `liquidityIndex` is used when depositing and `getReserveNormalizedIncome` when withdrawing\\n            Therefore, we need to round `requiredDAI`, or we may get some rounding errors and revert\\n            because the amount we try to withdraw (to pay back the flashloan) is not equal to the amount deposited\\n            */\\n            uint256 liquidityIndex = _lendingPool.getReserveData(dai).liquidityIndex;\\n            uint256 getReserveNormalizedIncome = _lendingPool.getReserveNormalizedIncome(dai);\\n            uint256 rayDiv = ((requiredDAI * _RAY + liquidityIndex / 2) / liquidityIndex);\\n            requiredDAI = (rayDiv * getReserveNormalizedIncome + (_RAY / 2)) / _RAY;\\n\\n            if (requiredDAI > _maxLiquidity) {\\n                requiredDAI = (_maxLiquidity * _RAY - (_RAY / 2)) / getReserveNormalizedIncome;\\n                requiredDAI = (requiredDAI * liquidityIndex - liquidityIndex / 2) / _RAY;\\n\\n                // NOTE: if we cap amountDAI, we reduce amountToken we are taking too\\n                amount =\\n                    (fromDAI(requiredDAI - requiredDAIToCloseLTVGap, token) * collatRatioDAI) /\\n                    _COLLAT_RATIO_PRECISION;\\n            }\\n        }\\n\\n        bytes memory data = abi.encode(deficit, amount);\\n        uint256 _fee = IERC3156FlashLender(LENDER).flashFee(dai, requiredDAI);\\n        // Check that fees have not been increased without us knowing\\n        require(_fee == 0);\\n        uint256 _allowance = IERC20(dai).allowance(address(this), address(LENDER));\\n        if (_allowance < requiredDAI) {\\n            IERC20(dai).approve(address(LENDER), 0);\\n            IERC20(dai).approve(address(LENDER), type(uint256).max);\\n        }\\n\\n        IERC3156FlashLender(LENDER).flashLoan(IERC3156FlashBorrower(address(this)), dai, requiredDAI, data);\\n\\n        emit Leverage(amountDesired, amount, requiredDAI, depositToCloseLTVGap, deficit, LENDER);\\n\\n        return amount; // we need to return the amount of Token we have changed our position in\\n    }\\n\\n    function loanLogic(\\n        bool deficit,\\n        uint256 amount,\\n        uint256 amountFlashmint,\\n        address want\\n    ) public returns (bytes32) {\\n        address dai = _DAI;\\n        bool isDai = (want == dai);\\n\\n        ILendingPool lp = _lendingPool;\\n\\n        if (isDai) {\\n            if (deficit) {\\n                lp.deposit(dai, amountFlashmint - amount, address(this), _referral);\\n                lp.repay(dai, IERC20(dai).balanceOf(address(this)), 2, address(this));\\n                lp.withdraw(dai, amountFlashmint, address(this));\\n            } else {\\n                lp.deposit(dai, IERC20(dai).balanceOf(address(this)), address(this), _referral);\\n                lp.borrow(dai, amount, 2, _referral, address(this));\\n                lp.withdraw(dai, amountFlashmint - amount, address(this));\\n            }\\n        } else {\\n            // 1. Deposit DAI in Aave as collateral\\n            lp.deposit(dai, amountFlashmint, address(this), _referral);\\n\\n            if (deficit) {\\n                // 2a. if in deficit withdraw amount and repay it\\n                lp.withdraw(want, amount, address(this));\\n                lp.repay(want, IERC20(want).balanceOf(address(this)), 2, address(this));\\n            } else {\\n                // 2b. if levering up borrow and deposit\\n                lp.borrow(want, amount, 2, _referral, address(this));\\n                lp.deposit(want, IERC20(want).balanceOf(address(this)), address(this), _referral);\\n            }\\n            // 3. Withdraw DAI\\n            lp.withdraw(dai, amountFlashmint, address(this));\\n        }\\n\\n        return CALLBACK_SUCCESS;\\n    }\\n\\n    function priceOracle() internal view returns (IPriceOracle) {\\n        return IPriceOracle(_protocolDataProvider.ADDRESSES_PROVIDER().getPriceOracle());\\n    }\\n\\n    function toDAI(uint256 _amount, address asset) internal view returns (uint256) {\\n        address dai = _DAI;\\n        if (_amount == 0 || _amount == type(uint256).max || asset == dai) {\\n            return _amount;\\n        }\\n\\n        if (asset == _WETH) {\\n            return\\n                (_amount * (uint256(10)**uint256(IOptionalERC20(dai).decimals()))) / priceOracle().getAssetPrice(dai);\\n        }\\n\\n        address[] memory tokens = new address[](2);\\n        tokens[0] = asset;\\n        tokens[1] = dai;\\n        uint256[] memory prices = priceOracle().getAssetsPrices(tokens);\\n\\n        uint256 ethPrice = (_amount * prices[0]) / (uint256(10)**uint256(IOptionalERC20(asset).decimals()));\\n        return (ethPrice * _DAI_DECIMALS) / prices[1];\\n    }\\n\\n    function fromDAI(uint256 _amount, address asset) internal view returns (uint256) {\\n        address dai = _DAI;\\n        if (_amount == 0 || _amount == type(uint256).max || asset == dai) {\\n            return _amount;\\n        }\\n\\n        if (asset == _WETH) {\\n            return\\n                (_amount * priceOracle().getAssetPrice(dai)) / (uint256(10)**uint256(IOptionalERC20(dai).decimals()));\\n        }\\n\\n        address[] memory tokens = new address[](2);\\n        tokens[0] = asset;\\n        tokens[1] = dai;\\n        uint256[] memory prices = priceOracle().getAssetsPrices(tokens);\\n\\n        uint256 ethPrice = (_amount * prices[1]) / _DAI_DECIMALS;\\n\\n        return (ethPrice * (uint256(10)**uint256(IOptionalERC20(asset).decimals()))) / prices[0];\\n    }\\n\\n    function maxLiquidity() public view returns (uint256) {\\n        return IERC3156FlashLender(LENDER).maxFlashLoan(_DAI);\\n    }\\n}\\n\",\"keccak256\":\"0x2c6567605d2332c25bf03e02d6b2b22ed131308f6a4071deb6408f64edfed56b\",\"license\":\"GPL-3.0\"}},\"version\":1}",
      "storageLayout": {
        "storage": [],
        "types": null
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/external/AccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"../interfaces/IAccessControl.sol\\\";\\n\\n/**\\n * @dev This contract is fully forked from OpenZeppelin `AccessControl`.\\n * The only difference is the removal of the ERC165 implementation as it's not\\n * needed in Angle.\\n *\\n * Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external override {\\n        require(account == _msgSender(), \\\"71\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IAccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title IAccessControl\\n/// @author Forked from OpenZeppelin\\n/// @notice Interface for `AccessControl` contracts\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\n    },\n    \"contracts/strategies/BaseStrategyEvents.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../external/AccessControl.sol\\\";\\nimport \\\"../external/AccessControlUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"../interfaces/IPoolManager.sol\\\";\\n\\n/// @title BaseStrategyEvents\\n/// @author Angle Core Team\\n/// @notice Events used in the abstract `BaseStrategy` contract\\ncontract BaseStrategyEvents {\\n    // So indexers can keep track of this\\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\\n\\n    event UpdatedMinReportDelayed(uint256 delay);\\n\\n    event UpdatedMaxReportDelayed(uint256 delay);\\n\\n    event UpdatedDebtThreshold(uint256 debtThreshold);\\n\\n    event UpdatedRewards(address rewards);\\n\\n    event UpdatedIsRewardActivated(bool activated);\\n\\n    event UpdatedRewardAmountAndMinimumAmountMoved(uint256 _rewardAmount, uint256 _minimumAmountMoved);\\n\\n    event EmergencyExitActivated();\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"contracts/external/AccessControlUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IAccessControl.sol\\\";\\n\\n/**\\n * @dev This contract is fully forked from OpenZeppelin `AccessControlUpgradeable`.\\n * The only difference is the removal of the ERC165 implementation as it's not\\n * needed in Angle.\\n *\\n * Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, IAccessControl {\\n    function __AccessControl_init() internal initializer {\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {}\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external override {\\n        require(account == msg.sender, \\\"71\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\n    },\n    \"contracts/interfaces/IStrategy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title IStrategy\\n/// @author Inspired by Yearn with slight changes from Angle Core Team\\n/// @notice Interface for yield farming strategies\\ninterface IStrategy is IAccessControl {\\n    function estimatedAPR() external view returns (uint256);\\n\\n    function poolManager() external view returns (address);\\n\\n    function want() external view returns (address);\\n\\n    function isActive() external view returns (bool);\\n\\n    function estimatedTotalAssets() external view returns (uint256);\\n\\n    function harvestTrigger(uint256 callCost) external view returns (bool);\\n\\n    function harvest() external;\\n\\n    function withdraw(uint256 _amountNeeded) external returns (uint256 amountFreed, uint256 _loss);\\n\\n    function setEmergencyExit() external;\\n\\n    function addGuardian(address _guardian) external;\\n\\n    function revokeGuardian(address _guardian) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/IPoolManager.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n// Struct for the parameters associated to a strategy interacting with a collateral `PoolManager`\\n// contract\\nstruct StrategyParams {\\n    // Timestamp of last report made by this strategy\\n    // It is also used to check if a strategy has been initialized\\n    uint256 lastReport;\\n    // Total amount the strategy is expected to have\\n    uint256 totalStrategyDebt;\\n    // The share of the total assets in the `PoolManager` contract that the `strategy` can access to.\\n    uint256 debtRatio;\\n}\\n\\n/// @title IPoolManagerFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the collateral poolManager contracts handling each one type of collateral for\\n/// a given stablecoin\\n/// @dev Only the functions used in other contracts of the protocol are left here\\ninterface IPoolManagerFunctions {\\n    // ============================ Yield Farming ==================================\\n\\n    function creditAvailable() external view returns (uint256);\\n\\n    function debtOutstanding() external view returns (uint256);\\n\\n    function report(\\n        uint256 _gain,\\n        uint256 _loss,\\n        uint256 _debtPayment\\n    ) external;\\n\\n    // ============================= Getters =======================================\\n\\n    function getBalance() external view returns (uint256);\\n\\n    function getTotalAsset() external view returns (uint256);\\n}\\n\\n/// @title IPoolManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\n/// @dev Used in other contracts of the protocol\\ninterface IPoolManager is IPoolManagerFunctions {\\n    function stableMaster() external view returns (address);\\n\\n    function perpetualManager() external view returns (address);\\n\\n    function token() external view returns (address);\\n\\n    function totalDebt() external view returns (uint256);\\n\\n    function strategies(address _strategy) external view returns (StrategyParams memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/mock/MockStrategy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"../interfaces/IPoolManager.sol\\\";\\n\\ncontract MockStrategy {\\n    address public poolManager;\\n\\n    address public want;\\n\\n    constructor(address _poolManager, address _want) {\\n        poolManager = _poolManager;\\n        want = _want;\\n    }\\n\\n    function report(\\n        uint256 gain,\\n        uint256 loss,\\n        uint256 debtPayment\\n    ) external {\\n        IPoolManager(poolManager).report(gain, loss, debtPayment);\\n    }\\n\\n    function withdraw(uint256 amount) external pure returns (uint256, uint256) {\\n        return (amount, 1);\\n    }\\n\\n    function creditAvailable() external view returns (uint256 credit) {\\n        credit = IPoolManager(poolManager).creditAvailable();\\n    }\\n}\\n\"\n    },\n    \"contracts/mock/MockPoolManager2.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"../external/AccessControlUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IPoolManager.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\n\\nimport \\\"../utils/FunctionUtils.sol\\\";\\n\\nstruct SLPData {\\n    // Last timestamp at which the `sanRate` has been updated for SLPs\\n    uint256 lastBlockUpdated;\\n    // Fees accumulated from previous blocks and to be distributed to SLPs\\n    uint256 lockedInterests;\\n    // Max interests used to update the `sanRate` in a single block\\n    // Should be in collateral token base\\n    uint256 maxInterestsDistributed;\\n    // Amount of fees left aside for SLPs and that will be distributed\\n    // when the protocol is collateralized back again\\n    uint256 feesAside;\\n    // Part of the fees normally going to SLPs that is left aside\\n    // before the protocol is collateralized back again (depends on collateral ratio)\\n    // Updated by keepers and scaled by `BASE_PARAMS`\\n    uint64 slippageFee;\\n    // Portion of the fees from users minting and burning\\n    // that goes to SLPs (the rest goes to surplus)\\n    uint64 feesForSLPs;\\n    // Slippage factor that's applied to SLPs exiting (depends on collateral ratio)\\n    // If `slippage = BASE_PARAMS`, SLPs can get nothing, if `slippage = 0` they get their full claim\\n    // Updated by keepers and scaled by `BASE_PARAMS`\\n    uint64 slippage;\\n    // Portion of the interests from lending\\n    // that goes to SLPs (the rest goes to surplus)\\n    uint64 interestsForSLPs;\\n}\\n\\nstruct MintBurnData {\\n    // Values of the thresholds to compute the minting fees\\n    // depending on HA hedge (scaled by `BASE_PARAMS`)\\n    uint64[] xFeeMint;\\n    // Values of the fees at thresholds (scaled by `BASE_PARAMS`)\\n    uint64[] yFeeMint;\\n    // Values of the thresholds to compute the burning fees\\n    // depending on HA hedge (scaled by `BASE_PARAMS`)\\n    uint64[] xFeeBurn;\\n    // Values of the fees at thresholds (scaled by `BASE_PARAMS`)\\n    uint64[] yFeeBurn;\\n    // Max proportion of collateral from users that can be covered by HAs\\n    // It is exactly the same as the parameter of the same name in `PerpetualManager`, whenever one is updated\\n    // the other changes accordingly\\n    uint64 targetHAHedge;\\n    // Minting fees correction set by the `FeeManager` contract: they are going to be multiplied\\n    // to the value of the fees computed using the hedge curve\\n    // Scaled by `BASE_PARAMS`\\n    uint64 bonusMalusMint;\\n    // Burning fees correction set by the `FeeManager` contract: they are going to be multiplied\\n    // to the value of the fees computed using the hedge curve\\n    // Scaled by `BASE_PARAMS`\\n    uint64 bonusMalusBurn;\\n    // Parameter used to limit the number of stablecoins that can be issued using the concerned collateral\\n    uint256 capOnStableMinted;\\n}\\n\\ninterface IOracle {\\n    function read() external view returns (uint256);\\n\\n    function readAll() external view returns (uint256 lowerRate, uint256 upperRate);\\n\\n    function readLower() external view returns (uint256);\\n\\n    function readUpper() external view returns (uint256);\\n\\n    function readQuote(uint256 baseAmount) external view returns (uint256);\\n\\n    function readQuoteLower(uint256 baseAmount) external view returns (uint256);\\n\\n    function inBase() external view returns (uint256);\\n}\\n\\ninterface ISanToken is IERC20 {\\n    function mint(address account, uint256 amount) external;\\n    function burnFrom(\\n        uint256 amount,\\n        address burner,\\n        address sender\\n    ) external;\\n    function burnSelf(uint256 amount, address burner) external;\\n    function stableMaster() external view returns (address);\\n    function poolManager() external view returns (address);\\n}\\n\\ninterface IStableMaster {\\n    function agToken() external view returns (address);\\n    function signalLoss(uint256 loss) external;\\n    function accumulateInterest(uint256 gain) external;\\n    function collateralMap(IPoolManager poolManager)\\n        external\\n        view\\n        returns (\\n            IERC20 token,\\n            ISanToken sanToken,\\n            address perpetualManager,\\n            IOracle oracle,\\n            uint256 stocksUsers,\\n            uint256 sanRate,\\n            uint256 collatBase,\\n            SLPData memory slpData,\\n            MintBurnData memory feeData\\n        );\\n}\\n\\n/// @title PoolManager\\n/// @author Angle Core Team\\n/// @notice The `PoolManager` contract corresponds to a collateral pool of the protocol for a stablecoin,\\n/// it manages a single ERC20 token. It is responsible for interacting with the strategies enabling the protocol\\n/// to get yield on its collateral\\n/// @dev This file contains the functions that are callable by governance or by other contracts of the protocol\\n/// @dev References to this contract are called `PoolManager`\\ncontract PoolManager is IPoolManagerFunctions, AccessControlUpgradeable, FunctionUtils {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Interface for the underlying token accepted by this contract\\n    IERC20 public token;\\n\\n    /// @notice Reference to the `StableMaster` contract corresponding to this `PoolManager`\\n    IStableMaster public stableMaster;\\n\\n    // ============================= Yield Farming =================================\\n\\n    /// @notice Funds currently given to strategies\\n    uint256 public totalDebt;\\n\\n    /// @notice Proportion of the funds managed dedicated to strategies\\n    /// Has to be between 0 and `BASE_PARAMS`\\n    uint256 public debtRatio;\\n\\n    /// The struct `StrategyParams` is defined in the interface `IPoolManager`\\n    /// @notice Mapping between the address of a strategy contract and its corresponding details\\n    mapping(address => StrategyParams) public strategies;\\n\\n    /// @notice List of the current strategies\\n    address[] public strategyList;\\n\\n    /// @notice Address of the surplus distributor allowed to distribute rewards\\n    address public surplusConverter;\\n\\n    /// @notice Share of the interests going to surplus and share going to SLPs\\n    uint64 public interestsForSurplus;\\n\\n    /// @notice Interests accumulated by the protocol and to be distributed through ANGLE or veANGLE\\n    /// token holders\\n    uint256 public interestsAccumulated;\\n\\n    /// @notice Debt that must be paid by admins after a loss on a strategy\\n    uint256 public adminDebt;\\n\\n    event FeesDistributed(uint256 amountDistributed);\\n\\n    event Recovered(address indexed token, address indexed to, uint256 amount);\\n\\n    event StrategyAdded(address indexed strategy, uint256 debtRatio);\\n\\n    event InterestsForSurplusUpdated(uint64 _interestsForSurplus);\\n\\n    event SurplusConverterUpdated(address indexed newSurplusConverter, address indexed oldSurplusConverter);\\n\\n    event StrategyRevoked(address indexed strategy);\\n\\n    event StrategyReported(\\n        address indexed strategy,\\n        uint256 gain,\\n        uint256 loss,\\n        uint256 debtPayment,\\n        uint256 totalDebt\\n    );\\n\\n    // Roles need to be defined here because there are some internal access control functions\\n    // in the `PoolManagerInternal` file\\n\\n    /// @notice Role for `StableMaster` only\\n    bytes32 public constant STABLEMASTER_ROLE = keccak256(\\\"STABLEMASTER_ROLE\\\");\\n    /// @notice Role for governors only\\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\\\"GOVERNOR_ROLE\\\");\\n    /// @notice Role for guardians and governors\\n    bytes32 public constant GUARDIAN_ROLE = keccak256(\\\"GUARDIAN_ROLE\\\");\\n    /// @notice Role for `Strategy` only\\n    bytes32 public constant STRATEGY_ROLE = keccak256(\\\"STRATEGY_ROLE\\\");\\n\\n    // ============================= Yield Farming =================================\\n\\n    /// @notice Internal version of `updateStrategyDebtRatio`\\n    /// @dev Updates the debt ratio for a strategy\\n    function _updateStrategyDebtRatio(address strategy, uint256 _debtRatio) internal {\\n        StrategyParams storage params = strategies[strategy];\\n        require(params.lastReport != 0, \\\"78\\\");\\n        debtRatio = debtRatio + _debtRatio - params.debtRatio;\\n        require(debtRatio <= BASE_PARAMS, \\\"76\\\");\\n        params.debtRatio = _debtRatio;\\n        emit StrategyAdded(strategy, debtRatio);\\n    }\\n\\n    // ============================ Utils ==========================================\\n\\n    /// @notice Returns this `PoolManager`'s reserve of collateral (not including what has been lent)\\n    function _getBalance() internal view returns (uint256) {\\n        return token.balanceOf(address(this));\\n    }\\n\\n    /// @notice Returns the amount of assets owned by this `PoolManager`\\n    /// @dev This sums the current balance of the contract to what has been given to strategies\\n    /// @dev This amount can be manipulated by flash loans\\n    function _getTotalAsset() internal view returns (uint256) {\\n        return _getBalance() + totalDebt;\\n    }\\n\\n    // ============================= Yield Farming =================================\\n\\n    /// @notice Provides an estimated Annual Percentage Rate for SLPs based on lending to other protocols\\n    /// @dev This function is an estimation and is made for external use only\\n    /// @dev This does not take into account transaction fees which accrue to SLPs too\\n    /// @dev This can be manipulated by a flash loan attack (SLP deposit/ withdraw) via `_getTotalAsset`\\n    /// when entering you should make sure this hasn't be called by a flash loan and look\\n    /// at a mean of past APR.\\n    function estimatedAPR() external view returns (uint256 apr) {\\n        apr = 0;\\n        (, ISanToken sanTokenForAPR, , , , uint256 sanRate, , SLPData memory slpData, ) = stableMaster.collateralMap(\\n            IPoolManager(address(this))\\n        );\\n        uint256 supply = sanTokenForAPR.totalSupply();\\n\\n        // `sanRate` should never be equal to 0\\n        if (supply == 0) return type(uint256).max;\\n\\n        for (uint256 i = 0; i < strategyList.length; i++) {\\n            apr =\\n                apr +\\n                (strategies[strategyList[i]].debtRatio * IStrategy(strategyList[i]).estimatedAPR()) /\\n                BASE_PARAMS;\\n        }\\n        apr = (apr * slpData.interestsForSLPs * _getTotalAsset()) / sanRate / supply;\\n    }\\n\\n    /// @notice Tells a strategy how much it can borrow from this `PoolManager`\\n    /// @return Amount of token a strategy has access to as a credit line\\n    /// @dev Since this function is a view function, there is no need to have an access control logic\\n    /// even though it will just be relevant for a strategy\\n    /// @dev Manipulating `_getTotalAsset` with a flashloan will only\\n    /// result in tokens being transferred at the cost of the caller\\n    function creditAvailable() external view override returns (uint256) {\\n        StrategyParams storage params = strategies[msg.sender];\\n\\n        uint256 target = (_getTotalAsset() * params.debtRatio) / BASE_PARAMS;\\n\\n        if (target < params.totalStrategyDebt) return 0;\\n\\n        return Math.min(target - params.totalStrategyDebt, _getBalance());\\n    }\\n\\n    /// @notice Tells a strategy how much it owes to this `PoolManager`\\n    /// @return Amount of token a strategy has to reimburse\\n    /// @dev Manipulating `_getTotalAsset` with a flashloan will only\\n    /// result in tokens being transferred at the cost of the caller\\n    function debtOutstanding() external view override returns (uint256) {\\n        StrategyParams storage params = strategies[msg.sender];\\n\\n        uint256 target = (_getTotalAsset() * params.debtRatio) / BASE_PARAMS;\\n\\n        if (target > params.totalStrategyDebt) return 0;\\n\\n        return (params.totalStrategyDebt - target);\\n    }\\n\\n    /// @notice Reports the gains or loss made by a strategy\\n    /// @param gain Amount strategy has realized as a gain on its investment since its\\n    /// last report, and is free to be given back to `PoolManager` as earnings\\n    /// @param loss Amount strategy has realized as a loss on its investment since its\\n    /// last report, and should be accounted for on the `PoolManager`'s balance sheet.\\n    /// The loss will reduce the `debtRatio`. The next time the strategy will harvest,\\n    /// it will pay back the debt in an attempt to adjust to the new debt limit.\\n    /// @param debtPayment Amount strategy has made available to cover outstanding debt\\n    /// @dev This is the main contact point where the strategy interacts with the `PoolManager`\\n    /// @dev The strategy reports back what it has free, then the `PoolManager` contract \\\"decides\\\"\\n    /// whether to take some back or give it more. Note that the most it can\\n    /// take is `gain + _debtPayment`, and the most it can give is all of the\\n    /// remaining reserves. Anything outside of those bounds is abnormal behavior.\\n    function report(\\n        uint256 gain,\\n        uint256 loss,\\n        uint256 debtPayment\\n    ) external override onlyRole(STRATEGY_ROLE) {\\n        require(token.balanceOf(msg.sender) >= gain + debtPayment, \\\"72\\\");\\n\\n        StrategyParams storage params = strategies[msg.sender];\\n        // Updating parameters in the `perpetualManager`\\n        // This needs to be done now because it has implications in `_getTotalAsset()`\\n        params.totalStrategyDebt = params.totalStrategyDebt + gain - loss;\\n        totalDebt = totalDebt + gain - loss;\\n        params.lastReport = block.timestamp;\\n\\n        // Warning: `_getTotalAsset` could be manipulated by flashloan attacks.\\n        // It may allow external users to transfer funds into strategy or remove funds\\n        // from the strategy. Yet, as it does not impact the profit or loss and as attackers\\n        // have no interest in making such txs to have a direct profit, we let it as is.\\n        // The only issue is if the strategy is compromised; in this case governance\\n        // should revoke the strategy\\n        uint256 target = ((_getTotalAsset()) * params.debtRatio) / BASE_PARAMS;\\n        if (target > params.totalStrategyDebt) {\\n            // If the strategy has some credit left, tokens can be transferred to this strategy\\n            uint256 available = Math.min(target - params.totalStrategyDebt, _getBalance());\\n            params.totalStrategyDebt = params.totalStrategyDebt + available;\\n            totalDebt = totalDebt + available;\\n            if (available > 0) {\\n                token.safeTransfer(msg.sender, available);\\n            }\\n        } else {\\n            uint256 available = Math.min(params.totalStrategyDebt - target, debtPayment + gain);\\n            params.totalStrategyDebt = params.totalStrategyDebt - available;\\n            totalDebt = totalDebt - available;\\n            if (available > 0) {\\n                token.safeTransferFrom(msg.sender, address(this), available);\\n            }\\n        }\\n        emit StrategyReported(msg.sender, gain, loss, debtPayment, params.totalStrategyDebt);\\n\\n        // Handle gains before losses\\n        if (gain > 0) {\\n            uint256 gainForSurplus = (gain * interestsForSurplus) / BASE_PARAMS;\\n            uint256 adminDebtPre = adminDebt;\\n            // Depending on the current admin debt distribute the necessary gain from the strategies\\n            if (adminDebtPre == 0) interestsAccumulated += gainForSurplus;\\n            else if (adminDebtPre <= gainForSurplus) {\\n                interestsAccumulated += gainForSurplus - adminDebtPre;\\n                adminDebt = 0;\\n            } else adminDebt -= gainForSurplus;\\n            stableMaster.accumulateInterest(gain - gainForSurplus);\\n            emit FeesDistributed(gain);\\n        }\\n\\n        // Handle eventual losses\\n        if (loss > 0) {\\n            uint256 lossForSurplus = (loss * interestsForSurplus) / BASE_PARAMS;\\n            uint256 interestsAccumulatedPreLoss = interestsAccumulated;\\n            // If the loss can not be entirely soaked by the interests to be distributed then\\n            // the protocol keeps track of the debt\\n            if (lossForSurplus > interestsAccumulatedPreLoss) {\\n                interestsAccumulated = 0;\\n                adminDebt += lossForSurplus - interestsAccumulatedPreLoss;\\n            } else interestsAccumulated -= lossForSurplus;\\n            // The rest is incurred to SLPs\\n            stableMaster.signalLoss(loss - lossForSurplus);\\n        }\\n    }\\n\\n    // =========================== Governor Functions ==============================\\n\\n    /// @notice Allows to recover any ERC20 token, including the token handled by this contract, and to send it\\n    /// to a contract\\n    /// @param tokenAddress Address of the token to recover\\n    /// @param to Address of the contract to send collateral to\\n    /// @param amountToRecover Amount of collateral to transfer\\n    /// @dev As this function can be used to transfer funds to another contract, it has to be a `GOVERNOR` function\\n    /// @dev In case the concerned token is the specific token handled by this contract, this function checks that the\\n    /// amount entered is not too big and approximates the surplus of the protocol\\n    /// @dev To esimate the amount of user claims on the concerned collateral, this function uses the `stocksUsers` for\\n    /// this collateral, but this is just an approximation as users can claim the collateral of their choice provided\\n    /// that they own a stablecoin\\n    /// @dev The sanity check excludes the HA claims: to get a sense of it, this function would need to compute the cash out\\n    /// amount of all the perpetuals, and this cannot be done on-chain in a cheap manner\\n    /// @dev Overall, even though there is a sanity check, this function relies on the fact that governance is not corrupted\\n    /// in this protocol and will not try to withdraw too much funds\\n    function recoverERC20(\\n        address tokenAddress,\\n        address to,\\n        uint256 amountToRecover\\n    ) external onlyRole(GOVERNOR_ROLE) {\\n        if (tokenAddress == address(token)) {\\n            // Fetching info from the `StableMaster`\\n            (\\n                ,\\n                ISanToken sanToken,\\n                ,\\n                IOracle oracle,\\n                uint256 stocksUsers,\\n                uint256 sanRate,\\n                uint256 collatBase,\\n                ,\\n\\n            ) = stableMaster.collateralMap(IPoolManager(address(this)));\\n\\n            // Checking if there are enough reserves for the amount to withdraw\\n            require(\\n                _getTotalAsset() >=\\n                    amountToRecover +\\n                        (sanToken.totalSupply() * sanRate) /\\n                        BASE_TOKENS +\\n                        (stocksUsers * collatBase) /\\n                        oracle.readUpper() +\\n                        interestsAccumulated,\\n                \\\"66\\\"\\n            );\\n\\n            token.safeTransfer(to, amountToRecover);\\n        } else {\\n            IERC20(tokenAddress).safeTransfer(to, amountToRecover);\\n        }\\n        emit Recovered(tokenAddress, to, amountToRecover);\\n    }\\n\\n    /// @notice Adds a strategy to the `PoolManager`\\n    /// @param strategy The address of the strategy to add\\n    /// @param _debtRatio The share of the total assets that the strategy has access to\\n    /// @dev Multiple checks are made. For instance, the contract must not already belong to the `PoolManager`\\n    /// and the underlying token of the strategy has to be consistent with the `PoolManager` contracts\\n    /// @dev This function is a `governor` function and not a `guardian` one because a `guardian` could add a strategy\\n    /// enabling the withdraw of the funds of the protocol\\n    /// @dev The `_debtRatio` should be expressed in `BASE_PARAMS`\\n    function addStrategy(address strategy, uint256 _debtRatio) external onlyRole(GOVERNOR_ROLE) {\\n        StrategyParams storage params = strategies[strategy];\\n\\n        require(params.lastReport == 0, \\\"73\\\");\\n        require(address(this) == IStrategy(strategy).poolManager(), \\\"74\\\");\\n        // Using current code, this condition should always be verified as in the constructor\\n        // of the strategy the `want()` is set to the token of this `PoolManager`\\n        require(address(token) == IStrategy(strategy).want(), \\\"75\\\");\\n        require(debtRatio + _debtRatio <= BASE_PARAMS, \\\"76\\\");\\n\\n        // Add strategy to approved strategies\\n        params.lastReport = 1;\\n        params.totalStrategyDebt = 0;\\n        params.debtRatio = _debtRatio;\\n\\n        _grantRole(STRATEGY_ROLE, strategy);\\n\\n        // Update global parameters\\n        debtRatio += _debtRatio;\\n        emit StrategyAdded(strategy, debtRatio);\\n\\n        strategyList.push(strategy);\\n    }\\n\\n    // =========================== Guardian Functions ==============================\\n\\n    /// @notice Modifies the funds a strategy has access to\\n    /// @param strategy The address of the Strategy\\n    /// @param _debtRatio The share of the total assets that the strategy has access to\\n    /// @dev The update has to be such that the `debtRatio` does not exceeds the 100% threshold\\n    /// as this `PoolManager` cannot lend collateral that it doesn't not own.\\n    /// @dev `_debtRatio` is stored as a uint256 but as any parameter of the protocol, it should be expressed\\n    /// in `BASE_PARAMS`\\n    function updateStrategyDebtRatio(address strategy, uint256 _debtRatio) external onlyRole(GUARDIAN_ROLE) {\\n        _updateStrategyDebtRatio(strategy, _debtRatio);\\n    }\\n\\n    /// @notice Triggers an emergency exit for a strategy and then harvests it to fetch all the funds\\n    /// @param strategy The address of the `Strategy`\\n    function setStrategyEmergencyExit(address strategy) external onlyRole(GUARDIAN_ROLE) {\\n        _updateStrategyDebtRatio(strategy, 0);\\n        IStrategy(strategy).setEmergencyExit();\\n        IStrategy(strategy).harvest();\\n    }\\n\\n    /// @notice Revokes a strategy\\n    /// @param strategy The address of the strategy to revoke\\n    /// @dev This should only be called after the following happened in order: the `strategy.debtRatio` has been set to 0,\\n    /// `harvest` has been called enough times to recover all capital gain/losses.\\n    function revokeStrategy(address strategy) external onlyRole(GUARDIAN_ROLE) {\\n        StrategyParams storage params = strategies[strategy];\\n\\n        require(params.debtRatio == 0, \\\"77\\\");\\n        require(params.totalStrategyDebt == 0, \\\"77\\\");\\n        uint256 strategyListLength = strategyList.length;\\n        require(params.lastReport != 0 && strategyListLength >= 1, \\\"78\\\");\\n        // It has already been checked whether the strategy was a valid strategy\\n        for (uint256 i = 0; i < strategyListLength - 1; i++) {\\n            if (strategyList[i] == strategy) {\\n                strategyList[i] = strategyList[strategyListLength - 1];\\n                break;\\n            }\\n        }\\n\\n        strategyList.pop();\\n\\n        // Update global parameters\\n        debtRatio -= params.debtRatio;\\n        delete strategies[strategy];\\n\\n        _revokeRole(STRATEGY_ROLE, strategy);\\n\\n        emit StrategyRevoked(strategy);\\n    }\\n\\n    /// @notice Withdraws a given amount from a strategy\\n    /// @param strategy The address of the strategy\\n    /// @param amount The amount to withdraw\\n    /// @dev This function tries to recover `amount` from the strategy, but it may not go through\\n    /// as we may not be able to withdraw from the lending protocol the full amount\\n    /// @dev In this last case we only update the parameters by setting the loss as the gap between\\n    /// what has been asked and what has been returned.\\n    function withdrawFromStrategy(IStrategy strategy, uint256 amount) external onlyRole(GUARDIAN_ROLE) {\\n        StrategyParams storage params = strategies[address(strategy)];\\n        require(params.lastReport != 0, \\\"78\\\");\\n\\n        uint256 loss;\\n        (amount, loss) = strategy.withdraw(amount);\\n\\n        // Handling eventual losses\\n        params.totalStrategyDebt = params.totalStrategyDebt - loss - amount;\\n        totalDebt = totalDebt - loss - amount;\\n\\n        emit StrategyReported(address(strategy), 0, loss, amount - loss, params.totalStrategyDebt);\\n\\n        // Handle eventual losses\\n        // With the strategy we are using in current tests, it is going to be impossible to have\\n        // a positive loss by calling strategy.withdraw, this function indeed calls _liquidatePosition\\n        // which output value is always zero\\n        if (loss > 0) stableMaster.signalLoss(loss);\\n    }\\n\\n    // =================== Surplus Distributor Function ============================\\n\\n    /// @notice Allows to push interests revenue accumulated by the protocol to the `surplusConverter` to do buybacks\\n    ///  or another form of redistribution to ANGLE or veANGLE token holders\\n    /// @dev This function is permissionless and anyone can transfer the `interestsAccumulated` by the protocol\\n    /// to the `surplusConverter`\\n    function pushSurplus() external {\\n        // If the `surplusConverter` has not been initialized, surplus should not be distributed\\n        // Storing the `surplusConverter` in an intermediate variable to avoid multiple reads in\\n        // storage\\n        address surplusConverterMem = surplusConverter;\\n        require(surplusConverterMem != address(0), \\\"0\\\");\\n        uint256 amount = interestsAccumulated;\\n        interestsAccumulated = 0;\\n        // Storing the `token` in memory to avoid duplicate reads in storage\\n        IERC20 tokenMem = token;\\n        tokenMem.safeTransfer(surplusConverterMem, amount);\\n        emit Recovered(address(tokenMem), surplusConverterMem, amount);\\n    }\\n\\n    // ======================== Getters - View Functions ===========================\\n\\n    /// @notice Gets the current balance of this `PoolManager` contract\\n    /// @return The amount of the underlying collateral that the contract currently owns\\n    /// @dev This balance does not take into account what has been lent to strategies\\n    function getBalance() external view override returns (uint256) {\\n        return _getBalance();\\n    }\\n\\n    /// @notice Gets the total amount of collateral that is controlled by this `PoolManager` contract\\n    /// @return The amount of collateral owned by this contract plus the amount that has been lent to strategies\\n    /// @dev This is the value that is used to compute the debt ratio for a given strategy\\n    function getTotalAsset() external view override returns (uint256) {\\n        return _getTotalAsset();\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\n    },\n    \"contracts/utils/FunctionUtils.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title FunctionUtils\\n/// @author Angle Core Team\\n/// @notice Contains all the utility functions that are needed in different places of the protocol\\n/// @dev Functions in this contract should typically be pure functions\\n/// @dev This contract is voluntarily a contract and not a library to save some gas cost every time it is used\\ncontract FunctionUtils {\\n    /// @notice Base that is used to compute ratios and floating numbers\\n    uint256 public constant BASE_TOKENS = 10**18;\\n    /// @notice Base that is used to define parameters that need to have a floating value (for instance parameters\\n    /// that are defined as ratios)\\n    uint256 public constant BASE_PARAMS = 10**9;\\n\\n    /// @notice Computes the value of a linear by part function at a given point\\n    /// @param x Point of the function we want to compute\\n    /// @param xArray List of breaking points (in ascending order) that define the linear by part function\\n    /// @param yArray List of values at breaking points (not necessarily in ascending order)\\n    /// @dev The evolution of the linear by part function between two breaking points is linear\\n    /// @dev Before the first breaking point and after the last one, the function is constant with a value\\n    /// equal to the first or last value of the yArray\\n    /// @dev This function is relevant if `x` is between O and `BASE_PARAMS`. If `x` is greater than that, then\\n    /// everything will be as if `x` is equal to the greater element of the `xArray`\\n    function _piecewiseLinear(\\n        uint64 x,\\n        uint64[] memory xArray,\\n        uint64[] memory yArray\\n    ) internal pure returns (uint64) {\\n        if (x >= xArray[xArray.length - 1]) {\\n            return yArray[xArray.length - 1];\\n        } else if (x <= xArray[0]) {\\n            return yArray[0];\\n        } else {\\n            uint256 lower;\\n            uint256 upper = xArray.length - 1;\\n            uint256 mid;\\n            while (upper - lower > 1) {\\n                mid = lower + (upper - lower) / 2;\\n                if (xArray[mid] <= x) {\\n                    lower = mid;\\n                } else {\\n                    upper = mid;\\n                }\\n            }\\n            if (yArray[upper] > yArray[lower]) {\\n                // There is no risk of overflow here as in the product of the difference of `y`\\n                // with the difference of `x`, the product is inferior to `BASE_PARAMS**2` which does not\\n                // overflow for `uint64`\\n                return\\n                    yArray[lower] +\\n                    ((yArray[upper] - yArray[lower]) * (x - xArray[lower])) /\\n                    (xArray[upper] - xArray[lower]);\\n            } else {\\n                return\\n                    yArray[lower] -\\n                    ((yArray[lower] - yArray[upper]) * (x - xArray[lower])) /\\n                    (xArray[upper] - xArray[lower]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Checks if the input arrays given by governance to update the fee structure is valid\\n    /// @param xArray List of breaking points (in ascending order) that define the linear by part function\\n    /// @param yArray List of values at breaking points (not necessarily in ascending order)\\n    /// @dev This function is a way to avoid some governance attacks or errors\\n    /// @dev The modifier checks if the arrays have a non null length, if their length is the same, if the values\\n    /// in the `xArray` are in ascending order and if the values in the `xArray` and in the `yArray` are not superior\\n    /// to `BASE_PARAMS`\\n    modifier onlyCompatibleInputArrays(uint64[] memory xArray, uint64[] memory yArray) {\\n        require(xArray.length == yArray.length && xArray.length > 0, \\\"5\\\");\\n        for (uint256 i = 0; i <= yArray.length - 1; i++) {\\n            require(yArray[i] <= uint64(BASE_PARAMS) && xArray[i] <= uint64(BASE_PARAMS), \\\"6\\\");\\n            if (i > 0) {\\n                require(xArray[i] > xArray[i - 1], \\\"7\\\");\\n            }\\n        }\\n        _;\\n    }\\n\\n    /// @notice Checks if the new value given for the parameter is consistent (it should be inferior to 1\\n    /// if it corresponds to a ratio)\\n    /// @param fees Value of the new parameter to check\\n    modifier onlyCompatibleFees(uint64 fees) {\\n        require(fees <= BASE_PARAMS, \\\"4\\\");\\n        _;\\n    }\\n\\n    /// @notice Checks if the new address given is not null\\n    /// @param newAddress Address to check\\n    /// @dev Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation\\n    modifier zeroCheck(address newAddress) {\\n        require(newAddress != address(0), \\\"0\\\");\\n        _;\\n    }\\n}\\n\"\n    },\n    \"contracts/mock/MockPoolManager.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"../interfaces/IPoolManager.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\n\\ncontract MockPoolManager is AccessControl {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant BASE_TOKENS = 10**18;\\n    uint256 public constant BASE_PARAMS = 10**9;\\n\\n    bytes32 public constant STRATEGY_ROLE = keccak256(\\\"STRATEGY_ROLE\\\");\\n\\n    mapping(address => StrategyParams) public strategies;\\n    address[] public strategyList;\\n\\n    IERC20 public token;\\n    uint256 public creditAvailable;\\n    uint256 public totalDebt;\\n    uint256 public debtRatio;\\n\\n    event StrategyReported(\\n        address indexed strategy,\\n        uint256 gain,\\n        uint256 loss,\\n        uint256 debtPayment,\\n        uint256 totalDebt\\n    );\\n    event StrategyAdded(address indexed strategy, uint256 debtRatio);\\n    event StrategyRevoked(address indexed strategy);\\n\\n    constructor(address _token, uint256 _creditAvailable) {\\n        token = IERC20(_token);\\n        creditAvailable = _creditAvailable;\\n    }\\n\\n    function debtOutstanding() external view returns (uint256) {\\n        StrategyParams storage params = strategies[msg.sender];\\n\\n        uint256 target = (_getTotalAsset() * params.debtRatio) / BASE_PARAMS;\\n\\n        // console.log(\\\"debtOutstanding: totalStrategyDebt %s / target: %s / debtRatio: %s\\\", params.totalStrategyDebt, target, params.debtRatio);\\n\\n        if (target > params.totalStrategyDebt) return 0;\\n\\n        return (params.totalStrategyDebt - target);\\n    }\\n\\n    function report(\\n        uint256 gain,\\n        uint256 loss,\\n        uint256 debtPayment\\n    ) external {\\n        require(token.balanceOf(msg.sender) >= gain + debtPayment, \\\"72\\\");\\n\\n        StrategyParams storage params = strategies[msg.sender];\\n        // Updating parameters in the `perpetualManager`\\n        // This needs to be done now because it has implications in `_getTotalAsset()`\\n        params.totalStrategyDebt = params.totalStrategyDebt + gain - loss;\\n        totalDebt = totalDebt + gain - loss;\\n        params.lastReport = block.timestamp;\\n\\n        // Warning: `_getTotalAsset` could be manipulated by flashloan attacks.\\n        // It may allow external users to transfer funds into strategy or remove funds\\n        // from the strategy. Yet, as it does not impact the profit or loss and as attackers\\n        // have no interest in making such txs to have a direct profit, we let it as is.\\n        // The only issue is if the strategy is compromised; in this case governance\\n        // should revoke the strategy\\n        uint256 target = ((_getTotalAsset()) * params.debtRatio) / BASE_PARAMS;\\n        // console.log(\\\"PoolManager - report\\\");\\n        // console.log(\\\"_getTotalAsset %s / target %s\\\", _getTotalAsset(), target);\\n        if (target > params.totalStrategyDebt) {\\n            // If the strategy has some credit left, tokens can be transferred to this strategy\\n            uint256 available = Math.min(target - params.totalStrategyDebt, _getBalance());\\n            // console.log(\\\"available1 %s\\\", available);\\n            params.totalStrategyDebt = params.totalStrategyDebt + available;\\n            totalDebt = totalDebt + available;\\n            if (available > 0) {\\n                token.safeTransfer(msg.sender, available);\\n            }\\n        } else {\\n            uint256 available = Math.min(params.totalStrategyDebt - target, debtPayment + gain);\\n            // console.log(\\\"available2 %s\\\", available);\\n            params.totalStrategyDebt = params.totalStrategyDebt - available;\\n            totalDebt = totalDebt - available;\\n            if (available > 0) {\\n                token.safeTransferFrom(msg.sender, address(this), available);\\n            }\\n        }\\n        emit StrategyReported(msg.sender, gain, loss, debtPayment, params.totalStrategyDebt);\\n    }\\n\\n    function _getBalance() internal view returns (uint256) {\\n        return token.balanceOf(address(this));\\n    }\\n\\n    function getTotalAsset() external view returns (uint256) {\\n        return _getTotalAsset();\\n    }\\n\\n    function _getTotalAsset() internal view returns (uint256) {\\n        return _getBalance() + totalDebt;\\n    }\\n\\n    function addStrategy(address strategy, uint256 _debtRatio) external {\\n        StrategyParams storage params = strategies[strategy];\\n\\n        require(params.lastReport == 0, \\\"73\\\");\\n        require(address(this) == IStrategy(strategy).poolManager(), \\\"74\\\");\\n        // Using current code, this condition should always be verified as in the constructor\\n        // of the strategy the `want()` is set to the token of this `PoolManager`\\n        require(address(token) == IStrategy(strategy).want(), \\\"75\\\");\\n        require(debtRatio + _debtRatio <= BASE_PARAMS, \\\"76\\\");\\n\\n        // Add strategy to approved strategies\\n        params.lastReport = 1;\\n        params.totalStrategyDebt = 0;\\n        params.debtRatio = _debtRatio;\\n\\n        _grantRole(STRATEGY_ROLE, strategy);\\n\\n        // Update global parameters\\n        debtRatio += _debtRatio;\\n        emit StrategyAdded(strategy, debtRatio);\\n\\n        strategyList.push(strategy);\\n    }\\n\\n    function revokeStrategy(address strategy) external {\\n        StrategyParams storage params = strategies[strategy];\\n\\n        require(params.debtRatio == 0, \\\"77\\\");\\n        require(params.totalStrategyDebt == 0, \\\"77\\\");\\n        uint256 strategyListLength = strategyList.length;\\n        require(params.lastReport != 0 && strategyListLength >= 1, \\\"78\\\");\\n        // It has already been checked whether the strategy was a valid strategy\\n        for (uint256 i = 0; i < strategyListLength - 1; i++) {\\n            if (strategyList[i] == strategy) {\\n                strategyList[i] = strategyList[strategyListLength - 1];\\n                break;\\n            }\\n        }\\n\\n        strategyList.pop();\\n\\n        // Update global parameters\\n        debtRatio -= params.debtRatio;\\n        delete strategies[strategy];\\n\\n        _revokeRole(STRATEGY_ROLE, strategy);\\n\\n        emit StrategyRevoked(strategy);\\n    }\\n\\n    function updateStrategyDebtRatio(address strategy, uint256 _debtRatio) external {\\n        StrategyParams storage params = strategies[strategy];\\n        require(params.lastReport != 0, \\\"78\\\");\\n        debtRatio = debtRatio + _debtRatio - params.debtRatio;\\n        require(debtRatio <= BASE_PARAMS, \\\"76\\\");\\n        params.debtRatio = _debtRatio;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport \\\"./AaveLibraries.sol\\\";\\nimport \\\"./AaveInterfaces.sol\\\";\\nimport \\\"../BaseStrategyUpgradeable.sol\\\";\\nimport \\\"./ComputeProfitability.sol\\\";\\n\\n/// @title AaveFlashloanStrategy\\n/// @author Yearn Finance (https://etherscan.io/address/0xd4E94061183b2DBF24473F28A3559cf4dE4459Db#code)\\n/// but heavily reviewed and modified by Angle Core Team\\n/// @notice This strategy is used to optimize lending yield on Aave by taking some form or recursivity that is to say\\n/// by borrowing to maximize Aave rewards\\n/// @dev Angle strategies computes the optimal collateral ratio based on AAVE rewards for deposits and borrows\\n// solhint-disable-next-line max-states-count\\ncontract AaveFlashloanStrategy is BaseStrategyUpgradeable, IERC3156FlashBorrower {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    // =========================== Constant Addresses ==============================\\n\\n    /// @notice Router used for swaps\\n    address private constant _oneInch = 0x1111111254fb6c44bAC0beD2854e76F90643097d;\\n    /// @notice Chainlink oracle used to fetch data\\n    AggregatorV3Interface private constant _chainlinkOracle =\\n        AggregatorV3Interface(0x547a514d5e3769680Ce22B2361c10Ea13619e8a9);\\n\\n    // ========================== Aave Protocol Addresses ==========================\\n\\n    IAaveIncentivesController private constant _incentivesController =\\n        IAaveIncentivesController(0xd784927Ff2f95ba542BfC824c8a8a98F3495f6b5);\\n    ILendingPool private constant _lendingPool = ILendingPool(0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9);\\n    IProtocolDataProvider private constant _protocolDataProvider =\\n        IProtocolDataProvider(0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d);\\n\\n    // ============================== Token Addresses ==============================\\n\\n    address private constant _aave = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\\n    IStakedAave private constant _stkAave = IStakedAave(0x4da27a545c0c5B758a6BA100e3a049001de870f5);\\n    address private constant _weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address private constant _dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n\\n    // ============================== Ops Constants ================================\\n\\n    uint256 private constant _DEFAULT_COLLAT_TARGET_MARGIN = 0.02 ether;\\n    uint256 private constant _DEFAULT_COLLAT_MAX_MARGIN = 0.005 ether;\\n    uint256 private constant _LIQUIDATION_WARNING_THRESHOLD = 0.01 ether;\\n    uint256 private constant _BPS_WAD_RATIO = 1e14;\\n    uint256 private constant _COLLATERAL_RATIO_PRECISION = 1 ether;\\n    uint16 private constant _referral = 0;\\n\\n    // ========================= Aave Protocol Parameters ==========================\\n\\n    IReserveInterestRateStrategy private _interestRateStrategyAddress;\\n    uint256 public cooldownSeconds;\\n    uint256 public unstakeWindow;\\n    int256 public reserveFactor;\\n    int256 public slope1;\\n    int256 public slope2;\\n    int256 public r0;\\n    int256 public uOptimal;\\n\\n    // =============================== Parameters and Variables ====================\\n\\n    /// @notice Maximum the Aave protocol will let us borrow\\n    uint256 public maxBorrowCollatRatio;\\n    /// @notice LTV the strategy is going to lever up to\\n    uint256 public targetCollatRatio;\\n    /// @notice Closest to liquidation we'll risk\\n    uint256 public maxCollatRatio;\\n    /// @notice Parameter used for flash mints\\n    uint256 public daiBorrowCollatRatio;\\n    /// @notice Minimum amount to be moved before a deposit or a borrow\\n    uint256 public minWant;\\n    /// @notice Minimum gap between the collat ratio and the target collat ratio before\\n    /// rectifying it\\n    uint256 public minRatio;\\n    /// @notice Discount factor applied to the StkAAVE price\\n    uint256 public discountFactor;\\n    /// @notice Max number of iterations possible for the computation of the optimal lever\\n    uint8 public maxIterations;\\n\\n    struct BoolParams {\\n        // Whether collateral ratio will be automatically computed\\n        bool automaticallyComputeCollatRatio;\\n        // Whether Flash mint is active\\n        bool isFlashMintActive;\\n        // Whether we should check withdrawals\\n        bool withdrawCheck;\\n        // Whether StkAAVE should be sent to cooldown or simply swapped for Aave all the time\\n        bool cooldownStkAave;\\n    }\\n    /// @notice Struct with some boolean parameters of the contract\\n    /// These parameters are packed in a struct for efficiency of SLOAD operations\\n    BoolParams public boolParams;\\n\\n    // ========================= Supply and Borrow Tokens ==========================\\n\\n    IAToken private _aToken;\\n    IVariableDebtToken private _debtToken;\\n\\n    // ============================ Initializer ====================================\\n\\n    /// @notice Constructor of the `Strategy`\\n    /// @param _poolManager Address of the `PoolManager` lending to this strategy\\n    /// @param interestRateStrategyAddress_ Address of the `InterestRateStrategy` defining borrow rates for the collateral\\n    /// @param governor Governor address of the protocol\\n    /// @param guardian Address of the guardian\\n    /// @param keepers List of the addresses with keeper privilege\\n    function initialize(\\n        address _poolManager,\\n        IReserveInterestRateStrategy interestRateStrategyAddress_,\\n        address governor,\\n        address guardian,\\n        address[] memory keepers\\n    ) external {\\n        _initialize(_poolManager, governor, guardian, keepers);\\n\\n        // Then initializing operational state\\n        maxIterations = 6;\\n        // Setting mins\\n        minWant = 100;\\n        minRatio = 0.005 ether;\\n        discountFactor = 9000;\\n\\n        boolParams = BoolParams({\\n            automaticallyComputeCollatRatio: true,\\n            isFlashMintActive: true,\\n            withdrawCheck: false,\\n            cooldownStkAave: true\\n        });\\n\\n        _interestRateStrategyAddress = interestRateStrategyAddress_;\\n        // Setting reward params\\n        _setAavePoolVariables();\\n\\n        // Set AAVE tokens\\n        (address aToken_, , address debtToken_) = _protocolDataProvider.getReserveTokensAddresses(address(want));\\n        _aToken = IAToken(aToken_);\\n        _debtToken = IVariableDebtToken(debtToken_);\\n\\n        // Let collateral targets\\n        (uint256 ltv, uint256 liquidationThreshold) = _getProtocolCollatRatios(address(want));\\n        targetCollatRatio = liquidationThreshold - _DEFAULT_COLLAT_TARGET_MARGIN;\\n        maxCollatRatio = liquidationThreshold - _DEFAULT_COLLAT_MAX_MARGIN;\\n        maxBorrowCollatRatio = ltv - _DEFAULT_COLLAT_MAX_MARGIN;\\n        (uint256 daiLtv, ) = _getProtocolCollatRatios(_dai);\\n        daiBorrowCollatRatio = daiLtv - _DEFAULT_COLLAT_MAX_MARGIN;\\n\\n        // Performing all the different approvals possible\\n        _approveMaxSpend(address(want), address(_lendingPool));\\n        _approveMaxSpend(aToken_, address(_lendingPool));\\n        // Approve flashloan spend\\n        _approveMaxSpend(_dai, FlashMintLib.LENDER);\\n        // Approve swap router spend\\n        _approveMaxSpend(address(_stkAave), _oneInch);\\n        _approveMaxSpend(_aave, _oneInch);\\n        if (address(want) != _dai) {\\n            _approveMaxSpend(_dai, address(_lendingPool));\\n        }\\n    }\\n\\n    // ======================= Helper View Functions ===============================\\n\\n    /// @notice Estimates the total assets controlled by the strategy\\n    /// @dev It sums the effective deposit amount to the rewards accumulated\\n    function estimatedTotalAssets() public view override returns (uint256) {\\n        (uint256 deposits, uint256 borrows) = getCurrentPosition();\\n        return\\n            _balanceOfWant() +\\n            deposits -\\n            borrows +\\n            _estimatedStkAaveToWant(\\n                _balanceOfStkAave() +\\n                    _balanceOfAave() +\\n                    _incentivesController.getRewardsBalance(_getAaveAssets(), address(this))\\n            );\\n    }\\n\\n    /// @notice Get the current position of the strategy: that is to say the amount deposited\\n    /// and the amount borrowed on Aave\\n    /// @dev The actual amount brought is `deposits - borrows`\\n    function getCurrentPosition() public view returns (uint256 deposits, uint256 borrows) {\\n        deposits = _balanceOfAToken();\\n        borrows = _balanceOfDebtToken();\\n    }\\n\\n    // ====================== Internal Strategy Functions ==========================\\n\\n    /// @notice Frees up profit plus `_debtOutstanding`.\\n    /// @param _debtOutstanding Amount to withdraw\\n    /// @return _profit Profit freed by the call\\n    /// @return _loss Loss discovered by the call\\n    /// @return _debtPayment Amount freed to reimburse the debt\\n    /// @dev If `_debtOutstanding` is more than we can free we get as much as possible.\\n    function _prepareReturn(uint256 _debtOutstanding)\\n        internal\\n        override\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _debtPayment\\n        )\\n    {\\n        // account for profit / losses\\n        uint256 totalDebt = poolManager.strategies(address(this)).totalStrategyDebt;\\n\\n        // Assets immediately convertible to want only\\n        uint256 amountAvailable = _balanceOfWant();\\n        (uint256 deposits, uint256 borrows) = getCurrentPosition();\\n        uint256 totalAssets = amountAvailable + deposits - borrows;\\n\\n        if (totalDebt > totalAssets) {\\n            // we have losses\\n            _loss = totalDebt - totalAssets;\\n        } else {\\n            // we have profit\\n            _profit = totalAssets - totalDebt;\\n        }\\n\\n        // free funds to repay debt + profit to the strategy\\n        uint256 amountRequired = _debtOutstanding + _profit;\\n\\n        if (amountRequired > amountAvailable) {\\n            // we need to free funds\\n            // we dismiss losses here, they cannot be generated from withdrawal\\n            // but it is possible for the strategy to unwind full position\\n            (amountAvailable, ) = _liquidatePosition(amountRequired, amountAvailable, deposits, borrows);\\n\\n            if (amountAvailable >= amountRequired) {\\n                _debtPayment = _debtOutstanding;\\n                // profit remains unchanged unless there is not enough to pay it\\n                if (amountRequired - _debtPayment < _profit) {\\n                    _profit = amountRequired - _debtPayment;\\n                }\\n            } else {\\n                // we were not able to free enough funds\\n                if (amountAvailable < _debtOutstanding) {\\n                    // available funds are lower than the repayment that we need to do\\n                    _profit = 0;\\n                    _debtPayment = amountAvailable;\\n                    // we dont report losses here as the strategy might not be able to return in this harvest\\n                    // but it will still be there for the next harvest\\n                } else {\\n                    // NOTE: amountRequired is always equal or greater than _debtOutstanding\\n                    // important to use amountRequired just in case amountAvailable is > amountAvailable\\n                    _debtPayment = _debtOutstanding;\\n                    _profit = amountAvailable - _debtPayment;\\n                }\\n            }\\n        } else {\\n            _debtPayment = _debtOutstanding;\\n            // profit remains unchanged unless there is not enough to pay it\\n            if (amountRequired - _debtPayment < _profit) {\\n                _profit = amountRequired - _debtPayment;\\n            }\\n        }\\n    }\\n\\n    /// @notice Function called by _harvest()\\n    function _adjustPosition() internal override {\\n        _adjustPosition(type(uint256).max);\\n    }\\n\\n    /// @notice Function called by _adjustPosition()\\n    /// @param guessedBorrow First guess to the borrow amount to maximise revenue\\n    /// @dev It computes the optimal collateral ratio and adjusts deposits/borrows accordingly\\n    function _adjustPosition(uint256 guessedBorrow) internal override {\\n        uint256 _debtOutstanding = poolManager.debtOutstanding();\\n\\n        uint256 wantBalance = _balanceOfWant();\\n        // deposit available want as collateral\\n        if (wantBalance > _debtOutstanding && wantBalance - _debtOutstanding > minWant) {\\n            _depositCollateral(wantBalance - _debtOutstanding);\\n            // Updating the `wantBalance` value\\n            wantBalance = _balanceOfWant();\\n        }\\n\\n        (uint256 deposits, uint256 borrows) = getCurrentPosition();\\n        guessedBorrow = (guessedBorrow == type(uint256).max) ? borrows : guessedBorrow;\\n        uint256 _targetCollatRatio;\\n        if (boolParams.automaticallyComputeCollatRatio) {\\n            _targetCollatRatio = _computeOptimalCollatRatio(\\n                wantBalance + deposits - borrows,\\n                deposits,\\n                borrows,\\n                guessedBorrow\\n            );\\n        } else {\\n            _targetCollatRatio = targetCollatRatio;\\n        }\\n\\n        // check current position\\n        uint256 currentCollatRatio = _getCollatRatio(deposits, borrows);\\n\\n        // Either we need to free some funds OR we want to be max levered\\n        if (_debtOutstanding > wantBalance) {\\n            // we should free funds\\n            uint256 amountRequired = _debtOutstanding - wantBalance;\\n\\n            // NOTE: vault will take free funds during the next harvest\\n            _freeFunds(amountRequired, deposits, borrows);\\n        } else if (currentCollatRatio < _targetCollatRatio) {\\n            // we should lever up\\n            if (_targetCollatRatio - currentCollatRatio > minRatio) {\\n                // we only act on relevant differences\\n                _leverMax(deposits, borrows);\\n            }\\n        } else if (currentCollatRatio > _targetCollatRatio) {\\n            if (currentCollatRatio - _targetCollatRatio > minRatio) {\\n                uint256 newBorrow = _getBorrowFromSupply(deposits - borrows, _targetCollatRatio);\\n                _leverDownTo(newBorrow, deposits, borrows);\\n            }\\n        }\\n    }\\n\\n    /// @notice Liquidates `_amountNeeded` from a position\\n    /// @dev For gas efficiency this function calls another internal function\\n    function _liquidatePosition(uint256 _amountNeeded) internal override returns (uint256, uint256) {\\n        (uint256 deposits, uint256 borrows) = getCurrentPosition();\\n        return _liquidatePosition(_amountNeeded, _balanceOfWant(), deposits, borrows);\\n    }\\n\\n    /// @notice Withdraws `_amountNeeded` of `want` from Aave\\n    /// @param _amountNeeded Amount of `want` to free\\n    /// @return _liquidatedAmount Amount of `want` available\\n    /// @return _loss Difference between `_amountNeeded` and what is actually available\\n    function _liquidatePosition(\\n        uint256 _amountNeeded,\\n        uint256 wantBalance,\\n        uint256 deposits,\\n        uint256 borrows\\n    ) internal returns (uint256 _liquidatedAmount, uint256 _loss) {\\n        // NOTE: Maintain invariant `want.balanceOf(this) >= _liquidatedAmount`\\n        // NOTE: Maintain invariant `_liquidatedAmount + _loss <= _amountNeeded`\\n        if (wantBalance > _amountNeeded) {\\n            // if there is enough free want, let's use it\\n            return (_amountNeeded, 0);\\n        }\\n\\n        // we need to free funds\\n        uint256 amountRequired = _amountNeeded - wantBalance;\\n        _freeFunds(amountRequired, deposits, borrows);\\n        // Updating the `wantBalance` variable\\n        wantBalance = _balanceOfWant();\\n        if (_amountNeeded > wantBalance) {\\n            _liquidatedAmount = wantBalance;\\n            uint256 diff = _amountNeeded - _liquidatedAmount;\\n            if (diff <= minWant) {\\n                _loss = diff;\\n            }\\n        } else {\\n            _liquidatedAmount = _amountNeeded;\\n        }\\n\\n        if (boolParams.withdrawCheck) {\\n            require(_amountNeeded == _liquidatedAmount + _loss, \\\"54\\\"); // dev: withdraw safety check\\n        }\\n    }\\n\\n    /// @notice Withdraw as much as we can from Aave\\n    /// @return _amountFreed Amount successfully freed\\n    function _liquidateAllPositions() internal override returns (uint256 _amountFreed) {\\n        (_amountFreed, ) = _liquidatePosition(type(uint256).max);\\n    }\\n\\n    function _protectedTokens() internal view override returns (address[] memory) {}\\n\\n    // ============================== Setters ======================================\\n\\n    /// @notice Sets collateral targets and value for collateral ratio\\n    function setCollateralTargets(\\n        uint256 _targetCollatRatio,\\n        uint256 _maxCollatRatio,\\n        uint256 _maxBorrowCollatRatio,\\n        uint256 _daiBorrowCollatRatio\\n    ) external onlyRole(GUARDIAN_ROLE) {\\n        (uint256 ltv, uint256 liquidationThreshold) = _getProtocolCollatRatios(address(want));\\n        (uint256 daiLtv, ) = _getProtocolCollatRatios(_dai);\\n        require(\\n            _targetCollatRatio < liquidationThreshold &&\\n                _maxCollatRatio < liquidationThreshold &&\\n                _targetCollatRatio < _maxCollatRatio &&\\n                _maxBorrowCollatRatio < ltv &&\\n                _daiBorrowCollatRatio < daiLtv,\\n            \\\"8\\\"\\n        );\\n\\n        targetCollatRatio = _targetCollatRatio;\\n        maxCollatRatio = _maxCollatRatio;\\n        maxBorrowCollatRatio = _maxBorrowCollatRatio;\\n        daiBorrowCollatRatio = _daiBorrowCollatRatio;\\n    }\\n\\n    /// @notice Sets `minWant`, `minRatio` and `maxItrations` values\\n    function setMinsAndMaxs(\\n        uint256 _minWant,\\n        uint256 _minRatio,\\n        uint8 _maxIterations\\n    ) external onlyRole(GUARDIAN_ROLE) {\\n        require(_minRatio < maxBorrowCollatRatio && _maxIterations > 0 && _maxIterations < 16, \\\"8\\\");\\n        minWant = _minWant;\\n        minRatio = _minRatio;\\n        maxIterations = _maxIterations;\\n    }\\n\\n    /// @notice Sets all boolean parameters related to cooldown, withdraw check, flash loan and so on\\n    function setBoolParams(BoolParams memory _boolParams) external onlyRole(GUARDIAN_ROLE) {\\n        boolParams = _boolParams;\\n    }\\n\\n    /// @notice Sets the discount factor for the StkAAVE price\\n    function setDiscountFactor(uint256 _discountFactor) external onlyRole(GUARDIAN_ROLE) {\\n        require(_discountFactor < 10000, \\\"4\\\");\\n        discountFactor = _discountFactor;\\n    }\\n\\n    /// @notice Retrieves lending pool variables for `want`. Those variables are mostly used in the function\\n    /// to compute the optimal borrow amount\\n    /// @dev No access control needed because they fetch the values from Aave directly.\\n    /// If it changes there, it will need to be updated here too\\n    /// @dev We expect the values concerned not to be often modified\\n    function setAavePoolVariables() external {\\n        _setAavePoolVariables();\\n    }\\n\\n    // ========================== External Actions =================================\\n\\n    /// @notice Emergency function that we can use to deleverage manually if something is broken\\n    /// @param amount Amount of `want` to withdraw/repay\\n    function manualDeleverage(uint256 amount) external onlyRole(GUARDIAN_ROLE) {\\n        _withdrawCollateral(amount);\\n        _repayWant(amount);\\n    }\\n\\n    /// @notice Emergency function that we can use to deleverage manually if something is broken\\n    /// @param amount Amount of `want` to withdraw\\n    function manualReleaseWant(uint256 amount) external onlyRole(GUARDIAN_ROLE) {\\n        _withdrawCollateral(amount);\\n    }\\n\\n    /// @notice Adds a new guardian address\\n    /// @param _guardian New guardian address\\n    function addGuardian(address _guardian) external override onlyRole(POOLMANAGER_ROLE) {\\n        // Granting the new role\\n        // Access control for this contract\\n        _grantRole(GUARDIAN_ROLE, _guardian);\\n    }\\n\\n    /// @notice Revokes the guardian role\\n    /// @param guardian Old guardian address to revoke\\n    function revokeGuardian(address guardian) external override onlyRole(POOLMANAGER_ROLE) {\\n        _revokeRole(GUARDIAN_ROLE, guardian);\\n    }\\n\\n    /// @notice Swap earned stkAave or Aave for `want` through 1Inch\\n    /// @param minAmountOut Minimum amount of `want` to receive for the swap to happen\\n    /// @param payload Bytes needed for 1Inch API. Tokens swapped should be: stkAave -> `want` or Aave -> `want`\\n    function sellRewards(\\n        uint256 minAmountOut,\\n        bytes memory payload\\n    ) external onlyRole(KEEPER_ROLE) {\\n        //solhint-disable-next-line\\n        (bool success, bytes memory result) = _oneInch.call(payload);\\n        if (!success) _revertBytes(result);\\n\\n        uint256 amountOut = abi.decode(result, (uint256));\\n        require(amountOut >= minAmountOut, \\\"15\\\");\\n    }\\n\\n    /// @notice Flashload callback, as defined by EIP-3156\\n    /// @notice We check that the call is coming from the DAI lender and then execute the load logic\\n    /// @dev If everything went smoothly, will return `keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\")`\\n    function onFlashLoan(\\n        address initiator,\\n        address,\\n        uint256 amount,\\n        uint256,\\n        bytes calldata data\\n    ) external override returns (bytes32) {\\n        require(msg.sender == FlashMintLib.LENDER && initiator == address(this), \\\"1\\\");\\n        (bool deficit, uint256 amountWant) = abi.decode(data, (bool, uint256));\\n\\n        return FlashMintLib.loanLogic(deficit, amountWant, amount, address(want));\\n    }\\n\\n    // ========================== Internal Actions =================================\\n\\n    /// @notice Claim earned stkAAVE (only called at `harvest`)\\n    /// @dev stkAAVE require a \\\"cooldown\\\" period of 10 days before being claimed\\n    function _claimRewards() internal returns (uint256 stkAaveBalance) {\\n        stkAaveBalance = _balanceOfStkAave();\\n        uint256 cooldownStatus;\\n        if (stkAaveBalance > 0) {\\n            cooldownStatus = _checkCooldown(); // don't check status if we have no stkAave\\n        }\\n\\n        // If it's the claim period claim\\n        if (stkAaveBalance > 0 && cooldownStatus == 1) {\\n            // redeem AAVE from stkAave\\n            _stkAave.claimRewards(address(this), type(uint256).max);\\n            _stkAave.redeem(address(this), stkAaveBalance);\\n        }\\n\\n        // claim stkAave from lending and borrowing, this will reset the cooldown\\n        _incentivesController.claimRewards(_getAaveAssets(), type(uint256).max, address(this));\\n\\n        stkAaveBalance = _balanceOfStkAave();\\n\\n        // request start of cooldown period, if there's no cooldown in progress\\n        if (boolParams.cooldownStkAave && stkAaveBalance > 0 && cooldownStatus == 0) {\\n            _stkAave.cooldown();\\n        }\\n    }\\n\\n    function claimRewards() external onlyRole(KEEPER_ROLE) {\\n        _claimRewards();\\n    }\\n\\n    /// @notice Reduce exposure by withdrawing funds and repaying debt\\n    /// @param amountToFree Amount of `want` to withdraw/repay\\n    /// @return balance Current balance of `want`\\n    /// @dev `deposits` and `borrows` are always computed prior to the call\\n    function _freeFunds(\\n        uint256 amountToFree,\\n        uint256 deposits,\\n        uint256 borrows\\n    ) internal returns (uint256) {\\n        if (amountToFree == 0) return 0;\\n\\n        uint256 realAssets = deposits - borrows;\\n        uint256 newBorrow = _getBorrowFromSupply(realAssets - Math.min(amountToFree, realAssets), targetCollatRatio);\\n\\n        // repay required amount\\n        _leverDownTo(newBorrow, deposits, borrows);\\n\\n        return _balanceOfWant();\\n    }\\n\\n    /// @notice Get exposure up to `targetCollatRatio`\\n    function _leverMax(uint256 deposits, uint256 borrows) internal {\\n        uint256 totalAmountToBorrow = _getBorrowFromSupply(deposits - borrows, targetCollatRatio) - borrows;\\n\\n        if (boolParams.isFlashMintActive) {\\n            // The best approach is to lever up using regular method, then finish with flash loan\\n            totalAmountToBorrow = totalAmountToBorrow - _leverUpStep(totalAmountToBorrow, deposits, borrows);\\n\\n            if (totalAmountToBorrow > minWant) {\\n                totalAmountToBorrow = totalAmountToBorrow - _leverUpFlashLoan(totalAmountToBorrow);\\n            }\\n        } else {\\n            for (uint8 i = 0; i < maxIterations && totalAmountToBorrow > minWant; i++) {\\n                totalAmountToBorrow = totalAmountToBorrow - _leverUpStep(totalAmountToBorrow, deposits, borrows);\\n                deposits = 0;\\n                borrows = 0;\\n            }\\n        }\\n    }\\n\\n    /// @notice Use a flashloan to increase our exposure in `want` on Aave\\n    /// @param amount Amount we will deposit and borrow on Aave\\n    /// @return amount Actual amount deposited/borrowed\\n    /// @dev Amount returned should equal `amount` but can be lower if we try to flashloan more than `maxFlashLoan` authorized\\n    function _leverUpFlashLoan(uint256 amount) internal returns (uint256) {\\n        (uint256 deposits, uint256 borrows) = getCurrentPosition();\\n        uint256 depositsToMeetLtv = _getDepositFromBorrow(borrows, maxBorrowCollatRatio, deposits);\\n        uint256 depositsDeficitToMeetLtv = 0;\\n        if (depositsToMeetLtv > deposits) {\\n            depositsDeficitToMeetLtv = depositsToMeetLtv - deposits;\\n        }\\n        return FlashMintLib.doFlashMint(false, amount, address(want), daiBorrowCollatRatio, depositsDeficitToMeetLtv);\\n    }\\n\\n    /// @notice Increase exposure in `want`\\n    /// @param amount Amount of `want` to borrow\\n    /// @return amount Amount of `want` that was borrowed\\n    function _leverUpStep(\\n        uint256 amount,\\n        uint256 deposits,\\n        uint256 borrows\\n    ) internal returns (uint256) {\\n        if (deposits == 0 && borrows == 0) (deposits, borrows) = getCurrentPosition();\\n\\n        uint256 wantBalance = _balanceOfWant();\\n\\n        uint256 canBorrow = _getBorrowFromDeposit(deposits + wantBalance, maxBorrowCollatRatio);\\n\\n        if (canBorrow <= borrows) {\\n            return 0;\\n        }\\n        canBorrow = canBorrow - borrows;\\n\\n        if (canBorrow < amount) {\\n            amount = canBorrow;\\n        }\\n\\n        _depositCollateral(wantBalance);\\n        _borrowWant(amount);\\n        _depositCollateral(amount);\\n\\n        return amount;\\n    }\\n\\n    /// @notice Reduce our exposure to `want` on Aave\\n    /// @param newAmountBorrowed Total amount we want to be borrowing\\n    /// @param deposits Amount currently lent\\n    /// @param currentBorrowed Amount currently borrowed\\n    function _leverDownTo(\\n        uint256 newAmountBorrowed,\\n        uint256 deposits,\\n        uint256 currentBorrowed\\n    ) internal {\\n        if (currentBorrowed > newAmountBorrowed) {\\n            uint256 totalRepayAmount = currentBorrowed - newAmountBorrowed;\\n\\n            if (boolParams.isFlashMintActive) {\\n                totalRepayAmount = totalRepayAmount - _leverDownFlashLoan(totalRepayAmount, currentBorrowed);\\n            }\\n\\n            uint256 _maxCollatRatio = maxCollatRatio;\\n\\n            // in case the flashloan didn't repay the entire amount we have to repay it \\\"manually\\\"\\n            // by withdrawing a bit of collateral and then repaying the debt with it\\n            for (uint8 i = 0; i < maxIterations && totalRepayAmount > minWant; i++) {\\n                _withdrawExcessCollateral(_maxCollatRatio, 0, 0);\\n                uint256 toRepay = totalRepayAmount;\\n                uint256 wantBalance = _balanceOfWant();\\n                if (toRepay > wantBalance) {\\n                    toRepay = wantBalance;\\n                }\\n                uint256 repaid = _repayWant(toRepay);\\n                totalRepayAmount = totalRepayAmount - repaid;\\n            }\\n            (deposits, currentBorrowed) = getCurrentPosition();\\n        }\\n\\n        // Deposit back to get `targetCollatRatio` (we always need to leave this in this ratio)\\n        uint256 _targetCollatRatio = targetCollatRatio;\\n        uint256 targetDeposit = _getDepositFromBorrow(currentBorrowed, _targetCollatRatio, deposits);\\n        if (targetDeposit > deposits) {\\n            uint256 toDeposit = targetDeposit - deposits;\\n            if (toDeposit > minWant) {\\n                _depositCollateral(Math.min(toDeposit, _balanceOfWant()));\\n            }\\n        } else {\\n            if (deposits - targetDeposit > minWant) {\\n                _withdrawExcessCollateral(_targetCollatRatio, deposits, currentBorrowed);\\n            }\\n        }\\n    }\\n\\n    /// @notice Use a flashloan to reduce our exposure in `want` on Aave\\n    /// @param amount Amount we will need to withdraw and repay to Aave\\n    /// @return amount Actual amount repaid\\n    /// @dev Amount returned should equal `amount` but can be lower if we try to flashloan more than `maxFlashLoan` authorized\\n    /// @dev `amount` will be withdrawn from deposits and then used to repay borrows\\n    function _leverDownFlashLoan(uint256 amount, uint256 borrows) internal returns (uint256) {\\n        if (amount <= minWant) return 0;\\n        if (amount > borrows) {\\n            amount = borrows;\\n        }\\n        return FlashMintLib.doFlashMint(true, amount, address(want), daiBorrowCollatRatio, 0);\\n    }\\n\\n    /// @notice Adjusts the deposits based on the wanted collateral ratio (does not touch the borrow)\\n    /// @param collatRatio Collateral ratio to target\\n    function _withdrawExcessCollateral(\\n        uint256 collatRatio,\\n        uint256 deposits,\\n        uint256 borrows\\n    ) internal returns (uint256 amount) {\\n        if (deposits == 0 && borrows == 0) (deposits, borrows) = getCurrentPosition();\\n        uint256 theoDeposits = _getDepositFromBorrow(borrows, collatRatio, deposits);\\n        if (deposits > theoDeposits) {\\n            uint256 toWithdraw = deposits - theoDeposits;\\n            return _withdrawCollateral(toWithdraw);\\n        }\\n    }\\n\\n    /// @notice Deposit `want` tokens in Aave and start earning interests\\n    /// @param amount Amount to be deposited\\n    /// @return amount The amount deposited\\n    function _depositCollateral(uint256 amount) internal returns (uint256) {\\n        if (amount == 0) return 0;\\n        _lendingPool.deposit(address(want), amount, address(this), _referral);\\n        return amount;\\n    }\\n\\n    /// @notice Withdraw `want` tokens from Aave\\n    /// @param amount Amount to be withdrawn\\n    /// @return amount The amount withdrawn\\n    function _withdrawCollateral(uint256 amount) internal returns (uint256) {\\n        if (amount == 0) return 0;\\n        _lendingPool.withdraw(address(want), amount, address(this));\\n        return amount;\\n    }\\n\\n    /// @notice Repay what we borrowed of `want` from Aave\\n    /// @param amount Amount to repay\\n    /// @return amount The amount repaid\\n    /// @dev `interestRateMode` is set to variable rate (2)\\n    function _repayWant(uint256 amount) internal returns (uint256) {\\n        if (amount == 0) return 0;\\n        return _lendingPool.repay(address(want), amount, 2, address(this));\\n    }\\n\\n    /// @notice Borrow `want` from Aave\\n    /// @param amount Amount of `want` we are borrowing\\n    /// @return amount The amount borrowed\\n    /// @dev The third variable is the `interestRateMode`\\n    /// @dev set at 2 which means we will get a variable interest rate on our borrowed tokens\\n    function _borrowWant(uint256 amount) internal returns (uint256) {\\n        _lendingPool.borrow(address(want), amount, 2, _referral, address(this));\\n        return amount;\\n    }\\n\\n    /// @notice Computes the optimal collateral ratio based on current interests and incentives on Aave\\n    /// @notice It modifies the state by updating the `targetCollatRatio`\\n    function _computeOptimalCollatRatio(\\n        uint256 balanceExcludingRewards,\\n        uint256 deposits,\\n        uint256 currentBorrowed,\\n        uint256 guessedBorrow\\n    ) internal returns (uint256) {\\n        uint256 borrow = _computeMostProfitableBorrow(\\n            balanceExcludingRewards,\\n            deposits,\\n            currentBorrowed,\\n            guessedBorrow\\n        );\\n        uint256 _collatRatio = _getCollatRatio(balanceExcludingRewards + borrow, borrow);\\n        uint256 _maxCollatRatio = maxCollatRatio;\\n        if (_collatRatio > _maxCollatRatio) {\\n            _collatRatio = _maxCollatRatio;\\n        }\\n        targetCollatRatio = _collatRatio;\\n        return _collatRatio;\\n    }\\n\\n    /// @notice Approve `spender` maxuint of `token`\\n    /// @param token Address of token to approve\\n    /// @param spender Address of spender to approve\\n    function _approveMaxSpend(address token, address spender) internal {\\n        IERC20(token).safeApprove(spender, type(uint256).max);\\n    }\\n\\n    /// @notice Internal version of the `_setAavePoolVariables`\\n    function _setAavePoolVariables() internal {\\n        (, , , , uint256 reserveFactor_, , , , , ) = _protocolDataProvider.getReserveConfigurationData(address(want));\\n        cooldownSeconds = IStakedAave(_stkAave).COOLDOWN_SECONDS();\\n        unstakeWindow = IStakedAave(_stkAave).UNSTAKE_WINDOW();\\n        reserveFactor = int256(reserveFactor_ * 10**23);\\n        slope1 = int256(_interestRateStrategyAddress.variableRateSlope1());\\n        slope2 = int256(_interestRateStrategyAddress.variableRateSlope2());\\n        r0 = int256(_interestRateStrategyAddress.baseVariableBorrowRate());\\n        uOptimal = int256(_interestRateStrategyAddress.OPTIMAL_UTILIZATION_RATE());\\n    }\\n\\n    // ========================= Internal View Functions ===========================\\n\\n    /// @notice Computes the optimal amounts to borrow based on current interest rates and incentives\\n    /// @dev Returns optimal `borrow` amount in base of `want`\\n    function _computeMostProfitableBorrow(\\n        uint256 balanceExcludingRewards,\\n        uint256 deposits,\\n        uint256 currentBorrow,\\n        uint256 guessedBorrow\\n    ) internal view returns (uint256 borrow) {\\n        // This works if `wantBase < 10**27` which we should expect to be very the case for the strategies we are\\n        // launching at the moment\\n        uint256 normalizationFactor = 10**27 / wantBase;\\n\\n        ComputeProfitability.SCalculateBorrow memory parameters;\\n\\n        {\\n            (\\n                uint256 availableLiquidity,\\n                uint256 totalStableDebt,\\n                uint256 totalVariableDebt,\\n                ,\\n                ,\\n                ,\\n                uint256 averageStableBorrowRate,\\n                ,\\n                ,\\n\\n            ) = _protocolDataProvider.getReserveData(address(want));\\n\\n            parameters = ComputeProfitability.SCalculateBorrow({\\n                reserveFactor: reserveFactor,\\n                totalStableDebt: int256(totalStableDebt * normalizationFactor),\\n                totalVariableDebt: int256((totalVariableDebt - currentBorrow) * normalizationFactor),\\n                totalDeposits: int256(\\n                    (availableLiquidity +\\n                        totalStableDebt +\\n                        totalVariableDebt +\\n                        // to adapt to our future balance\\n                        // add the wantBalance and remove the currentBorrowed from the optimisation\\n                        balanceExcludingRewards -\\n                        deposits) * normalizationFactor\\n                ),\\n                stableBorrowRate: int256(averageStableBorrowRate),\\n                rewardDeposit: 0,\\n                rewardBorrow: 0,\\n                strategyAssets: int256(balanceExcludingRewards * normalizationFactor),\\n                guessedBorrowAssets: int256(guessedBorrow * normalizationFactor),\\n                slope1: slope1,\\n                slope2: slope2,\\n                r0: r0,\\n                uOptimal: uOptimal\\n            });\\n        }\\n\\n        {\\n            uint256 stkAavePriceInWant = _estimatedStkAaveToWant(1 ether);\\n\\n            (uint256 emissionPerSecondAToken, , ) = _incentivesController.assets(address(_aToken));\\n            (uint256 emissionPerSecondDebtToken, , ) = _incentivesController.assets(address(_debtToken));\\n\\n            parameters.rewardDeposit = int256(\\n                (emissionPerSecondAToken * 86400 * 365 * stkAavePriceInWant * 10**9) / wantBase\\n            );\\n            parameters.rewardBorrow = int256(\\n                (emissionPerSecondDebtToken * 86400 * 365 * stkAavePriceInWant * 10**9) / wantBase\\n            );\\n        }\\n\\n        borrow = uint256(ComputeProfitability.computeProfitability(parameters)) / normalizationFactor;\\n    }\\n\\n    function estimatedAPR() public view returns (uint256) {\\n        (\\n            ,\\n            ,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            ,\\n            ,\\n            ,\\n            ,\\n\\n        ) = _protocolDataProvider.getReserveData(address(want));\\n        (uint256 deposits, uint256 borrows) = getCurrentPosition();\\n        uint256 yearlyRewardsATokenInUSDC;\\n        uint256 yearlyRewardsDebtTokenInUSDC;\\n        {\\n            uint256 stkAavePriceInWant = _estimatedStkAaveToWant(1 ether);\\n            (uint256 emissionPerSecondAToken, , ) = (_aToken.getIncentivesController()).assets(address(_aToken));\\n            (uint256 emissionPerSecondDebtToken, , ) = (_debtToken.getIncentivesController()).assets(\\n                address(_debtToken)\\n            );\\n\\n            uint256 yearlyEmissionsAToken = emissionPerSecondAToken * 60 * 60 * 24 * 365; // BASE: 18\\n            uint256 yearlyEmissionsDebtToken = emissionPerSecondDebtToken * 60 * 60 * 24 * 365; // BASE: 18\\n            yearlyRewardsATokenInUSDC = ((deposits * yearlyEmissionsAToken * stkAavePriceInWant * 10**9) /\\n                _aToken.totalSupply()); // BASE 27 + want\\n            yearlyRewardsDebtTokenInUSDC = ((borrows * yearlyEmissionsDebtToken * stkAavePriceInWant * 10**9) /\\n                totalVariableDebt); // BASE 27 + want\\n        }\\n\\n        uint256 _totalAssets = _balanceOfWant() + _balanceOfAToken() - _balanceOfDebtToken();\\n        return\\n            (liquidityRate *\\n                deposits +\\n                yearlyRewardsATokenInUSDC +\\n                yearlyRewardsDebtTokenInUSDC -\\n                variableBorrowRate *\\n                borrows) /\\n            _totalAssets /\\n            10**18; // BASE 9\\n    }\\n\\n    /// @notice Returns the `want` balance\\n    function _balanceOfWant() internal view returns (uint256) {\\n        return want.balanceOf(address(this));\\n    }\\n\\n    /// @notice Returns the `aToken` balance\\n    function _balanceOfAToken() internal view returns (uint256) {\\n        return _aToken.balanceOf(address(this));\\n    }\\n\\n    /// @notice Returns the `debtToken` balance\\n    function _balanceOfDebtToken() internal view returns (uint256) {\\n        return _debtToken.balanceOf(address(this));\\n    }\\n\\n    /// @notice Returns the `AAVE` balance\\n    function _balanceOfAave() internal view returns (uint256) {\\n        return IERC20(_aave).balanceOf(address(this));\\n    }\\n\\n    /// @notice Returns the `StkAAVE` balance\\n    function _balanceOfStkAave() internal view returns (uint256) {\\n        return IERC20(address(_stkAave)).balanceOf(address(this));\\n    }\\n\\n    /// @notice Estimate the amount of `want` we will get out by swapping it for AAVE\\n    /// @param amount Amount of AAVE we want to exchange (in base 18)\\n    /// @return amount Amount of `want` we are getting. We include a discount to account for slippage equal to 9000\\n    /// @dev Uses Chainlink spot price. Return value will be in base of `want` (6 for USDC)\\n    function _estimatedStkAaveToWant(uint256 amount) internal view returns (uint256) {\\n        (, int256 aavePriceUSD, , , ) = _chainlinkOracle.latestRoundData(); // stkAavePriceUSD is in base 8\\n        // `aavePriceUSD` is in base 8, and the discount factor is in base 4, so ultimately we need to divide\\n        // by `1e(18+8+4)\\n        return (uint256(aavePriceUSD) * amount * wantBase * discountFactor) / 1e30;\\n    }\\n\\n    /// @notice Verifies the cooldown status for earned stkAAVE\\n    /// @return cooldownStatus Status of the coolDown: if it is 0 then there is no cooldown Status, if it is 1 then\\n    /// the strategy should claim\\n    function _checkCooldown() internal view returns (uint256 cooldownStatus) {\\n        uint256 cooldownStartTimestamp = IStakedAave(_stkAave).stakersCooldowns(address(this));\\n        uint256 nextClaimStartTimestamp = cooldownStartTimestamp + cooldownSeconds;\\n        if (cooldownStartTimestamp == 0) {\\n            return 0;\\n        }\\n        if (block.timestamp > nextClaimStartTimestamp && block.timestamp <= nextClaimStartTimestamp + unstakeWindow) {\\n            return 1;\\n        }\\n        if (block.timestamp < nextClaimStartTimestamp) {\\n            return 2;\\n        }\\n    }\\n\\n    /// @notice Get the deposit and debt token for our `want` token\\n    function _getAaveAssets() internal view returns (address[] memory assets) {\\n        assets = new address[](2);\\n        assets[0] = address(_aToken);\\n        assets[1] = address(_debtToken);\\n    }\\n\\n    /// @notice Get Aave ratios for a token in order to compute later our collateral ratio\\n    /// @param token Address of the token for which to check the ratios (usually `want` token)\\n    /// @dev `getReserveConfigurationData` returns values in base 4. So here `ltv` and `liquidationThreshold` are returned in base 18\\n    function _getProtocolCollatRatios(address token) internal view returns (uint256 ltv, uint256 liquidationThreshold) {\\n        (, ltv, liquidationThreshold, , , , , , , ) = _protocolDataProvider.getReserveConfigurationData(token);\\n        // convert bps to wad\\n        ltv = ltv * _BPS_WAD_RATIO;\\n        liquidationThreshold = liquidationThreshold * _BPS_WAD_RATIO;\\n    }\\n\\n    // ========================= Internal Pure Functions ===========================\\n\\n    /// @notice Get target borrow amount based on deposit and collateral ratio\\n    /// @param deposit Current total deposited on Aave\\n    /// @param collatRatio Collateral ratio to target\\n    function _getBorrowFromDeposit(uint256 deposit, uint256 collatRatio) internal pure returns (uint256) {\\n        return (deposit * collatRatio) / _COLLATERAL_RATIO_PRECISION;\\n    }\\n\\n    /// @notice Get target deposit amount based on borrow and collateral ratio\\n    /// @param borrow Current total borrowed on Aave\\n    /// @param collatRatio Collateral ratio to target\\n    /// @param deposits Current deposit amount: this is what the function should return if the `collatRatio` is null\\n    function _getDepositFromBorrow(\\n        uint256 borrow,\\n        uint256 collatRatio,\\n        uint256 deposits\\n    ) internal pure returns (uint256) {\\n        if (collatRatio > 0) return (borrow * _COLLATERAL_RATIO_PRECISION) / collatRatio;\\n        else return deposits;\\n    }\\n\\n    /// @notice Get target borrow amount based on supply (deposits - borrow) and collateral ratio\\n    /// @param supply = deposits - borrows. The supply is what is \\\"actually\\\" deposited in Aave\\n    /// @param collatRatio Collateral ratio to target\\n    function _getBorrowFromSupply(uint256 supply, uint256 collatRatio) internal pure returns (uint256) {\\n        return (supply * collatRatio) / (_COLLATERAL_RATIO_PRECISION - collatRatio);\\n    }\\n\\n    /// @notice Computes the position collateral ratio from deposits and borrows\\n    function _getCollatRatio(uint256 deposits, uint256 borrows) internal pure returns (uint256 currentCollatRatio) {\\n        if (deposits > 0) {\\n            currentCollatRatio = (borrows * _COLLATERAL_RATIO_PRECISION) / deposits;\\n        }\\n    }\\n\\n    /// @notice Processes 1Inch revert messages\\n    function _revertBytes(bytes memory errMsg) internal pure {\\n        if (errMsg.length > 0) {\\n            //solhint-disable-next-line\\n            assembly {\\n                revert(add(32, errMsg), mload(errMsg))\\n            }\\n        }\\n        revert(\\\"117\\\");\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC3156FlashBorrower.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashBorrower {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\n    },\n    \"contracts/strategies/AaveFlashloanStrategy/AaveLibraries.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\nimport { IAToken, IProtocolDataProvider, IProtocolDataProvider, ILendingPool, IPriceOracle, IOptionalERC20 } from \\\"./AaveInterfaces.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary DataTypes {\\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        uint40 lastUpdateTimestamp;\\n        //tokens addresses\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint8 id;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: Reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60-63: reserved\\n        //bit 64-79: reserve factor\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        uint256 data;\\n    }\\n\\n    enum InterestRateMode {\\n        NONE,\\n        STABLE,\\n        VARIABLE\\n    }\\n}\\n\\nlibrary FlashMintLib {\\n    event Leverage(\\n        uint256 amountRequested,\\n        uint256 amountUsed,\\n        uint256 requiredDAI,\\n        uint256 amountToCloseLTVGap,\\n        bool deficit,\\n        address flashLoan\\n    );\\n\\n    address public constant LENDER = 0x1EB4CF3A948E7D72A198fe073cCb8C7a948cD853;\\n    uint256 private constant _DAI_DECIMALS = 1e18;\\n    uint256 private constant _COLLAT_RATIO_PRECISION = 1 ether;\\n    address private constant _WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address private constant _DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    IAToken public constant ADAI = IAToken(0x028171bCA77440897B824Ca71D1c56caC55b68A3);\\n    IProtocolDataProvider private constant _protocolDataProvider =\\n        IProtocolDataProvider(0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d);\\n    ILendingPool private constant _lendingPool = ILendingPool(0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9);\\n\\n    bytes32 public constant CALLBACK_SUCCESS = keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n    uint16 private constant _referral = 0; // TODO: get our own referral code\\n\\n    uint256 private constant _RAY = 10**27;\\n\\n    function doFlashMint(\\n        bool deficit,\\n        uint256 amountDesired,\\n        address token,\\n        uint256 collatRatioDAI,\\n        uint256 depositToCloseLTVGap\\n    ) public returns (uint256 amount) {\\n        if (amountDesired == 0) {\\n            return 0;\\n        }\\n        amount = amountDesired;\\n        address dai = _DAI;\\n\\n        // calculate amount of dai we need\\n        uint256 requiredDAI;\\n        {\\n            requiredDAI = (toDAI(amount, token) * _COLLAT_RATIO_PRECISION) / collatRatioDAI;\\n\\n            uint256 requiredDAIToCloseLTVGap = 0;\\n            if (depositToCloseLTVGap > 0) {\\n                requiredDAIToCloseLTVGap = toDAI(depositToCloseLTVGap, token);\\n                requiredDAI = requiredDAI + requiredDAIToCloseLTVGap;\\n            }\\n\\n            uint256 _maxLiquidity = maxLiquidity();\\n\\n            /*\\n            When depositing/withdrawing in the `lendingPool` the amounts are scaled by a `liquidityIndex` and rounded with the functions rayDiv and rayMul (in the aDAI contract)\\n            Weirdly, 2 different indexes are used: `liquidityIndex` is used when depositing and `getReserveNormalizedIncome` when withdrawing\\n            Therefore, we need to round `requiredDAI`, or we may get some rounding errors and revert\\n            because the amount we try to withdraw (to pay back the flashloan) is not equal to the amount deposited\\n            */\\n            uint256 liquidityIndex = _lendingPool.getReserveData(dai).liquidityIndex;\\n            uint256 getReserveNormalizedIncome = _lendingPool.getReserveNormalizedIncome(dai);\\n            uint256 rayDiv = ((requiredDAI * _RAY + liquidityIndex / 2) / liquidityIndex);\\n            requiredDAI = (rayDiv * getReserveNormalizedIncome + (_RAY / 2)) / _RAY;\\n\\n            if (requiredDAI > _maxLiquidity) {\\n                requiredDAI = (_maxLiquidity * _RAY - (_RAY / 2)) / getReserveNormalizedIncome;\\n                requiredDAI = (requiredDAI * liquidityIndex - liquidityIndex / 2) / _RAY;\\n\\n                // NOTE: if we cap amountDAI, we reduce amountToken we are taking too\\n                amount =\\n                    (fromDAI(requiredDAI - requiredDAIToCloseLTVGap, token) * collatRatioDAI) /\\n                    _COLLAT_RATIO_PRECISION;\\n            }\\n        }\\n\\n        bytes memory data = abi.encode(deficit, amount);\\n        uint256 _fee = IERC3156FlashLender(LENDER).flashFee(dai, requiredDAI);\\n        // Check that fees have not been increased without us knowing\\n        require(_fee == 0);\\n        uint256 _allowance = IERC20(dai).allowance(address(this), address(LENDER));\\n        if (_allowance < requiredDAI) {\\n            IERC20(dai).approve(address(LENDER), 0);\\n            IERC20(dai).approve(address(LENDER), type(uint256).max);\\n        }\\n\\n        IERC3156FlashLender(LENDER).flashLoan(IERC3156FlashBorrower(address(this)), dai, requiredDAI, data);\\n\\n        emit Leverage(amountDesired, amount, requiredDAI, depositToCloseLTVGap, deficit, LENDER);\\n\\n        return amount; // we need to return the amount of Token we have changed our position in\\n    }\\n\\n    function loanLogic(\\n        bool deficit,\\n        uint256 amount,\\n        uint256 amountFlashmint,\\n        address want\\n    ) public returns (bytes32) {\\n        address dai = _DAI;\\n        bool isDai = (want == dai);\\n\\n        ILendingPool lp = _lendingPool;\\n\\n        if (isDai) {\\n            if (deficit) {\\n                lp.deposit(dai, amountFlashmint - amount, address(this), _referral);\\n                lp.repay(dai, IERC20(dai).balanceOf(address(this)), 2, address(this));\\n                lp.withdraw(dai, amountFlashmint, address(this));\\n            } else {\\n                lp.deposit(dai, IERC20(dai).balanceOf(address(this)), address(this), _referral);\\n                lp.borrow(dai, amount, 2, _referral, address(this));\\n                lp.withdraw(dai, amountFlashmint - amount, address(this));\\n            }\\n        } else {\\n            // 1. Deposit DAI in Aave as collateral\\n            lp.deposit(dai, amountFlashmint, address(this), _referral);\\n\\n            if (deficit) {\\n                // 2a. if in deficit withdraw amount and repay it\\n                lp.withdraw(want, amount, address(this));\\n                lp.repay(want, IERC20(want).balanceOf(address(this)), 2, address(this));\\n            } else {\\n                // 2b. if levering up borrow and deposit\\n                lp.borrow(want, amount, 2, _referral, address(this));\\n                lp.deposit(want, IERC20(want).balanceOf(address(this)), address(this), _referral);\\n            }\\n            // 3. Withdraw DAI\\n            lp.withdraw(dai, amountFlashmint, address(this));\\n        }\\n\\n        return CALLBACK_SUCCESS;\\n    }\\n\\n    function priceOracle() internal view returns (IPriceOracle) {\\n        return IPriceOracle(_protocolDataProvider.ADDRESSES_PROVIDER().getPriceOracle());\\n    }\\n\\n    function toDAI(uint256 _amount, address asset) internal view returns (uint256) {\\n        address dai = _DAI;\\n        if (_amount == 0 || _amount == type(uint256).max || asset == dai) {\\n            return _amount;\\n        }\\n\\n        if (asset == _WETH) {\\n            return\\n                (_amount * (uint256(10)**uint256(IOptionalERC20(dai).decimals()))) / priceOracle().getAssetPrice(dai);\\n        }\\n\\n        address[] memory tokens = new address[](2);\\n        tokens[0] = asset;\\n        tokens[1] = dai;\\n        uint256[] memory prices = priceOracle().getAssetsPrices(tokens);\\n\\n        uint256 ethPrice = (_amount * prices[0]) / (uint256(10)**uint256(IOptionalERC20(asset).decimals()));\\n        return (ethPrice * _DAI_DECIMALS) / prices[1];\\n    }\\n\\n    function fromDAI(uint256 _amount, address asset) internal view returns (uint256) {\\n        address dai = _DAI;\\n        if (_amount == 0 || _amount == type(uint256).max || asset == dai) {\\n            return _amount;\\n        }\\n\\n        if (asset == _WETH) {\\n            return\\n                (_amount * priceOracle().getAssetPrice(dai)) / (uint256(10)**uint256(IOptionalERC20(dai).decimals()));\\n        }\\n\\n        address[] memory tokens = new address[](2);\\n        tokens[0] = asset;\\n        tokens[1] = dai;\\n        uint256[] memory prices = priceOracle().getAssetsPrices(tokens);\\n\\n        uint256 ethPrice = (_amount * prices[1]) / _DAI_DECIMALS;\\n\\n        return (ethPrice * (uint256(10)**uint256(IOptionalERC20(asset).decimals()))) / prices[0];\\n    }\\n\\n    function maxLiquidity() public view returns (uint256) {\\n        return IERC3156FlashLender(LENDER).maxFlashLoan(_DAI);\\n    }\\n}\\n\"\n    },\n    \"contracts/strategies/AaveFlashloanStrategy/AaveInterfaces.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\nimport { DataTypes } from \\\"./AaveLibraries.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IAaveIncentivesController {\\n    /**\\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n     * @param user The address of the user\\n     * @return The rewards\\n     **/\\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n     * @param amount Amount of rewards to claim\\n     * @param to Address that will be receiving the rewards\\n     * @return Rewards claimed\\n     **/\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n     * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n     * @param amount Amount of rewards to claim\\n     * @param user Address to check and claim rewards\\n     * @param to Address that will be receiving the rewards\\n     * @return Rewards claimed\\n     **/\\n    function claimRewardsOnBehalf(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address user,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev returns the unclaimed rewards of the user\\n     * @param user the address of the user\\n     * @return the unclaimed user rewards\\n     */\\n    function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n    /**\\n     * @dev for backward compatibility with previous implementation of the Incentives controller\\n     */\\n    function REWARD_TOKEN() external view returns (address);\\n\\n    function getDistributionEnd() external view returns (uint256);\\n\\n    function getAssetData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function assets(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 emissionPerSecond,\\n            uint256 index,\\n            uint256 lastUpdateTimestamp\\n        );\\n\\n    function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond) external;\\n}\\n\\ninterface ILendingPool {\\n    /**\\n     * @dev Emitted on deposit()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the deposit\\n     * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n     * @param amount The amount deposited\\n     * @param referral The referral code used\\n     **/\\n    event Deposit(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referral\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserve The address of the underlyng asset being withdrawn\\n     * @param user The address initiating the withdrawal, owner of aTokens\\n     * @param to Address that will receive the underlying\\n     * @param amount The amount to be withdrawn\\n     **/\\n    event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserve The address of the underlying asset being borrowed\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n     * initiator of the transaction on flashLoan()\\n     * @param onBehalfOf The address that will be getting the debt\\n     * @param amount The amount borrowed out\\n     * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n     * @param borrowRate The numeric rate at which the user has borrowed\\n     * @param referral The referral code used\\n     **/\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint256 borrowRateMode,\\n        uint256 borrowRate,\\n        uint16 indexed referral\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\n     * @param amount The amount repaid\\n     **/\\n    event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\\n\\n    /**\\n     * @dev Emitted on swapBorrowRateMode()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user swapping his rate mode\\n     * @param rateMode The rate mode that the user wants to swap to\\n     **/\\n    event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user for which the rebalance has been executed\\n     **/\\n    event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on flashLoan()\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param premium The fee flash borrowed\\n     * @param referralCode The referral code used\\n     **/\\n    event FlashLoan(\\n        address indexed target,\\n        address indexed initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        uint256 premium,\\n        uint16 referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted when the pause is triggered.\\n     */\\n    event Paused();\\n\\n    /**\\n     * @dev Emitted when the pause is lifted.\\n     */\\n    event Unpaused();\\n\\n    /**\\n     * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n     * LendingPoolCollateral manager using a DELEGATECALL\\n     * This allows to have the events in the generated ABI for LendingPool.\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n     * @param liquidator The address of the liquidator\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed debtAsset,\\n        address indexed user,\\n        uint256 debtToCover,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveAToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n     * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n     * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n     * gets added to the LendingPool ABI\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param liquidityRate The new liquidity rate\\n     * @param stableBorrowRate The new stable borrow rate\\n     * @param variableBorrowRate The new variable borrow rate\\n     * @param liquidityIndex The new liquidity index\\n     * @param variableBorrowIndex The new variable borrow index\\n     **/\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to deposit\\n     * @param amount The amount to be deposited\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to Address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     **/\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     **/\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     **/\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 rateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n     * @param asset The address of the underlying asset borrowed\\n     * @param rateMode The rate mode that the user wants to swap to\\n     **/\\n    function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n    /**\\n     * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n     *        borrowed at a stable rate and depositors are not earning enough\\n     * @param asset The address of the underlying asset borrowed\\n     * @param user The address of the user to be rebalanced\\n     **/\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n     * @param asset The address of the underlying asset deposited\\n     * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n     **/\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n    /**\\n     * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n     * For further details please visit https://developers.aave.com\\n     * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n     * @param assets The addresses of the assets being flash-borrowed\\n     * @param amounts The amounts amounts being flash-borrowed\\n     * @param modes Types of the debt to open if the flash loan is not returned:\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalCollateralETH the total collateral in ETH of the user\\n     * @return totalDebtETH the total debt in ETH of the user\\n     * @return availableBorrowsETH the borrowing power left of the user\\n     * @return currentLiquidationThreshold the liquidation threshold of the user\\n     * @return ltv the loan to value of the user\\n     * @return healthFactor the current health factor of the user\\n     **/\\n    function getUserAccountData(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    function initReserve(\\n        address reserve,\\n        address aTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\\n\\n    function setConfiguration(address reserve, uint256 configuration) external;\\n\\n    /**\\n     * @dev Returns the configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The configuration of the reserve\\n     **/\\n    function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @dev Returns the configuration of the user across all the reserves\\n     * @param user The user address\\n     * @return The configuration of the user\\n     **/\\n    function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n    /**\\n     * @dev Returns the normalized income normalized income of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the normalized variable debt per unit of asset\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 balanceFromAfter,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    function getReservesList() external view returns (address[] memory);\\n\\n    function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n    function setPause(bool val) external;\\n\\n    function paused() external view returns (bool);\\n}\\n\\ninterface IProtocolDataProvider {\\n    struct TokenData {\\n        string symbol;\\n        address tokenAddress;\\n    }\\n\\n    function ADDRESSES_PROVIDER() external view returns (ILendingPoolAddressesProvider);\\n\\n    function getAllReservesTokens() external view returns (TokenData[] memory);\\n\\n    function getAllATokens() external view returns (TokenData[] memory);\\n\\n    function getReserveConfigurationData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 decimals,\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            uint256 reserveFactor,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive,\\n            bool isFrozen\\n        );\\n\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n\\n    function getUserReserveData(address asset, address user)\\n        external\\n        view\\n        returns (\\n            uint256 currentATokenBalance,\\n            uint256 currentStableDebt,\\n            uint256 currentVariableDebt,\\n            uint256 principalStableDebt,\\n            uint256 scaledVariableDebt,\\n            uint256 stableBorrowRate,\\n            uint256 liquidityRate,\\n            uint40 stableRateLastUpdated,\\n            bool usageAsCollateralEnabled\\n        );\\n\\n    function getReserveTokensAddresses(address asset)\\n        external\\n        view\\n        returns (\\n            address aTokenAddress,\\n            address stableDebtTokenAddress,\\n            address variableDebtTokenAddress\\n        );\\n}\\n\\ninterface IScaledBalanceToken {\\n    /**\\n     * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n     * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n     * @param user The user whose balance is calculated\\n     * @return The scaled balance of the user\\n     **/\\n    function scaledBalanceOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the scaled balance of the user and the scaled total supply.\\n     * @param user The address of the user\\n     * @return The scaled balance of the user\\n     * @return The scaled balance and the scaled total supply\\n     **/\\n    function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n    /**\\n     * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n     * @return The scaled total supply\\n     **/\\n    function scaledTotalSupply() external view returns (uint256);\\n}\\n\\n/**\\n * @title IVariableDebtToken\\n * @author Aave\\n * @notice Defines the basic interface for a variable debt token.\\n **/\\ninterface IVariableDebtToken is IERC20, IScaledBalanceToken {\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param from The address performing the mint\\n     * @param onBehalfOf The address of the user on which behalf minting has been performed\\n     * @param value The amount to be minted\\n     * @param index The last index of the reserve\\n     **/\\n    event Mint(address indexed from, address indexed onBehalfOf, uint256 value, uint256 index);\\n\\n    /**\\n     * @dev Mints debt token to the `onBehalfOf` address\\n     * @param user The address receiving the borrowed underlying, being the delegatee in case\\n     * of credit delegate, or same as `onBehalfOf` otherwise\\n     * @param onBehalfOf The address receiving the debt tokens\\n     * @param amount The amount of debt being minted\\n     * @param index The variable debt index of the reserve\\n     * @return `true` if the the previous balance of the user is 0\\n     **/\\n    function mint(\\n        address user,\\n        address onBehalfOf,\\n        uint256 amount,\\n        uint256 index\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when variable debt is burnt\\n     * @param user The user which debt has been burned\\n     * @param amount The amount of debt being burned\\n     * @param index The index of the user\\n     **/\\n    event Burn(address indexed user, uint256 amount, uint256 index);\\n\\n    /**\\n     * @dev Burns user variable debt\\n     * @param user The user which debt is burnt\\n     * @param index The variable debt index of the reserve\\n     **/\\n    function burn(\\n        address user,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n\\n    /**\\n     * @dev Returns the address of the incentives controller contract\\n     **/\\n    function getIncentivesController() external view returns (IAaveIncentivesController);\\n}\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n    event MarketIdSet(string newMarketId);\\n    event LendingPoolUpdated(address indexed newAddress);\\n    event ConfigurationAdminUpdated(address indexed newAddress);\\n    event EmergencyAdminUpdated(address indexed newAddress);\\n    event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n    event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n    event PriceOracleUpdated(address indexed newAddress);\\n    event LendingRateOracleUpdated(address indexed newAddress);\\n    event ProxyCreated(bytes32 id, address indexed newAddress);\\n    event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n    function getMarketId() external view returns (string memory);\\n\\n    function setMarketId(string calldata marketId) external;\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function getLendingPool() external view returns (address);\\n\\n    function setLendingPoolImpl(address pool) external;\\n\\n    function getLendingPoolConfigurator() external view returns (address);\\n\\n    function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n    function getLendingPoolCollateralManager() external view returns (address);\\n\\n    function setLendingPoolCollateralManager(address manager) external;\\n\\n    function getPoolAdmin() external view returns (address);\\n\\n    function setPoolAdmin(address admin) external;\\n\\n    function getEmergencyAdmin() external view returns (address);\\n\\n    function setEmergencyAdmin(address admin) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address priceOracle) external;\\n\\n    function getLendingRateOracle() external view returns (address);\\n\\n    function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\\ninterface IOptionalERC20 {\\n    function decimals() external view returns (uint8);\\n}\\n\\ninterface IPriceOracle {\\n    function getAssetPrice(address _asset) external view returns (uint256);\\n\\n    function getAssetsPrices(address[] calldata _assets) external view returns (uint256[] memory);\\n\\n    function getSourceOfAsset(address _asset) external view returns (address);\\n\\n    function getFallbackOracle() external view returns (address);\\n}\\n\\ninterface IStakedAave is IERC20 {\\n    function stake(address to, uint256 amount) external;\\n\\n    function redeem(address to, uint256 amount) external;\\n\\n    function cooldown() external;\\n\\n    function claimRewards(address to, uint256 amount) external;\\n\\n    function getTotalRewardsBalance(address) external view returns (uint256);\\n\\n    function COOLDOWN_SECONDS() external view returns (uint256);\\n\\n    function stakersCooldowns(address) external view returns (uint256);\\n\\n    function UNSTAKE_WINDOW() external view returns (uint256);\\n}\\n\\n/**\\n * @title IInitializableAToken\\n * @notice Interface for the initialize function on AToken\\n * @author Aave\\n **/\\ninterface IInitializableAToken {\\n    /**\\n     * @dev Emitted when an aToken is initialized\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param pool The address of the associated lending pool\\n     * @param treasury The address of the treasury\\n     * @param incentivesController The address of the incentives controller for this aToken\\n     * @param aTokenDecimals the decimals of the underlying\\n     * @param aTokenName the name of the aToken\\n     * @param aTokenSymbol the symbol of the aToken\\n     * @param params A set of encoded parameters for additional initialization\\n     **/\\n    event Initialized(\\n        address indexed underlyingAsset,\\n        address indexed pool,\\n        address treasury,\\n        address incentivesController,\\n        uint8 aTokenDecimals,\\n        string aTokenName,\\n        string aTokenSymbol,\\n        bytes params\\n    );\\n\\n    /**\\n     * @dev Initializes the aToken\\n     * @param pool The address of the lending pool where this aToken will be used\\n     * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n     * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n     * @param incentivesController The smart contract managing potential incentives distribution\\n     * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n     * @param aTokenName The name of the aToken\\n     * @param aTokenSymbol The symbol of the aToken\\n     */\\n    function initialize(\\n        ILendingPool pool,\\n        address treasury,\\n        address underlyingAsset,\\n        IAaveIncentivesController incentivesController,\\n        uint8 aTokenDecimals,\\n        string calldata aTokenName,\\n        string calldata aTokenSymbol,\\n        bytes calldata params\\n    ) external;\\n}\\n\\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param from The address performing the mint\\n     * @param value The amount being\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    event Mint(address indexed from, uint256 value, uint256 index);\\n\\n    /**\\n     * @dev Mints `amount` aTokens to `user`\\n     * @param user The address receiving the minted tokens\\n     * @param amount The amount of tokens getting minted\\n     * @param index The new liquidity index of the reserve\\n     * @return `true` if the the previous balance of the user was 0\\n     */\\n    function mint(\\n        address user,\\n        uint256 amount,\\n        uint256 index\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted after aTokens are burned\\n     * @param from The owner of the aTokens, getting them burned\\n     * @param target The address that will receive the underlying\\n     * @param value The amount being burned\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\\n\\n    /**\\n     * @dev Emitted during the transfer action\\n     * @param from The user whose tokens are being transferred\\n     * @param to The recipient\\n     * @param value The amount being transferred\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n    /**\\n     * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n     * @param user The owner of the aTokens, getting them burned\\n     * @param receiverOfUnderlying The address that will receive the underlying\\n     * @param amount The amount being burned\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    function burn(\\n        address user,\\n        address receiverOfUnderlying,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n\\n    /**\\n     * @dev Mints aTokens to the reserve treasury\\n     * @param amount The amount of tokens getting minted\\n     * @param index The new liquidity index of the reserve\\n     */\\n    function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n    /**\\n     * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n     * @param from The address getting liquidated, current owner of the aTokens\\n     * @param to The recipient\\n     * @param value The amount of tokens getting transferred\\n     **/\\n    function transferOnLiquidation(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external;\\n\\n    /**\\n     * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\n     * assets in borrow(), withdraw() and flashLoan()\\n     * @param user The recipient of the underlying\\n     * @param amount The amount getting transferred\\n     * @return The amount transferred\\n     **/\\n    function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @dev Invoked to execute actions on the aToken side after a repayment.\\n     * @param user The user executing the repayment\\n     * @param amount The amount getting repaid\\n     **/\\n    function handleRepayment(address user, uint256 amount) external;\\n\\n    /**\\n     * @dev Returns the address of the incentives controller contract\\n     **/\\n    function getIncentivesController() external view returns (IAaveIncentivesController);\\n\\n    /**\\n     * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n     **/\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\\n/**\\n * @title IReserveInterestRateStrategyInterface interface\\n * @dev Interface for the calculation of the interest rates\\n * @author Aave\\n */\\ninterface IReserveInterestRateStrategy {\\n    function baseVariableBorrowRate() external view returns (uint256);\\n\\n    function getMaxVariableBorrowRate() external view returns (uint256);\\n\\n    function stableRateSlope1() external view returns (uint256);\\n\\n    function stableRateSlope2() external view returns (uint256);\\n\\n    function variableRateSlope1() external view returns (uint256);\\n\\n    function variableRateSlope2() external view returns (uint256);\\n\\n    function OPTIMAL_UTILIZATION_RATE() external view returns (uint256);\\n\\n    function calculateInterestRates(\\n        address reserve,\\n        uint256 availableLiquidity,\\n        uint256 totalStableDebt,\\n        uint256 totalVariableDebt,\\n        uint256 averageStableBorrowRate,\\n        uint256 reserveFactor\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 liquidityRate,\\n            uint256 stableBorrowRate,\\n            uint256 variableBorrowRate\\n        );\\n\\n    function calculateInterestRates(\\n        address reserve,\\n        address aToken,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalStableDebt,\\n        uint256 totalVariableDebt,\\n        uint256 averageStableBorrowRate,\\n        uint256 reserveFactor\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 liquidityRate,\\n            uint256 stableBorrowRate,\\n            uint256 variableBorrowRate\\n        );\\n}\\n\"\n    },\n    \"contracts/strategies/BaseStrategyUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./BaseStrategyEvents.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/// @title BaseStrategyUpgradeable\\n/// @author Forked from https://github.com/yearn/yearn-managers/blob/master/contracts/BaseStrategy.sol\\n/// @notice `BaseStrategyUpgradeable` implements all of the required functionalities to interoperate\\n/// with the `PoolManager` Contract.\\n/// @dev This contract should be inherited and the abstract methods implemented to adapt the `Strategy`\\n/// to the particular needs it has to create a return.\\nabstract contract BaseStrategyUpgradeable is BaseStrategyEvents, AccessControlUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant BASE = 10**18;\\n    uint256 public constant SECONDSPERYEAR = 31556952;\\n\\n    /// @notice Role for `PoolManager` only\\n    bytes32 public constant POOLMANAGER_ROLE = keccak256(\\\"POOLMANAGER_ROLE\\\");\\n    /// @notice Role for guardians and governors\\n    bytes32 public constant GUARDIAN_ROLE = keccak256(\\\"GUARDIAN_ROLE\\\");\\n    /// @notice Role for keepers\\n    bytes32 public constant KEEPER_ROLE = keccak256(\\\"KEEPER_ROLE\\\");\\n\\n    // ======================== References to contracts ============================\\n\\n    /// @notice Reference to the protocol's collateral `PoolManager`\\n    IPoolManager public poolManager;\\n\\n    /// @notice Reference to the ERC20 farmed by this strategy\\n    IERC20 public want;\\n\\n    /// @notice Base of the ERC20 token farmed by this strategy\\n    uint256 public wantBase;\\n\\n    // ============================ Parameters =====================================\\n\\n    /// @notice Use this to adjust the threshold at which running a debt causes a\\n    /// harvest trigger. See `setDebtThreshold()` for more details\\n    uint256 public debtThreshold;\\n\\n    /// @notice See note on `setEmergencyExit()`\\n    bool public emergencyExit;\\n\\n    // ============================ Constructor ====================================\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    /// @notice Constructor of the `BaseStrategyUpgradeable`\\n    /// @param _poolManager Address of the `PoolManager` lending collateral to this strategy\\n    /// @param governor Governor address of the protocol\\n    /// @param guardian Address of the guardian\\n    function _initialize(\\n        address _poolManager,\\n        address governor,\\n        address guardian,\\n        address[] memory keepers\\n    ) internal initializer {\\n        poolManager = IPoolManager(_poolManager);\\n        want = IERC20(poolManager.token());\\n        wantBase = 10**(IERC20Metadata(address(want)).decimals());\\n        require(guardian != address(0) && governor != address(0) && governor != guardian, \\\"0\\\");\\n        // AccessControl\\n        // Governor is guardian so no need for a governor role\\n        _setupRole(GUARDIAN_ROLE, guardian);\\n        _setupRole(GUARDIAN_ROLE, governor);\\n        _setupRole(POOLMANAGER_ROLE, address(_poolManager));\\n        _setRoleAdmin(POOLMANAGER_ROLE, POOLMANAGER_ROLE);\\n        _setRoleAdmin(GUARDIAN_ROLE, POOLMANAGER_ROLE);\\n\\n        // Initializing roles first\\n        for (uint256 i = 0; i < keepers.length; i++) {\\n            require(keepers[i] != address(0), \\\"0\\\");\\n            _setupRole(KEEPER_ROLE, keepers[i]);\\n        }\\n        _setRoleAdmin(KEEPER_ROLE, GUARDIAN_ROLE);\\n\\n        debtThreshold = 100 * BASE;\\n        emergencyExit = false;\\n        // Give `PoolManager` unlimited access (might save gas)\\n        want.safeIncreaseAllowance(address(poolManager), type(uint256).max);\\n    }\\n\\n    // ========================== Core functions ===================================\\n\\n    /// @notice Harvests the Strategy, recognizing any profits or losses and adjusting\\n    /// the Strategy's position.\\n    function harvest() external {\\n        _report();\\n        // Check if free returns are left, and re-invest them\\n        _adjustPosition();\\n    }\\n\\n    /// @notice Harvests the Strategy, recognizing any profits or losses and adjusting\\n    /// the Strategy's position.\\n    /// @param borrowInit Approximate optimal borrows to have faster convergence on the NR method\\n    function harvest(uint256 borrowInit) external onlyRole(KEEPER_ROLE) {\\n        _report();\\n        // Check if free returns are left, and re-invest them, gives an hint on the borrow amount to the NR method\\n        // to maximise revenue\\n        _adjustPosition(borrowInit);\\n    }\\n\\n    /// @notice Withdraws `_amountNeeded` to `poolManager`.\\n    /// @param _amountNeeded How much `want` to withdraw.\\n    /// @return amountFreed How much `want` withdrawn.\\n    /// @return _loss Any realized losses\\n    /// @dev This may only be called by the `PoolManager`\\n    function withdraw(uint256 _amountNeeded)\\n        external\\n        onlyRole(POOLMANAGER_ROLE)\\n        returns (uint256 amountFreed, uint256 _loss)\\n    {\\n        // Liquidate as much as possible `want` (up to `_amountNeeded`)\\n        (amountFreed, _loss) = _liquidatePosition(_amountNeeded);\\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\\n        want.safeTransfer(msg.sender, amountFreed);\\n        // NOTE: Reinvest anything leftover on next `tend`/`harvest`\\n    }\\n\\n    // ============================ View functions =================================\\n\\n    /// @notice Provides an accurate estimate for the total amount of assets\\n    /// (principle + return) that this Strategy is currently managing,\\n    /// denominated in terms of `want` tokens.\\n    /// This total should be \\\"realizable\\\" e.g. the total value that could\\n    /// *actually* be obtained from this Strategy if it were to divest its\\n    /// entire position based on current on-chain conditions.\\n    /// @return The estimated total assets in this Strategy.\\n    /// @dev Care must be taken in using this function, since it relies on external\\n    /// systems, which could be manipulated by the attacker to give an inflated\\n    /// (or reduced) value produced by this function, based on current on-chain\\n    /// conditions (e.g. this function is possible to influence through\\n    /// flashloan attacks, oracle manipulations, or other DeFi attack\\n    /// mechanisms).\\n    function estimatedTotalAssets() public view virtual returns (uint256);\\n\\n    /// @notice Provides an indication of whether this strategy is currently \\\"active\\\"\\n    /// in that it is managing an active position, or will manage a position in\\n    /// the future. This should correlate to `harvest()` activity, so that Harvest\\n    /// events can be tracked externally by indexing agents.\\n    /// @return True if the strategy is actively managing a position.\\n    function isActive() public view returns (bool) {\\n        return estimatedTotalAssets() > 0;\\n    }\\n\\n    // ============================ Internal Functions =============================\\n\\n    /// @notice PrepareReturn the Strategy, recognizing any profits or losses\\n    /// @dev In the rare case the Strategy is in emergency shutdown, this will exit\\n    /// the Strategy's position.\\n    /// @dev  When `_report()` is called, the Strategy reports to the Manager (via\\n    /// `poolManager.report()`), so in some cases `harvest()` must be called in order\\n    /// to take in profits, to borrow newly available funds from the Manager, or\\n    /// otherwise adjust its position. In other cases `harvest()` must be\\n    /// called to report to the Manager on the Strategy's position, especially if\\n    /// any losses have occurred.\\n    /// @dev As keepers may directly profit from this function, there may be front-running problems with miners bots,\\n    /// we may have to put an access control logic for this function to only allow white-listed addresses to act\\n    /// as keepers for the protocol\\n    function _report() internal {\\n        uint256 profit = 0;\\n        uint256 loss = 0;\\n        uint256 debtOutstanding = poolManager.debtOutstanding();\\n        uint256 debtPayment = 0;\\n        if (emergencyExit) {\\n            // Free up as much capital as possible\\n            uint256 amountFreed = _liquidateAllPositions();\\n            if (amountFreed < debtOutstanding) {\\n                loss = debtOutstanding - amountFreed;\\n            } else if (amountFreed > debtOutstanding) {\\n                profit = amountFreed - debtOutstanding;\\n            }\\n            debtPayment = debtOutstanding - loss;\\n        } else {\\n            // Free up returns for Manager to pull\\n            (profit, loss, debtPayment) = _prepareReturn(debtOutstanding);\\n        }\\n        emit Harvested(profit, loss, debtPayment, debtOutstanding);\\n\\n        // Allows Manager to take up to the \\\"harvested\\\" balance of this contract,\\n        // which is the amount it has earned since the last time it reported to\\n        // the Manager.\\n        poolManager.report(profit, loss, debtPayment);\\n    }\\n\\n    /// @notice Performs any Strategy unwinding or other calls necessary to capture the\\n    /// \\\"free return\\\" this Strategy has generated since the last time its core\\n    /// position(s) were adjusted. Examples include unwrapping extra rewards.\\n    /// This call is only used during \\\"normal operation\\\" of a Strategy, and\\n    /// should be optimized to minimize losses as much as possible.\\n    ///\\n    /// This method returns any realized profits and/or realized losses\\n    /// incurred, and should return the total amounts of profits/losses/debt\\n    /// payments (in `want` tokens) for the Manager's accounting (e.g.\\n    /// `want.balanceOf(this) >= _debtPayment + _profit`).\\n    ///\\n    /// `_debtOutstanding` will be 0 if the Strategy is not past the configured\\n    /// debt limit, otherwise its value will be how far past the debt limit\\n    /// the Strategy is. The Strategy's debt limit is configured in the Manager.\\n    ///\\n    /// NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`.\\n    ///       It is okay for it to be less than `_debtOutstanding`, as that\\n    ///       should only used as a guide for how much is left to pay back.\\n    ///       Payments should be made to minimize loss from slippage, debt,\\n    ///       withdrawal fees, etc.\\n    ///\\n    /// See `poolManager.debtOutstanding()`.\\n    function _prepareReturn(uint256 _debtOutstanding)\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _debtPayment\\n        );\\n\\n    /// @notice Performs any adjustments to the core position(s) of this Strategy given\\n    /// what change the Manager made in the \\\"investable capital\\\" available to the\\n    /// Strategy. Note that all \\\"free capital\\\" in the Strategy after the report\\n    /// was made is available for reinvestment. Also note that this number\\n    /// could be 0, and you should handle that scenario accordingly.\\n    function _adjustPosition() internal virtual;\\n\\n    /// @notice same as _adjustPosition but with an initial parameters\\n    function _adjustPosition(uint256) internal virtual;\\n\\n    /// @notice Liquidates up to `_amountNeeded` of `want` of this strategy's positions,\\n    /// irregardless of slippage. Any excess will be re-invested with `_adjustPosition()`.\\n    /// This function should return the amount of `want` tokens made available by the\\n    /// liquidation. If there is a difference between them, `_loss` indicates whether the\\n    /// difference is due to a realized loss, or if there is some other sitution at play\\n    /// (e.g. locked funds) where the amount made available is less than what is needed.\\n    ///\\n    /// NOTE: The invariant `_liquidatedAmount + _loss <= _amountNeeded` should always be maintained\\n    function _liquidatePosition(uint256 _amountNeeded)\\n        internal\\n        virtual\\n        returns (uint256 _liquidatedAmount, uint256 _loss);\\n\\n    /// @notice Liquidates everything and returns the amount that got freed.\\n    /// This function is used during emergency exit instead of `_prepareReturn()` to\\n    /// liquidate all of the Strategy's positions back to the Manager.\\n    function _liquidateAllPositions() internal virtual returns (uint256 _amountFreed);\\n\\n    /// @notice Override this to add all tokens/tokenized positions this contract\\n    /// manages on a *persistent* basis (e.g. not just for swapping back to\\n    /// want ephemerally).\\n    ///\\n    /// NOTE: Do *not* include `want`, already included in `sweep` below.\\n    ///\\n    /// Example:\\n    /// ```\\n    ///    function _protectedTokens() internal override view returns (address[] memory) {\\n    ///      address[] memory protected = new address[](3);\\n    ///      protected[0] = tokenA;\\n    ///      protected[1] = tokenB;\\n    ///      protected[2] = tokenC;\\n    ///      return protected;\\n    ///    }\\n    /// ```\\n    function _protectedTokens() internal view virtual returns (address[] memory);\\n\\n    // ============================== Governance ===================================\\n\\n    /// @notice Activates emergency exit. Once activated, the Strategy will exit its\\n    /// position upon the next harvest, depositing all funds into the Manager as\\n    /// quickly as is reasonable given on-chain conditions.\\n    /// @dev This may only be called by the `PoolManager`, because when calling this the `PoolManager` should at the same\\n    /// time update the debt ratio\\n    /// @dev This function can only be called once by the `PoolManager` contract\\n    /// @dev See `poolManager.setEmergencyExit()` and `harvest()` for further details.\\n    function setEmergencyExit() external onlyRole(POOLMANAGER_ROLE) {\\n        emergencyExit = true;\\n        emit EmergencyExitActivated();\\n    }\\n\\n    /// @notice Sets how far the Strategy can go into loss without a harvest and report\\n    /// being required.\\n    /// @param _debtThreshold How big of a loss this Strategy may carry without\\n    /// @dev By default this is 0, meaning any losses would cause a harvest which\\n    /// will subsequently report the loss to the Manager for tracking.\\n    function setDebtThreshold(uint256 _debtThreshold) external onlyRole(GUARDIAN_ROLE) {\\n        debtThreshold = _debtThreshold;\\n        emit UpdatedDebtThreshold(_debtThreshold);\\n    }\\n\\n    /// @notice Removes tokens from this Strategy that are not the type of tokens\\n    /// managed by this Strategy. This may be used in case of accidentally\\n    /// sending the wrong kind of token to this Strategy.\\n    ///\\n    /// Tokens will be sent to `governance()`.\\n    ///\\n    /// This will fail if an attempt is made to sweep `want`, or any tokens\\n    /// that are protected by this Strategy.\\n    ///\\n    /// This may only be called by governance.\\n    /// @param _token The token to transfer out of this `PoolManager`.\\n    /// @param to Address to send the tokens to.\\n    /// @dev\\n    /// Implement `_protectedTokens()` to specify any additional tokens that\\n    /// should be protected from sweeping in addition to `want`.\\n    function sweep(address _token, address to) external onlyRole(GUARDIAN_ROLE) {\\n        require(_token != address(want), \\\"93\\\");\\n\\n        address[] memory __protectedTokens = _protectedTokens();\\n        for (uint256 i = 0; i < __protectedTokens.length; i++)\\n            // In the strategy we use so far, the only protectedToken is the want token\\n            // and this has been checked above\\n            require(_token != __protectedTokens[i], \\\"93\\\");\\n\\n        IERC20(_token).safeTransfer(to, IERC20(_token).balanceOf(address(this)));\\n    }\\n\\n    // ============================ Manager functions ==============================\\n\\n    /// @notice Adds a new guardian address and echoes the change to the contracts\\n    /// that interact with this collateral `PoolManager`\\n    /// @param _guardian New guardian address\\n    /// @dev This internal function has to be put in this file because Access Control is not defined\\n    /// in PoolManagerInternal\\n    function addGuardian(address _guardian) external virtual;\\n\\n    /// @notice Revokes the guardian role and propagates the change to other contracts\\n    /// @param guardian Old guardian address to revoke\\n    function revokeGuardian(address guardian) external virtual;\\n}\\n\"\n    },\n    \"contracts/strategies/AaveFlashloanStrategy/ComputeProfitability.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\n/// @title ComputeProfitability\\n/// @author Angle Core Team\\n/// @notice Helper contract to get the optimal borrow amount from a set of provided parameters from Aave\\nlibrary ComputeProfitability {\\n    struct SCalculateBorrow {\\n        int256 reserveFactor;\\n        int256 totalStableDebt;\\n        int256 totalVariableDebt;\\n        int256 totalDeposits;\\n        int256 stableBorrowRate;\\n        int256 rewardDeposit;\\n        int256 rewardBorrow;\\n        int256 strategyAssets;\\n        int256 guessedBorrowAssets;\\n        int256 slope1;\\n        int256 slope2;\\n        int256 r0;\\n        int256 uOptimal;\\n    }\\n\\n    int256 private constant _BASE_RAY = 10**27;\\n\\n    /// @notice Computes the Aave utilization ratio\\n    function _computeUtilization(int256 borrow, SCalculateBorrow memory parameters) internal pure returns (int256) {\\n        return\\n            ((parameters.totalStableDebt + parameters.totalVariableDebt + borrow) * _BASE_RAY) /\\n            (parameters.totalDeposits + borrow);\\n    }\\n\\n    /// @notice Computes the derivative of the utilization ratio with respect to the amount borrowed\\n    function _computeUprime(int256 borrow, SCalculateBorrow memory parameters) internal pure returns (int256) {\\n        return\\n            ((parameters.totalDeposits - parameters.totalStableDebt - parameters.totalVariableDebt) * _BASE_RAY) /\\n            (parameters.totalDeposits + borrow);\\n    }\\n\\n    /// @notice Computes the value of the interest rate, its first and second order derivatives\\n    /// @dev The returned value is in `_BASE_RAY`\\n    function _calculateInterestPrimes(int256 borrow, SCalculateBorrow memory parameters)\\n        internal\\n        pure\\n        returns (\\n            int256 interest,\\n            int256 interestPrime,\\n            int256 interestPrime2\\n        )\\n    {\\n        int256 newUtilization = _computeUtilization(borrow, parameters);\\n        int256 denomUPrime = (parameters.totalDeposits + borrow);\\n        int256 uprime = _computeUprime(borrow, parameters);\\n        uprime = (uprime * _BASE_RAY) / denomUPrime;\\n        int256 uprime2nd = -2 * uprime;\\n        uprime2nd = (uprime2nd * _BASE_RAY) / denomUPrime;\\n        if (newUtilization < parameters.uOptimal) {\\n            interest = parameters.r0 + (parameters.slope1 * newUtilization) / parameters.uOptimal;\\n            interestPrime = (parameters.slope1 * uprime) / parameters.uOptimal;\\n            interestPrime2 = (parameters.slope1 * uprime2nd) / parameters.uOptimal;\\n        } else {\\n            interest =\\n                parameters.r0 +\\n                parameters.slope1 +\\n                (parameters.slope2 * (newUtilization - parameters.uOptimal)) /\\n                (_BASE_RAY - parameters.uOptimal);\\n            interestPrime = (parameters.slope2 * uprime) / (_BASE_RAY - parameters.uOptimal);\\n            interestPrime2 = (parameters.slope2 * uprime2nd) / (_BASE_RAY - parameters.uOptimal);\\n        }\\n    }\\n\\n    /// @notice Computes the value of the revenue, as well as its first and second order derivatives\\n    function _revenuePrimes(\\n        int256 borrow,\\n        SCalculateBorrow memory parameters,\\n        bool onlyRevenue\\n    )\\n        internal\\n        pure\\n        returns (\\n            int256 revenue,\\n            int256 revenuePrime,\\n            int256 revenuePrime2nd\\n        )\\n    {\\n        (int256 newRate, int256 newRatePrime, int256 newRatePrime2) = _calculateInterestPrimes(borrow, parameters);\\n\\n        // 0 order derivative\\n        int256 proportionStrat = ((borrow + parameters.strategyAssets) * (_BASE_RAY - parameters.reserveFactor)) /\\n            (borrow + parameters.totalDeposits);\\n        int256 poolYearlyRevenue = (parameters.totalStableDebt *\\n            parameters.stableBorrowRate +\\n            (borrow + parameters.totalVariableDebt) *\\n            newRate) / _BASE_RAY;\\n\\n        revenue =\\n            (proportionStrat * poolYearlyRevenue) /\\n            _BASE_RAY +\\n            (borrow * parameters.rewardBorrow) /\\n            (borrow + parameters.totalVariableDebt) +\\n            ((borrow + parameters.strategyAssets) * parameters.rewardDeposit) /\\n            (borrow + parameters.totalDeposits) -\\n            (borrow * newRate) /\\n            _BASE_RAY;\\n\\n        if (!onlyRevenue) {\\n            // 1st order derivative\\n            {\\n                // Computing block per block to avoid stack too deep errors\\n                int256 proportionStratPrime = ((parameters.totalDeposits - parameters.strategyAssets) *\\n                    (_BASE_RAY - parameters.reserveFactor)) / (borrow + parameters.totalDeposits);\\n                proportionStratPrime = (proportionStratPrime * _BASE_RAY) / (borrow + parameters.totalDeposits);\\n                int256 poolYearlyRevenuePrime = (newRate *\\n                    _BASE_RAY +\\n                    (borrow + parameters.totalVariableDebt) *\\n                    newRatePrime) / _BASE_RAY;\\n\\n                revenuePrime = ((proportionStratPrime * poolYearlyRevenue + poolYearlyRevenuePrime * proportionStrat) /\\n                    _BASE_RAY);\\n\\n                {\\n                    int256 proportionStratPrime2nd = (-2 * (proportionStratPrime * (_BASE_RAY))) /\\n                        ((borrow + parameters.totalDeposits));\\n                    revenuePrime2nd =\\n                        2 *\\n                        proportionStratPrime *\\n                        poolYearlyRevenuePrime +\\n                        proportionStratPrime2nd *\\n                        poolYearlyRevenue;\\n                }\\n                poolYearlyRevenuePrime =\\n                    (2 * newRatePrime * _BASE_RAY + (borrow + parameters.totalVariableDebt) * newRatePrime2) /\\n                    _BASE_RAY;\\n\\n                revenuePrime2nd = (revenuePrime2nd + poolYearlyRevenuePrime * proportionStrat) / _BASE_RAY;\\n            }\\n\\n            int256 costPrime = (newRate * _BASE_RAY + borrow * newRatePrime) / _BASE_RAY;\\n            int256 rewardBorrowPrime = (parameters.rewardBorrow * (parameters.totalVariableDebt)) /\\n                (borrow + parameters.totalVariableDebt);\\n            rewardBorrowPrime = (rewardBorrowPrime * _BASE_RAY) / (borrow + parameters.totalVariableDebt);\\n            int256 rewardDepositPrime = (parameters.rewardDeposit *\\n                (parameters.totalDeposits - parameters.strategyAssets)) / (borrow + parameters.totalDeposits);\\n            rewardDepositPrime = (rewardDepositPrime * _BASE_RAY) / (borrow + parameters.totalDeposits);\\n\\n            revenuePrime += rewardBorrowPrime + rewardDepositPrime - costPrime;\\n\\n            // 2nd order derivative\\n            // Reusing variables for the stack too deep issue\\n            costPrime = ((2 * newRatePrime * _BASE_RAY) + borrow * newRatePrime2) / _BASE_RAY;\\n            rewardBorrowPrime = (-2 * rewardBorrowPrime * _BASE_RAY) / (borrow + parameters.totalVariableDebt);\\n            rewardDepositPrime = (-2 * rewardDepositPrime * _BASE_RAY) / (borrow + parameters.totalDeposits);\\n\\n            revenuePrime2nd += (rewardBorrowPrime + rewardDepositPrime) - costPrime;\\n        }\\n    }\\n\\n    /// @notice Returns the absolute value of an integer\\n    function _abs(int256 x) private pure returns (int256) {\\n        return x >= 0 ? x : -x;\\n    }\\n\\n    /// @notice Computes the optimal borrow amount of the strategy depending on Aave protocol parameters\\n    /// to maximize folding revenues\\n    /// @dev Performs a newton Raphson approximation to get the zero point of the derivative of the\\n    /// revenue function of the protocol depending on the amount borrowed\\n    function computeProfitability(SCalculateBorrow memory parameters) internal pure returns (int256 borrow) {\\n        (int256 y, , ) = _revenuePrimes(0, parameters, true);\\n        (int256 revenueWithBorrow, , ) = _revenuePrimes(_BASE_RAY, parameters, true);\\n\\n        if (revenueWithBorrow <= y) {\\n            return 0;\\n        }\\n        uint256 count;\\n        int256 borrowInit;\\n        int256 grad;\\n        int256 grad2nd;\\n        borrow = parameters.guessedBorrowAssets;\\n        // Tolerance is 1% in this method: indeed we're stopping: `_abs(borrowInit - borrow)/ borrowInit < 10**(-2)`\\n        while (count < 10 && (count == 0 || _abs(borrowInit - borrow) * (10**2 / 5) > borrowInit)) {\\n            (, grad, grad2nd) = _revenuePrimes(borrow, parameters, false);\\n            borrowInit = borrow;\\n            borrow = borrowInit - (grad * _BASE_RAY) / grad2nd;\\n            count += 1;\\n        }\\n\\n        (int256 x, , ) = _revenuePrimes(borrow, parameters, true);\\n        if (x <= y) {\\n            borrow = 0;\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC3156FlashLender.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC3156 FlashLender, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashLender {\\n    /**\\n     * @dev The amount of currency available to be lended.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\"\n    },\n    \"contracts/strategies/AaveFlashloanStrategy/ComputeProfitabilityTest.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"./ComputeProfitability.sol\\\";\\n\\n/// @title ComputeProfitabilityTest\\n/// @author Angle Core Team\\n/// @notice Wrapper contract to ComputeProfitability for testing purpose\\ncontract ComputeProfitabilityTest {\\n    /// @notice external version of _calculateInterestPrimes\\n    function calculateInterestPrimes(int256 borrow, ComputeProfitability.SCalculateBorrow memory parameters)\\n        external\\n        pure\\n        returns (\\n            int256,\\n            int256,\\n            int256\\n        )\\n    {\\n        return ComputeProfitability._calculateInterestPrimes(borrow, parameters);\\n    }\\n\\n    /// @notice External version of _revenuePrimes\\n    function revenuePrimes(\\n        int256 borrow,\\n        ComputeProfitability.SCalculateBorrow memory parameters,\\n        bool onlyRevenue\\n    )\\n        external\\n        pure\\n        returns (\\n            int256,\\n            int256,\\n            int256\\n        )\\n    {\\n        return ComputeProfitability._revenuePrimes(borrow, parameters, onlyRevenue);\\n    }\\n\\n    /// @notice Computes the optimal borrow amount of the strategy depending on Aave protocol parameters\\n    /// to maximize folding revenues\\n    function computeProfitability(ComputeProfitability.SCalculateBorrow memory parameters)\\n        external\\n        pure\\n        returns (int256)\\n    {\\n        return ComputeProfitability.computeProfitability(parameters);\\n    }\\n}\\n\"\n    },\n    \"contracts/mock/MockCurveStETHETH.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// Contract we have to fix flash attacks\\ncontract MockCurveStETHETH {\\n    using SafeERC20 for IERC20;\\n\\n    address public stETH;\\n    uint256 public dy;\\n\\n    constructor(address _stETH) {\\n        stETH = _stETH;\\n        dy = 10**18;\\n    }\\n\\n    receive() external payable {}\\n\\n    function exchange(\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256\\n    ) external payable {\\n        if (from == 0 && to == 1) {\\n            IERC20(stETH).transfer(msg.sender, (msg.value * dy) / 10**18);\\n        } else {\\n            IERC20(stETH).transferFrom(msg.sender, address(this), _from_amount);\\n            (bool sent, ) = msg.sender.call{ value: (_from_amount * 10**18) / dy }(\\\"\\\");\\n            require(sent, \\\"Failed to send Ether\\\");\\n        }\\n    }\\n\\n    function setDy(uint256 _dy) external {\\n        dy = _dy;\\n    }\\n\\n    function get_dy(\\n        int128,\\n        int128,\\n        uint256 _from_amount\\n    ) external view returns (uint256) {\\n        return (_from_amount * dy) / 10**18;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\n    },\n    \"contracts/external/TransparentUpgradeableProxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin. It is fully forked from OpenZeppelin\\n * `TransparentUpgradeableProxy`\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\"\n    },\n    \"contracts/mock/MockAave.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol\\\";\\n\\nimport \\\"../strategies/AaveFlashloanStrategy/AaveInterfaces.sol\\\";\\n\\nabstract contract MockAave is\\n    IAaveIncentivesController,\\n    ILendingPoolAddressesProvider,\\n    IReserveInterestRateStrategy,\\n    IStakedAave\\n{\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant BASE = 10**27;\\n\\n    uint256 public distributionEnd = type(uint256).max;\\n    uint256 public emissionsPerSecond = 10;\\n    uint256 public unstakeWindow = type(uint256).max;\\n    uint256 public stakersCooldownsValue = 0;\\n    uint256 public rewardsBalance = 0;\\n\\n    function getRewardsBalance(address[] calldata, address) external view override returns (uint256) {\\n        return rewardsBalance;\\n    }\\n\\n    function setRewardsBalance(uint256 _rewardsBalance) external {\\n        rewardsBalance = _rewardsBalance;\\n    }\\n\\n    function claimRewards(\\n        address[] calldata,\\n        uint256,\\n        address\\n    ) external pure override returns (uint256) {\\n        return uint256(0);\\n    }\\n\\n    function getDistributionEnd() external view override returns (uint256) {\\n        return distributionEnd;\\n    }\\n\\n    function setDistributionEnd(uint256 _distributionEnd) external {\\n        distributionEnd = _distributionEnd;\\n    }\\n\\n    function getAssetData(address)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (0, emissionsPerSecond, 0);\\n    }\\n\\n    function setEmissionsPerSecond(uint256 _emissionsPerSecond) external {\\n        emissionsPerSecond = _emissionsPerSecond;\\n    }\\n\\n    function getLendingPool() external view override returns (address) {\\n        return address(this);\\n    }\\n\\n    function calculateInterestRates(\\n        address,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256\\n    )\\n        external\\n        pure\\n        override\\n        returns (\\n            uint256 liquidityRate,\\n            uint256 stableBorrowRate,\\n            uint256 variableBorrowRate\\n        )\\n    {\\n        return (0.04 ether, 0.04 ether, 0.04 ether);\\n    }\\n\\n    function stake(address to, uint256 amount) external override {}\\n\\n    function redeem(address to, uint256 amount) external override {}\\n\\n    function cooldown() external override {}\\n\\n    function claimRewards(address to, uint256 amount) external override {}\\n\\n    function getTotalRewardsBalance(address) external view override returns (uint256) {}\\n\\n    function COOLDOWN_SECONDS() external pure override returns (uint256) {\\n        return 0;\\n    }\\n\\n    function stakersCooldowns(address) external view override returns (uint256) {\\n        return stakersCooldownsValue;\\n    }\\n\\n    function UNSTAKE_WINDOW() external view override returns (uint256) {\\n        return unstakeWindow;\\n    }\\n\\n    function setUnstakeWindowAndStakers(uint256 _unstakeWindow, uint256 _stakersCooldownsValue) external {\\n        unstakeWindow = _unstakeWindow;\\n        stakersCooldownsValue = _stakersCooldownsValue;\\n    }\\n\\n    function getPriceOracle() external override view returns (address) {\\n        return address(this);\\n    }\\n\\n    function getAssetsPrices(address[] calldata) external pure returns (uint256[] memory) {\\n        uint256[] memory _ret = new uint256[](2);\\n        _ret[0] = uint256(392936527437060);\\n        _ret[1] = uint256(394087347138603);\\n        return _ret;\\n    }\\n}\\n\\ncontract MockMKRLender {\\n    mapping(address => uint256) public maxFlashLoan;\\n    uint256 public compilerMuter;\\n\\n    constructor(address _token, uint256 _maxFlashLoan) {\\n        maxFlashLoan[_token] = _maxFlashLoan;\\n    }\\n\\n    function flashFee(address, uint256) external view returns (uint256) {\\n        compilerMuter;\\n        return 0;\\n    }\\n\\n    function flashLoan(\\n        IERC3156FlashBorrower,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external returns (bool) {\\n        compilerMuter = 0;\\n        return true;\\n    }\\n}\\n\\ncontract MockAToken is ERC20 {\\n    event Minting(address indexed _to, address indexed _minter, uint256 _amount);\\n    event Burning(address indexed _from, address indexed _burner, uint256 _amount);\\n\\n    /// @notice constructor\\n    /// @param name_ of the token lent\\n    /// @param symbol_ of the token lent\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 decimals\\n    ) ERC20(name_, symbol_) {}\\n\\n    function mint(address account, uint256 amount) external {\\n        _mint(account, amount);\\n        emit Minting(account, msg.sender, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) public {\\n        _burn(account, amount);\\n        emit Burning(account, msg.sender, amount);\\n    }\\n\\n    function getIncentivesController() external view returns (IAaveIncentivesController) {\\n        return IAaveIncentivesController(address(this));\\n    }\\n}\\n\\nabstract contract MockLendingPool is ILendingPool {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant BASE = 10**27;\\n\\n    MockAToken public immutable aToken;\\n    MockAToken public immutable debtToken;\\n    uint128 public currentLiquidityRate = 0;\\n    uint256 public compilerMuter;\\n\\n    constructor(address _aToken, address _debtToken) {\\n        aToken = MockAToken(_aToken);\\n        debtToken = MockAToken(_debtToken);\\n    }\\n\\n    mapping(address => uint256) public reserveNormalizedIncomes; // Mapping between an underlying asset and its reserveNoramlized income\\n\\n    function deployNewUnderlying(address underlying) external {\\n        reserveNormalizedIncomes[underlying] = BASE;\\n    }\\n\\n    function getReserveNormalizedIncome(address asset) external override view returns (uint256) {\\n        return reserveNormalizedIncomes[asset] / BASE;\\n    }\\n\\n    function changeReserveNormalizedIncome(uint256 newIncome, address asset) external {\\n        reserveNormalizedIncomes[asset] = newIncome * BASE;\\n    }\\n\\n    function setCurrentLiquidityRate(uint128 _liquidityRate) external {\\n        currentLiquidityRate = _liquidityRate;\\n    }\\n\\n    function getReserveData(address) external view override returns (DataTypes.ReserveData memory) {\\n        return\\n            DataTypes.ReserveData(\\n                DataTypes.ReserveConfigurationMap(uint256(0)),\\n                uint128(0),\\n                uint128(0),\\n                currentLiquidityRate,\\n                uint128(0),\\n                uint128(0),\\n                uint40(0),\\n                address(this),\\n                address(this),\\n                address(this),\\n                address(this),\\n                uint8(0)\\n            );\\n    }\\n\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16\\n    ) external override {\\n        IERC20 underlying = IERC20(asset);\\n        underlying.safeTransferFrom(msg.sender, address(this), amount);\\n        // With Aave the amount of cToken is exactly what has been given\\n        uint256 reserveNormalizedIncome_ = reserveNormalizedIncomes[asset];\\n        aToken.mint(onBehalfOf, (amount * BASE) / reserveNormalizedIncome_); // Here we don't exactly respect what Aave is doing\\n    }\\n\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external override returns (uint256) {\\n        uint256 reserveNormalizedIncome_ = reserveNormalizedIncomes[asset];\\n        uint256 amountcToken = (amount * BASE) / reserveNormalizedIncome_;\\n        aToken.burn(msg.sender, amountcToken);\\n        uint256 amountToken = (amountcToken * reserveNormalizedIncome_) / BASE;\\n        IERC20(asset).safeTransfer(to, amountToken);\\n        return (amountToken);\\n    }\\n\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external override {}\\n\\n    function repay(\\n        address,\\n        uint256,\\n        uint256,\\n        address\\n    ) external override returns (uint256) {\\n        compilerMuter = 0;\\n        return 0;\\n    }\\n}\\n\\ncontract MockProtocolDataProvider {\\n    uint256 public availableLiquidityStorage = 0;\\n\\n    address public immutable aToken;\\n    address public immutable debtToken;\\n    MockAave public immutable mockAave;\\n\\n    constructor(\\n        address _aToken,\\n        address _debtToken,\\n        address _mockAave\\n    ) {\\n        aToken = _aToken;\\n        debtToken = _debtToken;\\n        mockAave = MockAave(_mockAave);\\n    }\\n\\n    function getReserveTokensAddresses(address)\\n        external\\n        view\\n        returns (\\n            address aTokenAddress,\\n            address stableDebtTokenAddress,\\n            address variableDebtTokenAddress\\n        )\\n    {\\n        aTokenAddress = aToken;\\n        stableDebtTokenAddress = debtToken;\\n        variableDebtTokenAddress = debtToken;\\n    }\\n\\n    function ADDRESSES_PROVIDER() external view returns (ILendingPoolAddressesProvider) {\\n        return ILendingPoolAddressesProvider(mockAave);\\n    }\\n\\n    function getReserveConfigurationData(address)\\n        external\\n        pure\\n        returns (\\n            uint256 decimals,\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            uint256 reserveFactor,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive,\\n            bool isFrozen\\n        )\\n    {\\n        // https://etherscan.io/address/0x057835ad21a177dbdd3090bb1cae03eacf78fc6d#readContract\\n        return (uint256(6), uint256(8250), uint256(8500), uint256(10400), uint256(1000), true, true, true, true, false);\\n    }\\n\\n    function setAvailableLiquidity(uint256 _availableLiquidity) external {\\n        availableLiquidityStorage = _availableLiquidity;\\n    }\\n\\n    function getReserveData(address)\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        )\\n    {\\n        availableLiquidity = availableLiquidityStorage;\\n        return (\\n            availableLiquidity,\\n            uint256(0),\\n            uint256(0),\\n            uint256(0),\\n            uint256(0),\\n            uint256(0),\\n            uint256(0),\\n            uint256(0),\\n            uint256(0),\\n            uint40(0)\\n        );\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\n    },\n    \"contracts/mock/MockToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract MockToken is ERC20 {\\n    event Minting(address indexed _to, address indexed _minter, uint256 _amount);\\n\\n    event Burning(address indexed _from, address indexed _burner, uint256 _amount);\\n\\n    uint8 internal _decimal;\\n\\n    /// @notice stablecoin constructor\\n    /// @param name_ the stablecoin name (example 'agEUR')\\n    /// @param symbol_ the stablecoin symbol ('agEUR')\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimal_\\n    ) ERC20(name_, symbol_) {\\n        _decimal = decimal_;\\n    }\\n\\n    /// @dev Returns the number of decimals used to get its user representation.\\n    /// For example, if `decimals` equals `2`, a balance of `505` tokens should\\n    /// be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n    function decimals() public view override returns (uint8) {\\n        return _decimal;\\n    }\\n\\n    /// @notice allow to mint\\n    /// @param account the account to mint to\\n    /// @param amount the amount to mint\\n    function mint(address account, uint256 amount) external {\\n        _mint(account, amount);\\n        emit Minting(account, msg.sender, amount);\\n    }\\n\\n    /// @notice allow to burn\\n    /// @param account the account to burn from\\n    /// @param amount the amount of agToken to burn from caller\\n    function burn(address account, uint256 amount) public {\\n        _burn(account, amount);\\n        emit Burning(account, msg.sender, amount);\\n    }\\n\\n    function setAllowance(address from, address to) public {\\n        _approve(from, to, type(uint256).max);\\n    }\\n}\\n\"\n    },\n    \"contracts/mock/MockStETH.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./MockToken.sol\\\";\\n\\ncontract MockStETH is MockToken {\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    /// @notice stablecoin constructor\\n    /// @param name_ the stablecoin name (example 'agEUR')\\n    /// @param symbol_ the stablecoin symbol ('agEUR')\\n    /// @dev To account for the fact that the balance increases we can simply mint stETH to the concerned address\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimal_\\n    ) MockToken(name_, symbol_, decimal_) {}\\n\\n    receive() external payable {}\\n\\n    function submit(address) external payable returns (uint256) {\\n        _mint(msg.sender, msg.value);\\n        return msg.value;\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 3500\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\",\n          \"devdoc\",\n          \"userdoc\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "cca16ad1f0f505ca7a8330fb58e463cc",
      "transactionHash": "0xe46165728b4cba73047f3b387642b6c7283bfdf2da684034e6322472ccca3d4e",
      "args": []
    },
    "decoded": {
      "from": "0xfdA462548Ce04282f4B6D6619823a7C64Fdc0185",
      "gasPrice": "42119563210",
      "maxFeePerGas": "42119563210",
      "maxPriorityFeePerGas": "1500000000",
      "gasLimit": "1926239",
      "to": null,
      "value": "0",
      "nonce": 445,
      "data": "0x61221261003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061007c5760003560e01c80638237e5381161005a5780638237e538146100ea578063bf04d6e814610111578063bf5061df1461013157600080fd5b806338a1046d1461008157806339ec407b146100b957806370c0345c146100d4575b600080fd5b61009c731eb4cf3a948e7d72a198fe073ccb8c7a948cd85381565b6040516001600160a01b0390911681526020015b60405180910390f35b61009c73028171bca77440897b824ca71d1c56cac55b68a381565b6100dc610151565b6040519081526020016100b0565b6100dc7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd981565b81801561011d57600080fd5b506100dc61012c366004611d29565b610208565b81801561013d57600080fd5b506100dc61014c366004611cd7565b610be2565b6040517f613255ab000000000000000000000000000000000000000000000000000000008152736b175474e89094c44da98b954eedeac495271d0f6004820152600090731eb4cf3a948e7d72a198fe073ccb8c7a948cd8539063613255ab9060240160206040518083038186803b1580156101cb57600080fd5b505afa1580156101df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102039190611e60565b905090565b6000736b175474e89094c44da98b954eedeac495271d0f6001600160a01b0383168114737d2768de32b0b80b7a3454c06bdac94a69ddc7a981156106ec5787156104d2576001600160a01b03811663e8eda9df846102668a8a612112565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015230604482015260006064820152608401600060405180830381600087803b1580156102d157600080fd5b505af11580156102e5573d6000803e3d6000fd5b50506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03808516935063573ade8192508691908216906370a082319060240160206040518083038186803b15801561034e57600080fd5b505afa158015610362573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103869190611e60565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015260026044820152306064820152608401602060405180830381600087803b1580156103f157600080fd5b505af1158015610405573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104299190611e60565b506040517f69328dec0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018890523060448301528216906369328dec906064015b602060405180830381600087803b15801561049457600080fd5b505af11580156104a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cc9190611e60565b50610bb5565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038083169163e8eda9df918691908216906370a082319060240160206040518083038186803b15801561053757600080fd5b505afa15801561054b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056f9190611e60565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015230604482015260006064820152608401600060405180830381600087803b1580156105da57600080fd5b505af11580156105ee573d6000803e3d6000fd5b50506040517fa415bcad0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018b905260026044830152600060648301523060848301528416925063a415bcad915060a401600060405180830381600087803b15801561066957600080fd5b505af115801561067d573d6000803e3d6000fd5b50505050806001600160a01b03166369328dec84898961069d9190612112565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015230604482015260640161047a565b6040517fe8eda9df0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018890523060448301526000606483015282169063e8eda9df90608401600060405180830381600087803b15801561075c57600080fd5b505af1158015610770573d6000803e3d6000fd5b505050508715610962576040517f69328dec0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018990523060448301528216906369328dec90606401602060405180830381600087803b1580156107e357600080fd5b505af11580156107f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081b9190611e60565b506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038083169163573ade81918891908216906370a082319060240160206040518083038186803b15801561088157600080fd5b505afa158015610895573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b99190611e60565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015260026044820152306064820152608401602060405180830381600087803b15801561092457600080fd5b505af1158015610938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095c9190611e60565b50610b12565b6040517fa415bcad0000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015260248201899052600260448301526000606483015230608483015282169063a415bcad9060a401600060405180830381600087803b1580156109d957600080fd5b505af11580156109ed573d6000803e3d6000fd5b50506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03808516935063e8eda9df92508891908216906370a082319060240160206040518083038186803b158015610a5657600080fd5b505afa158015610a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8e9190611e60565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015230604482015260006064820152608401600060405180830381600087803b158015610af957600080fd5b505af1158015610b0d573d6000803e3d6000fd5b505050505b6040517f69328dec0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018890523060448301528216906369328dec90606401602060405180830381600087803b158015610b7b57600080fd5b505af1158015610b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb39190611e60565b505b507f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9979650505050505050565b600084610bf157506000611315565b5083736b175474e89094c44da98b954eedeac495271d0f600084670de0b6b3a7640000610c1e858961131e565b610c2891906120f3565b610c329190611fcd565b905060008415610c5557610c46858861131e565b9050610c528183611fb5565b91505b6000610c5f610151565b6040517f35ea6a750000000000000000000000000000000000000000000000000000000081526001600160a01b0386166004820152909150600090737d2768de32b0b80b7a3454c06bdac94a69ddc7a9906335ea6a75906024016101806040518083038186803b158015610cd257600080fd5b505afa158015610ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0a9190611d73565b602001516040517fd15e00530000000000000000000000000000000000000000000000000000000081526001600160a01b03871660048201526fffffffffffffffffffffffffffffffff9091169150600090737d2768de32b0b80b7a3454c06bdac94a69ddc7a99063d15e00539060240160206040518083038186803b158015610d9357600080fd5b505afa158015610da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcb9190611e60565b9050600082610ddb600282611fcd565b610df16b033b2e3c9fd0803ce8000000896120f3565b610dfb9190611fb5565b610e059190611fcd565b90506b033b2e3c9fd0803ce8000000610e1f600282611fcd565b610e2984846120f3565b610e339190611fb5565b610e3d9190611fcd565b955083861115610ef75781610e5f60026b033b2e3c9fd0803ce8000000611fcd565b610e756b033b2e3c9fd0803ce8000000876120f3565b610e7f9190612112565b610e899190611fcd565b95506b033b2e3c9fd0803ce8000000610ea3600285611fcd565b610ead85896120f3565b610eb79190612112565b610ec19190611fcd565b9550670de0b6b3a76400008a610ee0610eda888a612112565b8e6116d6565b610eea91906120f3565b610ef49190611fcd565b97505b505050505060008884604051602001610f1c9291909115158252602082015260400190565b60408051808303601f19018152908290527fd9d98ce40000000000000000000000000000000000000000000000000000000082526001600160a01b0385166004830152602482018490529150600090731eb4cf3a948e7d72a198fe073ccb8c7a948cd8539063d9d98ce49060440160206040518083038186803b158015610fa257600080fd5b505afa158015610fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fda9190611e60565b90508015610fe757600080fd5b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152306004820152731eb4cf3a948e7d72a198fe073ccb8c7a948cd85360248201526000906001600160a01b0386169063dd62ed3e9060440160206040518083038186803b15801561105c57600080fd5b505afa158015611070573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110949190611e60565b9050838110156111fc576040517f095ea7b3000000000000000000000000000000000000000000000000000000008152731eb4cf3a948e7d72a198fe073ccb8c7a948cd8536004820152600060248201526001600160a01b0386169063095ea7b390604401602060405180830381600087803b15801561111357600080fd5b505af1158015611127573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114b9190611cba565b506040517f095ea7b3000000000000000000000000000000000000000000000000000000008152731eb4cf3a948e7d72a198fe073ccb8c7a948cd853600482015260001960248201526001600160a01b0386169063095ea7b390604401602060405180830381600087803b1580156111c257600080fd5b505af11580156111d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fa9190611cba565b505b6040517f5cffe9de000000000000000000000000000000000000000000000000000000008152731eb4cf3a948e7d72a198fe073ccb8c7a948cd85390635cffe9de90611252903090899089908990600401611ee1565b602060405180830381600087803b15801561126c57600080fd5b505af1158015611280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a49190611cba565b50604080518b815260208101889052908101859052606081018890528b15156080820152731eb4cf3a948e7d72a198fe073ccb8c7a948cd85360a08201527f1b861d4c31d2586a4a0ba63fafad6452b1baf4e1dc2f751a97fef380b34032a79060c00160405180910390a150505050505b95945050505050565b6000736b175474e89094c44da98b954eedeac495271d0f831580611343575060001984145b8061135f5750806001600160a01b0316836001600160a01b0316145b1561136d57839150506116d0565b6001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc214156114c95761139a611a5a565b6040517fb3596f070000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152919091169063b3596f079060240160206040518083038186803b1580156113f657600080fd5b505afa15801561140a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142e9190611e60565b816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561146757600080fd5b505afa15801561147b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149f9190611e79565b6114ad9060ff16600a61204b565b6114b790866120f3565b6114c19190611fcd565b9150506116d0565b60408051600280825260608201835260009260208301908036833701905050905083816000815181106114fe576114fe612158565b60200260200101906001600160a01b031690816001600160a01b031681525050818160018151811061153257611532612158565b60200260200101906001600160a01b031690816001600160a01b031681525050600061155c611a5a565b6001600160a01b0316639d23d9f2836040518263ffffffff1660e01b81526004016115879190611e94565b60006040518083038186803b15801561159f57600080fd5b505afa1580156115b3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115db9190810190611c0d565b90506000856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561161857600080fd5b505afa15801561162c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116509190611e79565b61165e9060ff16600a61204b565b8260008151811061167157611671612158565b60200260200101518861168491906120f3565b61168e9190611fcd565b9050816001815181106116a3576116a3612158565b6020026020010151670de0b6b3a7640000826116bf91906120f3565b6116c99190611fcd565b9450505050505b92915050565b6000736b175474e89094c44da98b954eedeac495271d0f8315806116fb575060001984145b806117175750806001600160a01b0316836001600160a01b0316145b1561172557839150506116d0565b6001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2141561186557806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561178357600080fd5b505afa158015611797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117bb9190611e79565b6117c99060ff16600a61204b565b6117d1611a5a565b6040517fb3596f070000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063b3596f079060240160206040518083038186803b15801561182d57600080fd5b505afa158015611841573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ad9190611e60565b604080516002808252606082018352600092602083019080368337019050509050838160008151811061189a5761189a612158565b60200260200101906001600160a01b031690816001600160a01b03168152505081816001815181106118ce576118ce612158565b60200260200101906001600160a01b031690816001600160a01b03168152505060006118f8611a5a565b6001600160a01b0316639d23d9f2836040518263ffffffff1660e01b81526004016119239190611e94565b60006040518083038186803b15801561193b57600080fd5b505afa15801561194f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119779190810190611c0d565b90506000670de0b6b3a76400008260018151811061199757611997612158565b6020026020010151886119aa91906120f3565b6119b49190611fcd565b9050816000815181106119c9576119c9612158565b6020026020010151866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611a0a57600080fd5b505afa158015611a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a429190611e79565b611a509060ff16600a61204b565b6116bf90836120f3565b600073057835ad21a177dbdd3090bb1cae03eacf78fc6d6001600160a01b0316630542975c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611aa957600080fd5b505afa158015611abd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae19190611be9565b6001600160a01b031663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b158015611b1957600080fd5b505afa158015611b2d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102039190611be9565b8051611b5c816121b6565b919050565b600060208284031215611b7357600080fd5b6040516020810181811067ffffffffffffffff82111715611b9657611b96612187565b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff81168114611b5c57600080fd5b805164ffffffffff81168114611b5c57600080fd5b805160ff81168114611b5c57600080fd5b600060208284031215611bfb57600080fd5b8151611c06816121b6565b9392505050565b60006020808385031215611c2057600080fd5b825167ffffffffffffffff80821115611c3857600080fd5b818501915085601f830112611c4c57600080fd5b815181811115611c5e57611c5e612187565b8060051b9150611c6f848301611f84565b8181528481019084860184860187018a1015611c8a57600080fd5b600095505b83861015611cad578051835260019590950194918601918601611c8f565b5098975050505050505050565b600060208284031215611ccc57600080fd5b8151611c06816121ce565b600080600080600060a08688031215611cef57600080fd5b8535611cfa816121ce565b9450602086013593506040860135611d11816121b6565b94979396509394606081013594506080013592915050565b60008060008060808587031215611d3f57600080fd5b8435611d4a816121ce565b935060208501359250604085013591506060850135611d68816121b6565b939692955090935050565b60006101808284031215611d8657600080fd5b611d8e611f5a565b611d988484611b61565b8152611da660208401611ba3565b6020820152611db760408401611ba3565b6040820152611dc860608401611ba3565b6060820152611dd960808401611ba3565b6080820152611dea60a08401611ba3565b60a0820152611dfb60c08401611bc3565b60c0820152611e0c60e08401611b51565b60e0820152610100611e1f818501611b51565b90820152610120611e31848201611b51565b90820152610140611e43848201611b51565b90820152610160611e55848201611bd8565b908201529392505050565b600060208284031215611e7257600080fd5b5051919050565b600060208284031215611e8b57600080fd5b611c0682611bd8565b6020808252825182820181905260009190848201906040850190845b81811015611ed55783516001600160a01b031683529284019291840191600101611eb0565b50909695505050505050565b60006001600160a01b038087168352602081871681850152856040850152608060608501528451915081608085015260005b82811015611f2f5785810182015185820160a001528101611f13565b82811115611f4157600060a084870101525b5050601f01601f19169190910160a00195945050505050565b604051610180810167ffffffffffffffff81118282101715611f7e57611f7e612187565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611fad57611fad612187565b604052919050565b60008219821115611fc857611fc8612129565b500190565b600082612003577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600181815b8085111561204357816000190482111561202957612029612129565b8085161561203657918102915b93841c939080029061200d565b509250929050565b6000611c068383600082612061575060016116d0565b8161206e575060006116d0565b8160018114612084576002811461208e576120aa565b60019150506116d0565b60ff84111561209f5761209f612129565b50506001821b6116d0565b5060208310610133831016604e8410600b84101617156120cd575081810a6116d0565b6120d78383612008565b80600019048211156120eb576120eb612129565b029392505050565b600081600019048311821515161561210d5761210d612129565b500290565b60008282101561212457612124612129565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b03811681146121cb57600080fd5b50565b80151581146121cb57600080fdfea2646970667358221220f988c1bcd42cd99669ca17e73f3efa39d0a8ed8fb874d1eb8f527ac334d6e84664736f6c63430008070033",
      "r": "0x5248ac7d5337e1f186ab5d68580db3e070f7a3628126dd515b172ed9a8dfdf15",
      "s": "0x799c82df5a9a81bb09d59be296785c2445194dd7cb05252cca3c0f6347ada878",
      "v": 1,
      "chainId": 1
    }
  }
}