{
  "address": "0x796dE0Fe0De2adA9208A3CA9870A8c512271D7C1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [],
      "name": "EmergencyExitActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loss",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtPayment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtOutstanding",
          "type": "uint256"
        }
      ],
      "name": "Harvested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtThreshold",
          "type": "uint256"
        }
      ],
      "name": "UpdatedDebtThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "activated",
          "type": "bool"
        }
      ],
      "name": "UpdatedIsRewardActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delay",
          "type": "uint256"
        }
      ],
      "name": "UpdatedMaxReportDelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delay",
          "type": "uint256"
        }
      ],
      "name": "UpdatedMinReportDelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_rewardAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minimumAmountMoved",
          "type": "uint256"
        }
      ],
      "name": "UpdatedRewardAmountAndMinimumAmountMoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewards",
          "type": "address"
        }
      ],
      "name": "UpdatedRewards",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GUARDIAN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "KEEPER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOLMANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECONDSPERYEAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_guardian",
          "type": "address"
        }
      ],
      "name": "addGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boolParams",
      "outputs": [
        {
          "internalType": "bool",
          "name": "automaticallyComputeCollatRatio",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isFlashMintActive",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "withdrawCheck",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "cooldownStkAave",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cooldownSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daiBorrowCollatRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discountFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyExit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimatedAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimatedTotalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deposits",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrows",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "borrowInit",
          "type": "uint256"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolManager",
          "type": "address"
        },
        {
          "internalType": "contract IReserveInterestRateStrategy",
          "name": "interestRateStrategyAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "governor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "keepers",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "manualDeleverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "manualReleaseWant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBorrowCollatRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxCollatRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxIterations",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minWant",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onFlashLoan",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolManager",
      "outputs": [
        {
          "internalType": "contract IPoolManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "r0",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveFactor",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "revokeGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "sellRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setAavePoolVariables",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "automaticallyComputeCollatRatio",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isFlashMintActive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "withdrawCheck",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "cooldownStkAave",
              "type": "bool"
            }
          ],
          "internalType": "struct AaveFlashloanStrategy.BoolParams",
          "name": "_boolParams",
          "type": "tuple"
        }
      ],
      "name": "setBoolParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_targetCollatRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxCollatRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBorrowCollatRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_daiBorrowCollatRatio",
          "type": "uint256"
        }
      ],
      "name": "setCollateralTargets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtThreshold",
          "type": "uint256"
        }
      ],
      "name": "setDebtThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_discountFactor",
          "type": "uint256"
        }
      ],
      "name": "setDiscountFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setEmergencyExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minWant",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_maxIterations",
          "type": "uint8"
        }
      ],
      "name": "setMinsAndMaxs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slope1",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slope2",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetCollatRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uOptimal",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstakeWindow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wantBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountNeeded",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountFreed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loss",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a2808ca04cfbb06630c491cd29c6fa1f5f86cb4feed8795aaadbea28b59008f",
  "receipt": {
    "to": null,
    "from": "0xfdA462548Ce04282f4B6D6619823a7C64Fdc0185",
    "contractAddress": "0x796dE0Fe0De2adA9208A3CA9870A8c512271D7C1",
    "transactionIndex": 86,
    "gasUsed": "5357552",
    "logsBloom": "0x
    "blockHash": "0x6f476ec6a18caef45af8591b0395aa9b67b8cfd0cd31d3586933853b8b4d9edf",
    "transactionHash": "0x0a2808ca04cfbb06630c491cd29c6fa1f5f86cb4feed8795aaadbea28b59008f",
    "logs": [],
    "blockNumber": 14658871,
    "cumulativeGasUsed": "13348592",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "86501938685860d1d6f1fd864874f17f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyExitActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtOutstanding\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtThreshold\",\"type\":\"uint256\"}],\"name\":\"UpdatedDebtThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"name\":\"UpdatedIsRewardActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxReportDelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinReportDelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minimumAmountMoved\",\"type\":\"uint256\"}],\"name\":\"UpdatedRewardAmountAndMinimumAmountMoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"}],\"name\":\"UpdatedRewards\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KEEPER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOLMANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDSPERYEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"addGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boolParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"automaticallyComputeCollatRatio\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFlashMintActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"withdrawCheck\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"cooldownStkAave\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiBorrowCollatRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedTotalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowInit\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolManager\",\"type\":\"address\"},{\"internalType\":\"contract IReserveInterestRateStrategy\",\"name\":\"interestRateStrategyAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"keepers\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualDeleverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualReleaseWant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBorrowCollatRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCollatRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxIterations\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onFlashLoan\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"r0\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveFactor\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"revokeGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"sellRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAavePoolVariables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"automaticallyComputeCollatRatio\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFlashMintActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"withdrawCheck\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"cooldownStkAave\",\"type\":\"bool\"}],\"internalType\":\"struct AaveFlashloanStrategy.BoolParams\",\"name\":\"_boolParams\",\"type\":\"tuple\"}],\"name\":\"setBoolParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetCollatRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxCollatRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBorrowCollatRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daiBorrowCollatRatio\",\"type\":\"uint256\"}],\"name\":\"setCollateralTargets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtThreshold\",\"type\":\"uint256\"}],\"name\":\"setDebtThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_discountFactor\",\"type\":\"uint256\"}],\"name\":\"setDiscountFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minWant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_maxIterations\",\"type\":\"uint8\"}],\"name\":\"setMinsAndMaxs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slope1\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slope2\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetCollatRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uOptimal\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountNeeded\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountFreed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Yearn Finance (https://etherscan.io/address/0xd4E94061183b2DBF24473F28A3559cf4dE4459Db#code) but heavily reviewed and modified by Angle Core Team\",\"details\":\"Angle strategies computes the optimal collateral ratio based on AAVE rewards for deposits and borrows\",\"kind\":\"dev\",\"methods\":{\"addGuardian(address)\":{\"params\":{\"_guardian\":\"New guardian address\"}},\"estimatedTotalAssets()\":{\"details\":\"It sums the effective deposit amount to the rewards accumulated\"},\"getCurrentPosition()\":{\"details\":\"The actual amount brought is `deposits - borrows`\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"harvest(uint256)\":{\"params\":{\"borrowInit\":\"Approximate optimal borrows to have faster convergence on the NR method\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,address,address,address[])\":{\"params\":{\"_poolManager\":\"Address of the `PoolManager` lending to this strategy\",\"governor\":\"Governor address of the protocol\",\"guardian\":\"Address of the guardian\",\"interestRateStrategyAddress_\":\"Address of the `InterestRateStrategy` defining borrow rates for the collateral\",\"keepers\":\"List of the addresses with keeper privilege\"}},\"isActive()\":{\"returns\":{\"_0\":\"True if the strategy is actively managing a position.\"}},\"manualDeleverage(uint256)\":{\"params\":{\"amount\":\"Amount of `want` to withdraw/repay\"}},\"manualReleaseWant(uint256)\":{\"params\":{\"amount\":\"Amount of `want` to withdraw\"}},\"onFlashLoan(address,address,uint256,uint256,bytes)\":{\"details\":\"If everything went smoothly, will return `keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\")`\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeGuardian(address)\":{\"params\":{\"guardian\":\"Old guardian address to revoke\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"sellRewards(uint256,bytes)\":{\"params\":{\"minAmountOut\":\"Minimum amount of `want` to receive for the swap to happen\",\"payload\":\"Bytes needed for 1Inch API. Tokens swapped should be: stkAave -> `want` or Aave -> `want`\"}},\"setAavePoolVariables()\":{\"details\":\"No access control needed because they fetch the values from Aave directly. If it changes there, it will need to be updated here tooWe expect the values concerned not to be often modified\"},\"setDebtThreshold(uint256)\":{\"details\":\"By default this is 0, meaning any losses would cause a harvest which will subsequently report the loss to the Manager for tracking.\",\"params\":{\"_debtThreshold\":\"How big of a loss this Strategy may carry without\"}},\"setEmergencyExit()\":{\"details\":\"This may only be called by the `PoolManager`, because when calling this the `PoolManager` should at the same time update the debt ratioThis function can only be called once by the `PoolManager` contractSee `poolManager.setEmergencyExit()` and `harvest()` for further details.\"},\"sweep(address,address)\":{\"details\":\"Implement `_protectedTokens()` to specify any additional tokens that should be protected from sweeping in addition to `want`.\",\"params\":{\"_token\":\"The token to transfer out of this `PoolManager`.\",\"to\":\"Address to send the tokens to.\"}},\"withdraw(uint256)\":{\"details\":\"This may only be called by the `PoolManager`\",\"params\":{\"_amountNeeded\":\"How much `want` to withdraw.\"},\"returns\":{\"_loss\":\"Any realized losses\",\"amountFreed\":\"How much `want` withdrawn.\"}}},\"title\":\"AaveFlashloanStrategy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"GUARDIAN_ROLE()\":{\"notice\":\"Role for guardians and governors\"},\"KEEPER_ROLE()\":{\"notice\":\"Role for keepers\"},\"POOLMANAGER_ROLE()\":{\"notice\":\"Role for `PoolManager` only\"},\"addGuardian(address)\":{\"notice\":\"Adds a new guardian address\"},\"boolParams()\":{\"notice\":\"Struct with some boolean parameters of the contract These parameters are packed in a struct for efficiency of SLOAD operations\"},\"daiBorrowCollatRatio()\":{\"notice\":\"Parameter used for flash mints\"},\"debtThreshold()\":{\"notice\":\"Use this to adjust the threshold at which running a debt causes a harvest trigger. See `setDebtThreshold()` for more details\"},\"discountFactor()\":{\"notice\":\"Discount factor applied to the StkAAVE price\"},\"emergencyExit()\":{\"notice\":\"See note on `setEmergencyExit()`\"},\"estimatedTotalAssets()\":{\"notice\":\"Estimates the total assets controlled by the strategy\"},\"getCurrentPosition()\":{\"notice\":\"Get the current position of the strategy: that is to say the amount deposited and the amount borrowed on Aave\"},\"harvest()\":{\"notice\":\"Harvests the Strategy, recognizing any profits or losses and adjusting the Strategy's position.\"},\"harvest(uint256)\":{\"notice\":\"Harvests the Strategy, recognizing any profits or losses and adjusting the Strategy's position.\"},\"initialize(address,address,address,address,address[])\":{\"notice\":\"Constructor of the `Strategy`\"},\"isActive()\":{\"notice\":\"Provides an indication of whether this strategy is currently \\\"active\\\" in that it is managing an active position, or will manage a position in the future. This should correlate to `harvest()` activity, so that Harvest events can be tracked externally by indexing agents.\"},\"manualDeleverage(uint256)\":{\"notice\":\"Emergency function that we can use to deleverage manually if something is broken\"},\"manualReleaseWant(uint256)\":{\"notice\":\"Emergency function that we can use to deleverage manually if something is broken\"},\"maxBorrowCollatRatio()\":{\"notice\":\"Maximum the Aave protocol will let us borrow\"},\"maxCollatRatio()\":{\"notice\":\"Closest to liquidation we'll risk\"},\"maxIterations()\":{\"notice\":\"Max number of iterations possible for the computation of the optimal lever\"},\"minRatio()\":{\"notice\":\"Minimum gap between the collat ratio and the target collat ratio before rectifying it\"},\"minWant()\":{\"notice\":\"Minimum amount to be moved before a deposit or a borrow\"},\"onFlashLoan(address,address,uint256,uint256,bytes)\":{\"notice\":\"Flashload callback, as defined by EIP-3156We check that the call is coming from the DAI lender and then execute the load logic\"},\"poolManager()\":{\"notice\":\"Reference to the protocol's collateral `PoolManager`\"},\"revokeGuardian(address)\":{\"notice\":\"Revokes the guardian role\"},\"sellRewards(uint256,bytes)\":{\"notice\":\"Swap earned stkAave or Aave for `want` through 1Inch\"},\"setAavePoolVariables()\":{\"notice\":\"Retrieves lending pool variables for `want`. Those variables are mostly used in the function to compute the optimal borrow amount\"},\"setBoolParams((bool,bool,bool,bool))\":{\"notice\":\"Sets all boolean parameters related to cooldown, withdraw check, flash loan and so on\"},\"setCollateralTargets(uint256,uint256,uint256,uint256)\":{\"notice\":\"Sets collateral targets and value for collateral ratio\"},\"setDebtThreshold(uint256)\":{\"notice\":\"Sets how far the Strategy can go into loss without a harvest and report being required.\"},\"setDiscountFactor(uint256)\":{\"notice\":\"Sets the discount factor for the StkAAVE price\"},\"setEmergencyExit()\":{\"notice\":\"Activates emergency exit. Once activated, the Strategy will exit its position upon the next harvest, depositing all funds into the Manager as quickly as is reasonable given on-chain conditions.\"},\"setMinsAndMaxs(uint256,uint256,uint8)\":{\"notice\":\"Sets `minWant`, `minRatio` and `maxItrations` values\"},\"sweep(address,address)\":{\"notice\":\"Removes tokens from this Strategy that are not the type of tokens managed by this Strategy. This may be used in case of accidentally sending the wrong kind of token to this Strategy. Tokens will be sent to `governance()`. This will fail if an attempt is made to sweep `want`, or any tokens that are protected by this Strategy. This may only be called by governance.\"},\"targetCollatRatio()\":{\"notice\":\"LTV the strategy is going to lever up to\"},\"want()\":{\"notice\":\"Reference to the ERC20 farmed by this strategy\"},\"wantBase()\":{\"notice\":\"Base of the ERC20 token farmed by this strategy\"},\"withdraw(uint256)\":{\"notice\":\"Withdraws `_amountNeeded` to `poolManager`.\"}},\"notice\":\"This strategy is used to optimize lending yield on Aave by taking some form or recursivity that is to say by borrowing to maximize Aave rewards\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol\":\"AaveFlashloanStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":3000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC3156FlashBorrower.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashBorrower {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb218fa8b4b52df590ff19b9f6d08b5be7f3abfc168a0ea33f5eb612f8f4dd989\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC3156FlashLender.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC3156 FlashLender, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashLender {\\n    /**\\n     * @dev The amount of currency available to be lended.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0d9159aa6c1a0d8006fb152b0aee46a0f9b8938575ede1a0d7e186b3bc79c8d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/external/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"../interfaces/IAccessControl.sol\\\";\\n\\n/**\\n * @dev This contract is fully forked from OpenZeppelin `AccessControl`.\\n * The only difference is the removal of the ERC165 implementation as it's not\\n * needed in Angle.\\n *\\n * Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external override {\\n        require(account == _msgSender(), \\\"71\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x14f6a40365c520e587ddc50dbe238cea9dcd5f6b99961528376d68566b10051b\",\"license\":\"GPL-3.0\"},\"contracts/external/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IAccessControl.sol\\\";\\n\\n/**\\n * @dev This contract is fully forked from OpenZeppelin `AccessControlUpgradeable`.\\n * The only difference is the removal of the ERC165 implementation as it's not\\n * needed in Angle.\\n *\\n * Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, IAccessControl {\\n    function __AccessControl_init() internal initializer {\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {}\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external override {\\n        require(account == msg.sender, \\\"71\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x161129b95e15270676c09330a5518e4d812b65af30a675a376dc2da463b01238\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title IAccessControl\\n/// @author Forked from OpenZeppelin\\n/// @notice Interface for `AccessControl` contracts\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xa1efc50a13a55d4e533ec03ee30006a9ce55df30d33e44fd93a9896765cea2eb\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n// Struct for the parameters associated to a strategy interacting with a collateral `PoolManager`\\n// contract\\nstruct StrategyParams {\\n    // Timestamp of last report made by this strategy\\n    // It is also used to check if a strategy has been initialized\\n    uint256 lastReport;\\n    // Total amount the strategy is expected to have\\n    uint256 totalStrategyDebt;\\n    // The share of the total assets in the `PoolManager` contract that the `strategy` can access to.\\n    uint256 debtRatio;\\n}\\n\\n/// @title IPoolManagerFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the collateral poolManager contracts handling each one type of collateral for\\n/// a given stablecoin\\n/// @dev Only the functions used in other contracts of the protocol are left here\\ninterface IPoolManagerFunctions {\\n    // ============================ Yield Farming ==================================\\n\\n    function creditAvailable() external view returns (uint256);\\n\\n    function debtOutstanding() external view returns (uint256);\\n\\n    function report(\\n        uint256 _gain,\\n        uint256 _loss,\\n        uint256 _debtPayment\\n    ) external;\\n\\n    // ============================= Getters =======================================\\n\\n    function getBalance() external view returns (uint256);\\n\\n    function getTotalAsset() external view returns (uint256);\\n}\\n\\n/// @title IPoolManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\n/// @dev Used in other contracts of the protocol\\ninterface IPoolManager is IPoolManagerFunctions {\\n    function stableMaster() external view returns (address);\\n\\n    function perpetualManager() external view returns (address);\\n\\n    function token() external view returns (address);\\n\\n    function totalDebt() external view returns (uint256);\\n\\n    function strategies(address _strategy) external view returns (StrategyParams memory);\\n}\\n\",\"keccak256\":\"0xb086d495e7124d898e7b09c59906429c0242e30f2f945c1cd2540aa3bcafb778\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title IStrategy\\n/// @author Inspired by Yearn with slight changes from Angle Core Team\\n/// @notice Interface for yield farming strategies\\ninterface IStrategy is IAccessControl {\\n    function estimatedAPR() external view returns (uint256);\\n\\n    function poolManager() external view returns (address);\\n\\n    function want() external view returns (address);\\n\\n    function isActive() external view returns (bool);\\n\\n    function estimatedTotalAssets() external view returns (uint256);\\n\\n    function harvestTrigger(uint256 callCost) external view returns (bool);\\n\\n    function harvest() external;\\n\\n    function withdraw(uint256 _amountNeeded) external returns (uint256 amountFreed, uint256 _loss);\\n\\n    function setEmergencyExit() external;\\n\\n    function addGuardian(address _guardian) external;\\n\\n    function revokeGuardian(address _guardian) external;\\n}\\n\",\"keccak256\":\"0x20a728d054df379cf30435b21cf51d8bb7038eb810b42ac2f1ab9496ceec61f6\",\"license\":\"GPL-3.0\"},\"contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport \\\"./AaveLibraries.sol\\\";\\nimport \\\"./AaveInterfaces.sol\\\";\\nimport \\\"../BaseStrategyUpgradeable.sol\\\";\\nimport \\\"./ComputeProfitability.sol\\\";\\n\\n/// @title AaveFlashloanStrategy\\n/// @author Yearn Finance (https://etherscan.io/address/0xd4E94061183b2DBF24473F28A3559cf4dE4459Db#code)\\n/// but heavily reviewed and modified by Angle Core Team\\n/// @notice This strategy is used to optimize lending yield on Aave by taking some form or recursivity that is to say\\n/// by borrowing to maximize Aave rewards\\n/// @dev Angle strategies computes the optimal collateral ratio based on AAVE rewards for deposits and borrows\\n// solhint-disable-next-line max-states-count\\ncontract AaveFlashloanStrategy is BaseStrategyUpgradeable, IERC3156FlashBorrower {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    // =========================== Constant Addresses ==============================\\n\\n    /// @notice Router used for swaps\\n    address private constant _oneInch = 0x1111111254fb6c44bAC0beD2854e76F90643097d;\\n    /// @notice Chainlink oracle used to fetch data\\n    AggregatorV3Interface private constant _chainlinkOracle =\\n        AggregatorV3Interface(0x547a514d5e3769680Ce22B2361c10Ea13619e8a9);\\n\\n    // ========================== Aave Protocol Addresses ==========================\\n\\n    IAaveIncentivesController private constant _incentivesController =\\n        IAaveIncentivesController(0xd784927Ff2f95ba542BfC824c8a8a98F3495f6b5);\\n    ILendingPool private constant _lendingPool = ILendingPool(0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9);\\n    IProtocolDataProvider private constant _protocolDataProvider =\\n        IProtocolDataProvider(0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d);\\n\\n    // ============================== Token Addresses ==============================\\n\\n    address private constant _aave = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\\n    IStakedAave private constant _stkAave = IStakedAave(0x4da27a545c0c5B758a6BA100e3a049001de870f5);\\n    address private constant _weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address private constant _dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n\\n    // ============================== Ops Constants ================================\\n\\n    uint256 private constant _DEFAULT_COLLAT_TARGET_MARGIN = 0.02 ether;\\n    uint256 private constant _DEFAULT_COLLAT_MAX_MARGIN = 0.005 ether;\\n    uint256 private constant _LIQUIDATION_WARNING_THRESHOLD = 0.01 ether;\\n    uint256 private constant _BPS_WAD_RATIO = 1e14;\\n    uint256 private constant _COLLATERAL_RATIO_PRECISION = 1 ether;\\n    uint16 private constant _referral = 0;\\n\\n    // ========================= Aave Protocol Parameters ==========================\\n\\n    IReserveInterestRateStrategy private _interestRateStrategyAddress;\\n    uint256 public cooldownSeconds;\\n    uint256 public unstakeWindow;\\n    int256 public reserveFactor;\\n    int256 public slope1;\\n    int256 public slope2;\\n    int256 public r0;\\n    int256 public uOptimal;\\n\\n    // =============================== Parameters and Variables ====================\\n\\n    /// @notice Maximum the Aave protocol will let us borrow\\n    uint256 public maxBorrowCollatRatio;\\n    /// @notice LTV the strategy is going to lever up to\\n    uint256 public targetCollatRatio;\\n    /// @notice Closest to liquidation we'll risk\\n    uint256 public maxCollatRatio;\\n    /// @notice Parameter used for flash mints\\n    uint256 public daiBorrowCollatRatio;\\n    /// @notice Minimum amount to be moved before a deposit or a borrow\\n    uint256 public minWant;\\n    /// @notice Minimum gap between the collat ratio and the target collat ratio before\\n    /// rectifying it\\n    uint256 public minRatio;\\n    /// @notice Discount factor applied to the StkAAVE price\\n    uint256 public discountFactor;\\n    /// @notice Max number of iterations possible for the computation of the optimal lever\\n    uint8 public maxIterations;\\n\\n    struct BoolParams {\\n        // Whether collateral ratio will be automatically computed\\n        bool automaticallyComputeCollatRatio;\\n        // Whether Flash mint is active\\n        bool isFlashMintActive;\\n        // Whether we should check withdrawals\\n        bool withdrawCheck;\\n        // Whether StkAAVE should be sent to cooldown or simply swapped for Aave all the time\\n        bool cooldownStkAave;\\n    }\\n    /// @notice Struct with some boolean parameters of the contract\\n    /// These parameters are packed in a struct for efficiency of SLOAD operations\\n    BoolParams public boolParams;\\n\\n    // ========================= Supply and Borrow Tokens ==========================\\n\\n    IAToken private _aToken;\\n    IVariableDebtToken private _debtToken;\\n\\n    // ============================ Initializer ====================================\\n\\n    /// @notice Constructor of the `Strategy`\\n    /// @param _poolManager Address of the `PoolManager` lending to this strategy\\n    /// @param interestRateStrategyAddress_ Address of the `InterestRateStrategy` defining borrow rates for the collateral\\n    /// @param governor Governor address of the protocol\\n    /// @param guardian Address of the guardian\\n    /// @param keepers List of the addresses with keeper privilege\\n    function initialize(\\n        address _poolManager,\\n        IReserveInterestRateStrategy interestRateStrategyAddress_,\\n        address governor,\\n        address guardian,\\n        address[] memory keepers\\n    ) external {\\n        _initialize(_poolManager, governor, guardian, keepers);\\n\\n        // Then initializing operational state\\n        maxIterations = 6;\\n        // Setting mins\\n        minWant = 100;\\n        minRatio = 0.005 ether;\\n        discountFactor = 9000;\\n\\n        boolParams = BoolParams({\\n            automaticallyComputeCollatRatio: true,\\n            isFlashMintActive: true,\\n            withdrawCheck: false,\\n            cooldownStkAave: true\\n        });\\n\\n        _interestRateStrategyAddress = interestRateStrategyAddress_;\\n        // Setting reward params\\n        _setAavePoolVariables();\\n\\n        // Set AAVE tokens\\n        (address aToken_, , address debtToken_) = _protocolDataProvider.getReserveTokensAddresses(address(want));\\n        _aToken = IAToken(aToken_);\\n        _debtToken = IVariableDebtToken(debtToken_);\\n\\n        // Let collateral targets\\n        (uint256 ltv, uint256 liquidationThreshold) = _getProtocolCollatRatios(address(want));\\n        targetCollatRatio = liquidationThreshold - _DEFAULT_COLLAT_TARGET_MARGIN;\\n        maxCollatRatio = liquidationThreshold - _DEFAULT_COLLAT_MAX_MARGIN;\\n        maxBorrowCollatRatio = ltv - _DEFAULT_COLLAT_MAX_MARGIN;\\n        (uint256 daiLtv, ) = _getProtocolCollatRatios(_dai);\\n        daiBorrowCollatRatio = daiLtv - _DEFAULT_COLLAT_MAX_MARGIN;\\n\\n        // Performing all the different approvals possible\\n        _approveMaxSpend(address(want), address(_lendingPool));\\n        _approveMaxSpend(aToken_, address(_lendingPool));\\n        // Approve flashloan spend\\n        _approveMaxSpend(_dai, FlashMintLib.LENDER);\\n        // Approve swap router spend\\n        _approveMaxSpend(address(_stkAave), _oneInch);\\n        _approveMaxSpend(_aave, _oneInch);\\n        if (address(want) != _dai) {\\n            _approveMaxSpend(_dai, address(_lendingPool));\\n        }\\n    }\\n\\n    // ======================= Helper View Functions ===============================\\n\\n    /// @notice Estimates the total assets controlled by the strategy\\n    /// @dev It sums the effective deposit amount to the rewards accumulated\\n    function estimatedTotalAssets() public view override returns (uint256) {\\n        (uint256 deposits, uint256 borrows) = getCurrentPosition();\\n        return\\n            _balanceOfWant() +\\n            deposits -\\n            borrows +\\n            _estimatedStkAaveToWant(\\n                _balanceOfStkAave() +\\n                    _balanceOfAave() +\\n                    _incentivesController.getRewardsBalance(_getAaveAssets(), address(this))\\n            );\\n    }\\n\\n    /// @notice Get the current position of the strategy: that is to say the amount deposited\\n    /// and the amount borrowed on Aave\\n    /// @dev The actual amount brought is `deposits - borrows`\\n    function getCurrentPosition() public view returns (uint256 deposits, uint256 borrows) {\\n        deposits = _balanceOfAToken();\\n        borrows = _balanceOfDebtToken();\\n    }\\n\\n    // ====================== Internal Strategy Functions ==========================\\n\\n    /// @notice Frees up profit plus `_debtOutstanding`.\\n    /// @param _debtOutstanding Amount to withdraw\\n    /// @return _profit Profit freed by the call\\n    /// @return _loss Loss discovered by the call\\n    /// @return _debtPayment Amount freed to reimburse the debt\\n    /// @dev If `_debtOutstanding` is more than we can free we get as much as possible.\\n    function _prepareReturn(uint256 _debtOutstanding)\\n        internal\\n        override\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _debtPayment\\n        )\\n    {\\n        // account for profit / losses\\n        uint256 totalDebt = poolManager.strategies(address(this)).totalStrategyDebt;\\n\\n        // Assets immediately convertible to want only\\n        uint256 amountAvailable = _balanceOfWant();\\n        (uint256 deposits, uint256 borrows) = getCurrentPosition();\\n        uint256 totalAssets = amountAvailable + deposits - borrows;\\n\\n        if (totalDebt > totalAssets) {\\n            // we have losses\\n            _loss = totalDebt - totalAssets;\\n        } else {\\n            // we have profit\\n            _profit = totalAssets - totalDebt;\\n        }\\n\\n        // free funds to repay debt + profit to the strategy\\n        uint256 amountRequired = _debtOutstanding + _profit;\\n\\n        if (amountRequired > amountAvailable) {\\n            // we need to free funds\\n            // we dismiss losses here, they cannot be generated from withdrawal\\n            // but it is possible for the strategy to unwind full position\\n            (amountAvailable, ) = _liquidatePosition(amountRequired, amountAvailable, deposits, borrows);\\n\\n            if (amountAvailable >= amountRequired) {\\n                _debtPayment = _debtOutstanding;\\n                // profit remains unchanged unless there is not enough to pay it\\n                if (amountRequired - _debtPayment < _profit) {\\n                    _profit = amountRequired - _debtPayment;\\n                }\\n            } else {\\n                // we were not able to free enough funds\\n                if (amountAvailable < _debtOutstanding) {\\n                    // available funds are lower than the repayment that we need to do\\n                    _profit = 0;\\n                    _debtPayment = amountAvailable;\\n                    // we dont report losses here as the strategy might not be able to return in this harvest\\n                    // but it will still be there for the next harvest\\n                } else {\\n                    // NOTE: amountRequired is always equal or greater than _debtOutstanding\\n                    // important to use amountRequired just in case amountAvailable is > amountAvailable\\n                    _debtPayment = _debtOutstanding;\\n                    _profit = amountAvailable - _debtPayment;\\n                }\\n            }\\n        } else {\\n            _debtPayment = _debtOutstanding;\\n            // profit remains unchanged unless there is not enough to pay it\\n            if (amountRequired - _debtPayment < _profit) {\\n                _profit = amountRequired - _debtPayment;\\n            }\\n        }\\n    }\\n\\n    /// @notice Function called by _harvest()\\n    function _adjustPosition() internal override {\\n        _adjustPosition(type(uint256).max);\\n    }\\n\\n    /// @notice Function called by _adjustPosition()\\n    /// @param guessedBorrow First guess to the borrow amount to maximise revenue\\n    /// @dev It computes the optimal collateral ratio and adjusts deposits/borrows accordingly\\n    function _adjustPosition(uint256 guessedBorrow) internal override {\\n        uint256 _debtOutstanding = poolManager.debtOutstanding();\\n\\n        uint256 wantBalance = _balanceOfWant();\\n        // deposit available want as collateral\\n        if (wantBalance > _debtOutstanding && wantBalance - _debtOutstanding > minWant) {\\n            _depositCollateral(wantBalance - _debtOutstanding);\\n            // Updating the `wantBalance` value\\n            wantBalance = _balanceOfWant();\\n        }\\n\\n        (uint256 deposits, uint256 borrows) = getCurrentPosition();\\n        guessedBorrow = (guessedBorrow == type(uint256).max) ? borrows : guessedBorrow;\\n        uint256 _targetCollatRatio;\\n        if (boolParams.automaticallyComputeCollatRatio) {\\n            _targetCollatRatio = _computeOptimalCollatRatio(\\n                wantBalance + deposits - borrows,\\n                deposits,\\n                borrows,\\n                guessedBorrow\\n            );\\n        } else {\\n            _targetCollatRatio = targetCollatRatio;\\n        }\\n\\n        // check current position\\n        uint256 currentCollatRatio = _getCollatRatio(deposits, borrows);\\n\\n        // Either we need to free some funds OR we want to be max levered\\n        if (_debtOutstanding > wantBalance) {\\n            // we should free funds\\n            uint256 amountRequired = _debtOutstanding - wantBalance;\\n\\n            // NOTE: vault will take free funds during the next harvest\\n            _freeFunds(amountRequired, deposits, borrows);\\n        } else if (currentCollatRatio < _targetCollatRatio) {\\n            // we should lever up\\n            if (_targetCollatRatio - currentCollatRatio > minRatio) {\\n                // we only act on relevant differences\\n                _leverMax(deposits, borrows);\\n            }\\n        } else if (currentCollatRatio > _targetCollatRatio) {\\n            if (currentCollatRatio - _targetCollatRatio > minRatio) {\\n                uint256 newBorrow = _getBorrowFromSupply(deposits - borrows, _targetCollatRatio);\\n                _leverDownTo(newBorrow, deposits, borrows);\\n            }\\n        }\\n    }\\n\\n    /// @notice Liquidates `_amountNeeded` from a position\\n    /// @dev For gas efficiency this function calls another internal function\\n    function _liquidatePosition(uint256 _amountNeeded) internal override returns (uint256, uint256) {\\n        (uint256 deposits, uint256 borrows) = getCurrentPosition();\\n        return _liquidatePosition(_amountNeeded, _balanceOfWant(), deposits, borrows);\\n    }\\n\\n    /// @notice Withdraws `_amountNeeded` of `want` from Aave\\n    /// @param _amountNeeded Amount of `want` to free\\n    /// @return _liquidatedAmount Amount of `want` available\\n    /// @return _loss Difference between `_amountNeeded` and what is actually available\\n    function _liquidatePosition(\\n        uint256 _amountNeeded,\\n        uint256 wantBalance,\\n        uint256 deposits,\\n        uint256 borrows\\n    ) internal returns (uint256 _liquidatedAmount, uint256 _loss) {\\n        // NOTE: Maintain invariant `want.balanceOf(this) >= _liquidatedAmount`\\n        // NOTE: Maintain invariant `_liquidatedAmount + _loss <= _amountNeeded`\\n        if (wantBalance > _amountNeeded) {\\n            // if there is enough free want, let's use it\\n            return (_amountNeeded, 0);\\n        }\\n\\n        // we need to free funds\\n        uint256 amountRequired = _amountNeeded - wantBalance;\\n        _freeFunds(amountRequired, deposits, borrows);\\n        // Updating the `wantBalance` variable\\n        wantBalance = _balanceOfWant();\\n        if (_amountNeeded > wantBalance) {\\n            _liquidatedAmount = wantBalance;\\n            uint256 diff = _amountNeeded - _liquidatedAmount;\\n            if (diff <= minWant) {\\n                _loss = diff;\\n            }\\n        } else {\\n            _liquidatedAmount = _amountNeeded;\\n        }\\n\\n        if (boolParams.withdrawCheck) {\\n            require(_amountNeeded == _liquidatedAmount + _loss, \\\"54\\\"); // dev: withdraw safety check\\n        }\\n    }\\n\\n    /// @notice Withdraw as much as we can from Aave\\n    /// @return _amountFreed Amount successfully freed\\n    function _liquidateAllPositions() internal override returns (uint256 _amountFreed) {\\n        (_amountFreed, ) = _liquidatePosition(type(uint256).max);\\n    }\\n\\n    function _protectedTokens() internal view override returns (address[] memory) {}\\n\\n    // ============================== Setters ======================================\\n\\n    /// @notice Sets collateral targets and value for collateral ratio\\n    function setCollateralTargets(\\n        uint256 _targetCollatRatio,\\n        uint256 _maxCollatRatio,\\n        uint256 _maxBorrowCollatRatio,\\n        uint256 _daiBorrowCollatRatio\\n    ) external onlyRole(GUARDIAN_ROLE) {\\n        (uint256 ltv, uint256 liquidationThreshold) = _getProtocolCollatRatios(address(want));\\n        (uint256 daiLtv, ) = _getProtocolCollatRatios(_dai);\\n        require(\\n            _targetCollatRatio < liquidationThreshold &&\\n                _maxCollatRatio < liquidationThreshold &&\\n                _targetCollatRatio < _maxCollatRatio &&\\n                _maxBorrowCollatRatio < ltv &&\\n                _daiBorrowCollatRatio < daiLtv,\\n            \\\"8\\\"\\n        );\\n\\n        targetCollatRatio = _targetCollatRatio;\\n        maxCollatRatio = _maxCollatRatio;\\n        maxBorrowCollatRatio = _maxBorrowCollatRatio;\\n        daiBorrowCollatRatio = _daiBorrowCollatRatio;\\n    }\\n\\n    /// @notice Sets `minWant`, `minRatio` and `maxItrations` values\\n    function setMinsAndMaxs(\\n        uint256 _minWant,\\n        uint256 _minRatio,\\n        uint8 _maxIterations\\n    ) external onlyRole(GUARDIAN_ROLE) {\\n        require(_minRatio < maxBorrowCollatRatio && _maxIterations > 0 && _maxIterations < 16, \\\"8\\\");\\n        minWant = _minWant;\\n        minRatio = _minRatio;\\n        maxIterations = _maxIterations;\\n    }\\n\\n    /// @notice Sets all boolean parameters related to cooldown, withdraw check, flash loan and so on\\n    function setBoolParams(BoolParams memory _boolParams) external onlyRole(GUARDIAN_ROLE) {\\n        boolParams = _boolParams;\\n    }\\n\\n    /// @notice Sets the discount factor for the StkAAVE price\\n    function setDiscountFactor(uint256 _discountFactor) external onlyRole(GUARDIAN_ROLE) {\\n        require(_discountFactor < 10000, \\\"4\\\");\\n        discountFactor = _discountFactor;\\n    }\\n\\n    /// @notice Retrieves lending pool variables for `want`. Those variables are mostly used in the function\\n    /// to compute the optimal borrow amount\\n    /// @dev No access control needed because they fetch the values from Aave directly.\\n    /// If it changes there, it will need to be updated here too\\n    /// @dev We expect the values concerned not to be often modified\\n    function setAavePoolVariables() external {\\n        _setAavePoolVariables();\\n    }\\n\\n    // ========================== External Actions =================================\\n\\n    /// @notice Emergency function that we can use to deleverage manually if something is broken\\n    /// @param amount Amount of `want` to withdraw/repay\\n    function manualDeleverage(uint256 amount) external onlyRole(GUARDIAN_ROLE) {\\n        _withdrawCollateral(amount);\\n        _repayWant(amount);\\n    }\\n\\n    /// @notice Emergency function that we can use to deleverage manually if something is broken\\n    /// @param amount Amount of `want` to withdraw\\n    function manualReleaseWant(uint256 amount) external onlyRole(GUARDIAN_ROLE) {\\n        _withdrawCollateral(amount);\\n    }\\n\\n    /// @notice Adds a new guardian address\\n    /// @param _guardian New guardian address\\n    function addGuardian(address _guardian) external override onlyRole(POOLMANAGER_ROLE) {\\n        // Granting the new role\\n        // Access control for this contract\\n        _grantRole(GUARDIAN_ROLE, _guardian);\\n    }\\n\\n    /// @notice Revokes the guardian role\\n    /// @param guardian Old guardian address to revoke\\n    function revokeGuardian(address guardian) external override onlyRole(POOLMANAGER_ROLE) {\\n        _revokeRole(GUARDIAN_ROLE, guardian);\\n    }\\n\\n    /// @notice Swap earned stkAave or Aave for `want` through 1Inch\\n    /// @param minAmountOut Minimum amount of `want` to receive for the swap to happen\\n    /// @param payload Bytes needed for 1Inch API. Tokens swapped should be: stkAave -> `want` or Aave -> `want`\\n    function sellRewards(uint256 minAmountOut, bytes memory payload) external onlyRole(KEEPER_ROLE) {\\n        //solhint-disable-next-line\\n        (bool success, bytes memory result) = _oneInch.call(payload);\\n        if (!success) _revertBytes(result);\\n\\n        uint256 amountOut = abi.decode(result, (uint256));\\n        require(amountOut >= minAmountOut, \\\"15\\\");\\n    }\\n\\n    /// @notice Flashload callback, as defined by EIP-3156\\n    /// @notice We check that the call is coming from the DAI lender and then execute the load logic\\n    /// @dev If everything went smoothly, will return `keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\")`\\n    function onFlashLoan(\\n        address initiator,\\n        address,\\n        uint256 amount,\\n        uint256,\\n        bytes calldata data\\n    ) external override returns (bytes32) {\\n        require(msg.sender == FlashMintLib.LENDER && initiator == address(this), \\\"1\\\");\\n        (bool deficit, uint256 amountWant) = abi.decode(data, (bool, uint256));\\n\\n        return FlashMintLib.loanLogic(deficit, amountWant, amount, address(want));\\n    }\\n\\n    // ========================== Internal Actions =================================\\n\\n    /// @notice Claim earned stkAAVE (only called at `harvest`)\\n    /// @dev stkAAVE require a \\\"cooldown\\\" period of 10 days before being claimed\\n    function _claimRewards() internal returns (uint256 stkAaveBalance) {\\n        stkAaveBalance = _balanceOfStkAave();\\n        uint256 cooldownStatus;\\n        if (stkAaveBalance > 0) {\\n            cooldownStatus = _checkCooldown(); // don't check status if we have no stkAave\\n        }\\n\\n        // If it's the claim period claim\\n        if (stkAaveBalance > 0 && cooldownStatus == 1) {\\n            // redeem AAVE from stkAave\\n            _stkAave.claimRewards(address(this), type(uint256).max);\\n            _stkAave.redeem(address(this), stkAaveBalance);\\n        }\\n\\n        // claim stkAave from lending and borrowing, this will reset the cooldown\\n        _incentivesController.claimRewards(_getAaveAssets(), type(uint256).max, address(this));\\n\\n        stkAaveBalance = _balanceOfStkAave();\\n\\n        // request start of cooldown period, if there's no cooldown in progress\\n        if (boolParams.cooldownStkAave && stkAaveBalance > 0 && cooldownStatus == 0) {\\n            _stkAave.cooldown();\\n        }\\n    }\\n\\n    function claimRewards() external onlyRole(KEEPER_ROLE) {\\n        _claimRewards();\\n    }\\n\\n    /// @notice Reduce exposure by withdrawing funds and repaying debt\\n    /// @param amountToFree Amount of `want` to withdraw/repay\\n    /// @return balance Current balance of `want`\\n    /// @dev `deposits` and `borrows` are always computed prior to the call\\n    function _freeFunds(\\n        uint256 amountToFree,\\n        uint256 deposits,\\n        uint256 borrows\\n    ) internal returns (uint256) {\\n        if (amountToFree == 0) return 0;\\n\\n        uint256 realAssets = deposits - borrows;\\n        uint256 newBorrow = _getBorrowFromSupply(realAssets - Math.min(amountToFree, realAssets), targetCollatRatio);\\n\\n        // repay required amount\\n        _leverDownTo(newBorrow, deposits, borrows);\\n\\n        return _balanceOfWant();\\n    }\\n\\n    /// @notice Get exposure up to `targetCollatRatio`\\n    function _leverMax(uint256 deposits, uint256 borrows) internal {\\n        uint256 totalAmountToBorrow = _getBorrowFromSupply(deposits - borrows, targetCollatRatio) - borrows;\\n\\n        if (boolParams.isFlashMintActive) {\\n            // The best approach is to lever up using regular method, then finish with flash loan\\n            totalAmountToBorrow = totalAmountToBorrow - _leverUpStep(totalAmountToBorrow, deposits, borrows);\\n\\n            if (totalAmountToBorrow > minWant) {\\n                totalAmountToBorrow = totalAmountToBorrow - _leverUpFlashLoan(totalAmountToBorrow);\\n            }\\n        } else {\\n            for (uint8 i = 0; i < maxIterations && totalAmountToBorrow > minWant; i++) {\\n                totalAmountToBorrow = totalAmountToBorrow - _leverUpStep(totalAmountToBorrow, deposits, borrows);\\n                deposits = 0;\\n                borrows = 0;\\n            }\\n        }\\n    }\\n\\n    /// @notice Use a flashloan to increase our exposure in `want` on Aave\\n    /// @param amount Amount we will deposit and borrow on Aave\\n    /// @return amount Actual amount deposited/borrowed\\n    /// @dev Amount returned should equal `amount` but can be lower if we try to flashloan more than `maxFlashLoan` authorized\\n    function _leverUpFlashLoan(uint256 amount) internal returns (uint256) {\\n        (uint256 deposits, uint256 borrows) = getCurrentPosition();\\n        uint256 depositsToMeetLtv = _getDepositFromBorrow(borrows, maxBorrowCollatRatio, deposits);\\n        uint256 depositsDeficitToMeetLtv = 0;\\n        if (depositsToMeetLtv > deposits) {\\n            depositsDeficitToMeetLtv = depositsToMeetLtv - deposits;\\n        }\\n        return FlashMintLib.doFlashMint(false, amount, address(want), daiBorrowCollatRatio, depositsDeficitToMeetLtv);\\n    }\\n\\n    /// @notice Increase exposure in `want`\\n    /// @param amount Amount of `want` to borrow\\n    /// @return amount Amount of `want` that was borrowed\\n    function _leverUpStep(\\n        uint256 amount,\\n        uint256 deposits,\\n        uint256 borrows\\n    ) internal returns (uint256) {\\n        if (deposits == 0 && borrows == 0) (deposits, borrows) = getCurrentPosition();\\n\\n        uint256 wantBalance = _balanceOfWant();\\n\\n        uint256 canBorrow = _getBorrowFromDeposit(deposits + wantBalance, maxBorrowCollatRatio);\\n\\n        if (canBorrow <= borrows) {\\n            return 0;\\n        }\\n        canBorrow = canBorrow - borrows;\\n\\n        if (canBorrow < amount) {\\n            amount = canBorrow;\\n        }\\n\\n        _depositCollateral(wantBalance);\\n        _borrowWant(amount);\\n        _depositCollateral(amount);\\n\\n        return amount;\\n    }\\n\\n    /// @notice Reduce our exposure to `want` on Aave\\n    /// @param newAmountBorrowed Total amount we want to be borrowing\\n    /// @param deposits Amount currently lent\\n    /// @param currentBorrowed Amount currently borrowed\\n    function _leverDownTo(\\n        uint256 newAmountBorrowed,\\n        uint256 deposits,\\n        uint256 currentBorrowed\\n    ) internal {\\n        if (currentBorrowed > newAmountBorrowed) {\\n            uint256 totalRepayAmount = currentBorrowed - newAmountBorrowed;\\n\\n            if (boolParams.isFlashMintActive) {\\n                totalRepayAmount = totalRepayAmount - _leverDownFlashLoan(totalRepayAmount, currentBorrowed);\\n            }\\n\\n            uint256 _maxCollatRatio = maxCollatRatio;\\n\\n            // in case the flashloan didn't repay the entire amount we have to repay it \\\"manually\\\"\\n            // by withdrawing a bit of collateral and then repaying the debt with it\\n            for (uint8 i = 0; i < maxIterations && totalRepayAmount > minWant; i++) {\\n                _withdrawExcessCollateral(_maxCollatRatio, 0, 0);\\n                uint256 toRepay = totalRepayAmount;\\n                uint256 wantBalance = _balanceOfWant();\\n                if (toRepay > wantBalance) {\\n                    toRepay = wantBalance;\\n                }\\n                uint256 repaid = _repayWant(toRepay);\\n                totalRepayAmount = totalRepayAmount - repaid;\\n            }\\n            (deposits, currentBorrowed) = getCurrentPosition();\\n        }\\n\\n        // Deposit back to get `targetCollatRatio` (we always need to leave this in this ratio)\\n        uint256 _targetCollatRatio = targetCollatRatio;\\n        uint256 targetDeposit = _getDepositFromBorrow(currentBorrowed, _targetCollatRatio, deposits);\\n        if (targetDeposit > deposits) {\\n            uint256 toDeposit = targetDeposit - deposits;\\n            if (toDeposit > minWant) {\\n                _depositCollateral(Math.min(toDeposit, _balanceOfWant()));\\n            }\\n        } else {\\n            if (deposits - targetDeposit > minWant) {\\n                _withdrawExcessCollateral(_targetCollatRatio, deposits, currentBorrowed);\\n            }\\n        }\\n    }\\n\\n    /// @notice Use a flashloan to reduce our exposure in `want` on Aave\\n    /// @param amount Amount we will need to withdraw and repay to Aave\\n    /// @return amount Actual amount repaid\\n    /// @dev Amount returned should equal `amount` but can be lower if we try to flashloan more than `maxFlashLoan` authorized\\n    /// @dev `amount` will be withdrawn from deposits and then used to repay borrows\\n    function _leverDownFlashLoan(uint256 amount, uint256 borrows) internal returns (uint256) {\\n        if (amount <= minWant) return 0;\\n        if (amount > borrows) {\\n            amount = borrows;\\n        }\\n        return FlashMintLib.doFlashMint(true, amount, address(want), daiBorrowCollatRatio, 0);\\n    }\\n\\n    /// @notice Adjusts the deposits based on the wanted collateral ratio (does not touch the borrow)\\n    /// @param collatRatio Collateral ratio to target\\n    function _withdrawExcessCollateral(\\n        uint256 collatRatio,\\n        uint256 deposits,\\n        uint256 borrows\\n    ) internal returns (uint256 amount) {\\n        if (deposits == 0 && borrows == 0) (deposits, borrows) = getCurrentPosition();\\n        uint256 theoDeposits = _getDepositFromBorrow(borrows, collatRatio, deposits);\\n        if (deposits > theoDeposits) {\\n            uint256 toWithdraw = deposits - theoDeposits;\\n            return _withdrawCollateral(toWithdraw);\\n        }\\n    }\\n\\n    /// @notice Deposit `want` tokens in Aave and start earning interests\\n    /// @param amount Amount to be deposited\\n    /// @return amount The amount deposited\\n    function _depositCollateral(uint256 amount) internal returns (uint256) {\\n        if (amount == 0) return 0;\\n        _lendingPool.deposit(address(want), amount, address(this), _referral);\\n        return amount;\\n    }\\n\\n    /// @notice Withdraw `want` tokens from Aave\\n    /// @param amount Amount to be withdrawn\\n    /// @return amount The amount withdrawn\\n    function _withdrawCollateral(uint256 amount) internal returns (uint256) {\\n        if (amount == 0) return 0;\\n        _lendingPool.withdraw(address(want), amount, address(this));\\n        return amount;\\n    }\\n\\n    /// @notice Repay what we borrowed of `want` from Aave\\n    /// @param amount Amount to repay\\n    /// @return amount The amount repaid\\n    /// @dev `interestRateMode` is set to variable rate (2)\\n    function _repayWant(uint256 amount) internal returns (uint256) {\\n        if (amount == 0) return 0;\\n        return _lendingPool.repay(address(want), amount, 2, address(this));\\n    }\\n\\n    /// @notice Borrow `want` from Aave\\n    /// @param amount Amount of `want` we are borrowing\\n    /// @return amount The amount borrowed\\n    /// @dev The third variable is the `interestRateMode`\\n    /// @dev set at 2 which means we will get a variable interest rate on our borrowed tokens\\n    function _borrowWant(uint256 amount) internal returns (uint256) {\\n        _lendingPool.borrow(address(want), amount, 2, _referral, address(this));\\n        return amount;\\n    }\\n\\n    /// @notice Computes the optimal collateral ratio based on current interests and incentives on Aave\\n    /// @notice It modifies the state by updating the `targetCollatRatio`\\n    function _computeOptimalCollatRatio(\\n        uint256 balanceExcludingRewards,\\n        uint256 deposits,\\n        uint256 currentBorrowed,\\n        uint256 guessedBorrow\\n    ) internal returns (uint256) {\\n        uint256 borrow = _computeMostProfitableBorrow(\\n            balanceExcludingRewards,\\n            deposits,\\n            currentBorrowed,\\n            guessedBorrow\\n        );\\n        uint256 _collatRatio = _getCollatRatio(balanceExcludingRewards + borrow, borrow);\\n        uint256 _maxCollatRatio = maxCollatRatio;\\n        if (_collatRatio > _maxCollatRatio) {\\n            _collatRatio = _maxCollatRatio;\\n        }\\n        targetCollatRatio = _collatRatio;\\n        return _collatRatio;\\n    }\\n\\n    /// @notice Approve `spender` maxuint of `token`\\n    /// @param token Address of token to approve\\n    /// @param spender Address of spender to approve\\n    function _approveMaxSpend(address token, address spender) internal {\\n        IERC20(token).safeApprove(spender, type(uint256).max);\\n    }\\n\\n    /// @notice Internal version of the `_setAavePoolVariables`\\n    function _setAavePoolVariables() internal {\\n        (, , , , uint256 reserveFactor_, , , , , ) = _protocolDataProvider.getReserveConfigurationData(address(want));\\n        cooldownSeconds = IStakedAave(_stkAave).COOLDOWN_SECONDS();\\n        unstakeWindow = IStakedAave(_stkAave).UNSTAKE_WINDOW();\\n        reserveFactor = int256(reserveFactor_ * 10**23);\\n        slope1 = int256(_interestRateStrategyAddress.variableRateSlope1());\\n        slope2 = int256(_interestRateStrategyAddress.variableRateSlope2());\\n        r0 = int256(_interestRateStrategyAddress.baseVariableBorrowRate());\\n        uOptimal = int256(_interestRateStrategyAddress.OPTIMAL_UTILIZATION_RATE());\\n    }\\n\\n    // ========================= Internal View Functions ===========================\\n\\n    /// @notice Computes the optimal amounts to borrow based on current interest rates and incentives\\n    /// @dev Returns optimal `borrow` amount in base of `want`\\n    function _computeMostProfitableBorrow(\\n        uint256 balanceExcludingRewards,\\n        uint256 deposits,\\n        uint256 currentBorrow,\\n        uint256 guessedBorrow\\n    ) internal view returns (uint256 borrow) {\\n        // This works if `wantBase < 10**27` which we should expect to be very the case for the strategies we are\\n        // launching at the moment\\n        uint256 normalizationFactor = 10**27 / wantBase;\\n\\n        ComputeProfitability.SCalculateBorrow memory parameters;\\n\\n        {\\n            (\\n                uint256 availableLiquidity,\\n                uint256 totalStableDebt,\\n                uint256 totalVariableDebt,\\n                ,\\n                ,\\n                ,\\n                uint256 averageStableBorrowRate,\\n                ,\\n                ,\\n\\n            ) = _protocolDataProvider.getReserveData(address(want));\\n\\n            parameters = ComputeProfitability.SCalculateBorrow({\\n                reserveFactor: reserveFactor,\\n                totalStableDebt: int256(totalStableDebt * normalizationFactor),\\n                totalVariableDebt: int256((totalVariableDebt - currentBorrow) * normalizationFactor),\\n                totalDeposits: int256(\\n                    (availableLiquidity +\\n                        totalStableDebt +\\n                        totalVariableDebt +\\n                        // to adapt to our future balance\\n                        // add the wantBalance and remove the currentBorrowed from the optimisation\\n                        balanceExcludingRewards -\\n                        deposits) * normalizationFactor\\n                ),\\n                stableBorrowRate: int256(averageStableBorrowRate),\\n                rewardDeposit: 0,\\n                rewardBorrow: 0,\\n                strategyAssets: int256(balanceExcludingRewards * normalizationFactor),\\n                guessedBorrowAssets: int256(guessedBorrow * normalizationFactor),\\n                slope1: slope1,\\n                slope2: slope2,\\n                r0: r0,\\n                uOptimal: uOptimal\\n            });\\n        }\\n\\n        {\\n            uint256 stkAavePriceInWant = _estimatedStkAaveToWant(1 ether);\\n\\n            (uint256 emissionPerSecondAToken, , ) = _incentivesController.assets(address(_aToken));\\n            (uint256 emissionPerSecondDebtToken, , ) = _incentivesController.assets(address(_debtToken));\\n\\n            parameters.rewardDeposit = int256(\\n                (emissionPerSecondAToken * 86400 * 365 * stkAavePriceInWant * 10**9) / wantBase\\n            );\\n            parameters.rewardBorrow = int256(\\n                (emissionPerSecondDebtToken * 86400 * 365 * stkAavePriceInWant * 10**9) / wantBase\\n            );\\n        }\\n\\n        borrow = uint256(ComputeProfitability.computeProfitability(parameters)) / normalizationFactor;\\n    }\\n\\n    function estimatedAPR() public view returns (uint256) {\\n        (\\n            ,\\n            ,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            ,\\n            ,\\n            ,\\n            ,\\n\\n        ) = _protocolDataProvider.getReserveData(address(want));\\n\\n        uint256 _totalAssets = _balanceOfWant() + _balanceOfAToken() - _balanceOfDebtToken();\\n        if (_totalAssets == 0 || totalVariableDebt == 0 || _aToken.totalSupply() == 0) return 0;\\n\\n        (uint256 deposits, uint256 borrows) = getCurrentPosition();\\n        uint256 yearlyRewardsATokenInUSDC;\\n        uint256 yearlyRewardsDebtTokenInUSDC;\\n        {\\n            uint256 stkAavePriceInWant = _estimatedStkAaveToWant(1 ether);\\n            (uint256 emissionPerSecondAToken, , ) = (_aToken.getIncentivesController()).assets(address(_aToken));\\n            (uint256 emissionPerSecondDebtToken, , ) = (_debtToken.getIncentivesController()).assets(\\n                address(_debtToken)\\n            );\\n\\n            uint256 yearlyEmissionsAToken = emissionPerSecondAToken * 60 * 60 * 24 * 365; // BASE: 18\\n            uint256 yearlyEmissionsDebtToken = emissionPerSecondDebtToken * 60 * 60 * 24 * 365; // BASE: 18\\n            yearlyRewardsATokenInUSDC = ((deposits * yearlyEmissionsAToken * stkAavePriceInWant * 10**9) /\\n                _aToken.totalSupply()); // BASE 27 + want\\n            yearlyRewardsDebtTokenInUSDC = ((borrows * yearlyEmissionsDebtToken * stkAavePriceInWant * 10**9) /\\n                totalVariableDebt); // BASE 27 + want\\n        }\\n\\n        return\\n            (liquidityRate *\\n                deposits +\\n                yearlyRewardsATokenInUSDC +\\n                yearlyRewardsDebtTokenInUSDC -\\n                variableBorrowRate *\\n                borrows) /\\n            _totalAssets /\\n            10**9; // BASE 18\\n    }\\n\\n    /// @notice Returns the `want` balance\\n    function _balanceOfWant() internal view returns (uint256) {\\n        return want.balanceOf(address(this));\\n    }\\n\\n    /// @notice Returns the `aToken` balance\\n    function _balanceOfAToken() internal view returns (uint256) {\\n        return _aToken.balanceOf(address(this));\\n    }\\n\\n    /// @notice Returns the `debtToken` balance\\n    function _balanceOfDebtToken() internal view returns (uint256) {\\n        return _debtToken.balanceOf(address(this));\\n    }\\n\\n    /// @notice Returns the `AAVE` balance\\n    function _balanceOfAave() internal view returns (uint256) {\\n        return IERC20(_aave).balanceOf(address(this));\\n    }\\n\\n    /// @notice Returns the `StkAAVE` balance\\n    function _balanceOfStkAave() internal view returns (uint256) {\\n        return IERC20(address(_stkAave)).balanceOf(address(this));\\n    }\\n\\n    /// @notice Estimate the amount of `want` we will get out by swapping it for AAVE\\n    /// @param amount Amount of AAVE we want to exchange (in base 18)\\n    /// @return amount Amount of `want` we are getting. We include a discount to account for slippage equal to 9000\\n    /// @dev Uses Chainlink spot price. Return value will be in base of `want` (6 for USDC)\\n    function _estimatedStkAaveToWant(uint256 amount) internal view returns (uint256) {\\n        (, int256 aavePriceUSD, , , ) = _chainlinkOracle.latestRoundData(); // stkAavePriceUSD is in base 8\\n        // `aavePriceUSD` is in base 8, and the discount factor is in base 4, so ultimately we need to divide\\n        // by `1e(18+8+4)\\n        return (uint256(aavePriceUSD) * amount * wantBase * discountFactor) / 1e30;\\n    }\\n\\n    /// @notice Verifies the cooldown status for earned stkAAVE\\n    /// @return cooldownStatus Status of the coolDown: if it is 0 then there is no cooldown Status, if it is 1 then\\n    /// the strategy should claim\\n    function _checkCooldown() internal view returns (uint256 cooldownStatus) {\\n        uint256 cooldownStartTimestamp = IStakedAave(_stkAave).stakersCooldowns(address(this));\\n        uint256 nextClaimStartTimestamp = cooldownStartTimestamp + cooldownSeconds;\\n        if (cooldownStartTimestamp == 0) {\\n            return 0;\\n        }\\n        if (block.timestamp > nextClaimStartTimestamp && block.timestamp <= nextClaimStartTimestamp + unstakeWindow) {\\n            return 1;\\n        }\\n        if (block.timestamp < nextClaimStartTimestamp) {\\n            return 2;\\n        }\\n    }\\n\\n    /// @notice Get the deposit and debt token for our `want` token\\n    function _getAaveAssets() internal view returns (address[] memory assets) {\\n        assets = new address[](2);\\n        assets[0] = address(_aToken);\\n        assets[1] = address(_debtToken);\\n    }\\n\\n    /// @notice Get Aave ratios for a token in order to compute later our collateral ratio\\n    /// @param token Address of the token for which to check the ratios (usually `want` token)\\n    /// @dev `getReserveConfigurationData` returns values in base 4. So here `ltv` and `liquidationThreshold` are returned in base 18\\n    function _getProtocolCollatRatios(address token) internal view returns (uint256 ltv, uint256 liquidationThreshold) {\\n        (, ltv, liquidationThreshold, , , , , , , ) = _protocolDataProvider.getReserveConfigurationData(token);\\n        // convert bps to wad\\n        ltv = ltv * _BPS_WAD_RATIO;\\n        liquidationThreshold = liquidationThreshold * _BPS_WAD_RATIO;\\n    }\\n\\n    // ========================= Internal Pure Functions ===========================\\n\\n    /// @notice Get target borrow amount based on deposit and collateral ratio\\n    /// @param deposit Current total deposited on Aave\\n    /// @param collatRatio Collateral ratio to target\\n    function _getBorrowFromDeposit(uint256 deposit, uint256 collatRatio) internal pure returns (uint256) {\\n        return (deposit * collatRatio) / _COLLATERAL_RATIO_PRECISION;\\n    }\\n\\n    /// @notice Get target deposit amount based on borrow and collateral ratio\\n    /// @param borrow Current total borrowed on Aave\\n    /// @param collatRatio Collateral ratio to target\\n    /// @param deposits Current deposit amount: this is what the function should return if the `collatRatio` is null\\n    function _getDepositFromBorrow(\\n        uint256 borrow,\\n        uint256 collatRatio,\\n        uint256 deposits\\n    ) internal pure returns (uint256) {\\n        if (collatRatio > 0) return (borrow * _COLLATERAL_RATIO_PRECISION) / collatRatio;\\n        else return deposits;\\n    }\\n\\n    /// @notice Get target borrow amount based on supply (deposits - borrow) and collateral ratio\\n    /// @param supply = deposits - borrows. The supply is what is \\\"actually\\\" deposited in Aave\\n    /// @param collatRatio Collateral ratio to target\\n    function _getBorrowFromSupply(uint256 supply, uint256 collatRatio) internal pure returns (uint256) {\\n        return (supply * collatRatio) / (_COLLATERAL_RATIO_PRECISION - collatRatio);\\n    }\\n\\n    /// @notice Computes the position collateral ratio from deposits and borrows\\n    function _getCollatRatio(uint256 deposits, uint256 borrows) internal pure returns (uint256 currentCollatRatio) {\\n        if (deposits > 0) {\\n            currentCollatRatio = (borrows * _COLLATERAL_RATIO_PRECISION) / deposits;\\n        }\\n    }\\n\\n    /// @notice Processes 1Inch revert messages\\n    function _revertBytes(bytes memory errMsg) internal pure {\\n        if (errMsg.length > 0) {\\n            //solhint-disable-next-line\\n            assembly {\\n                revert(add(32, errMsg), mload(errMsg))\\n            }\\n        }\\n        revert(\\\"117\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x06be2415b141b1414dae0d8533dca9261a5604399c91fe8db93060abaa395d3e\",\"license\":\"GPL-3.0\"},\"contracts/strategies/AaveFlashloanStrategy/AaveInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\nimport { DataTypes } from \\\"./AaveLibraries.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IAaveIncentivesController {\\n    /**\\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n     * @param user The address of the user\\n     * @return The rewards\\n     **/\\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n     * @param amount Amount of rewards to claim\\n     * @param to Address that will be receiving the rewards\\n     * @return Rewards claimed\\n     **/\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n     * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n     * @param amount Amount of rewards to claim\\n     * @param user Address to check and claim rewards\\n     * @param to Address that will be receiving the rewards\\n     * @return Rewards claimed\\n     **/\\n    function claimRewardsOnBehalf(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address user,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev returns the unclaimed rewards of the user\\n     * @param user the address of the user\\n     * @return the unclaimed user rewards\\n     */\\n    function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n    /**\\n     * @dev for backward compatibility with previous implementation of the Incentives controller\\n     */\\n    //solhint-disable-next-line\\n    function REWARD_TOKEN() external view returns (address);\\n\\n    function getDistributionEnd() external view returns (uint256);\\n\\n    function getAssetData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function assets(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 emissionPerSecond,\\n            uint256 index,\\n            uint256 lastUpdateTimestamp\\n        );\\n\\n    function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond) external;\\n}\\n\\ninterface ILendingPool {\\n    /**\\n     * @dev Emitted on deposit()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the deposit\\n     * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n     * @param amount The amount deposited\\n     * @param referral The referral code used\\n     **/\\n    event Deposit(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referral\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserve The address of the underlyng asset being withdrawn\\n     * @param user The address initiating the withdrawal, owner of aTokens\\n     * @param to Address that will receive the underlying\\n     * @param amount The amount to be withdrawn\\n     **/\\n    event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserve The address of the underlying asset being borrowed\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n     * initiator of the transaction on flashLoan()\\n     * @param onBehalfOf The address that will be getting the debt\\n     * @param amount The amount borrowed out\\n     * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n     * @param borrowRate The numeric rate at which the user has borrowed\\n     * @param referral The referral code used\\n     **/\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint256 borrowRateMode,\\n        uint256 borrowRate,\\n        uint16 indexed referral\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\n     * @param amount The amount repaid\\n     **/\\n    event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\\n\\n    /**\\n     * @dev Emitted on swapBorrowRateMode()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user swapping his rate mode\\n     * @param rateMode The rate mode that the user wants to swap to\\n     **/\\n    event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user for which the rebalance has been executed\\n     **/\\n    event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on flashLoan()\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param premium The fee flash borrowed\\n     * @param referralCode The referral code used\\n     **/\\n    event FlashLoan(\\n        address indexed target,\\n        address indexed initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        uint256 premium,\\n        uint16 referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted when the pause is triggered.\\n     */\\n    event Paused();\\n\\n    /**\\n     * @dev Emitted when the pause is lifted.\\n     */\\n    event Unpaused();\\n\\n    /**\\n     * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n     * LendingPoolCollateral manager using a DELEGATECALL\\n     * This allows to have the events in the generated ABI for LendingPool.\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n     * @param liquidator The address of the liquidator\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed debtAsset,\\n        address indexed user,\\n        uint256 debtToCover,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveAToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n     * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n     * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n     * gets added to the LendingPool ABI\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param liquidityRate The new liquidity rate\\n     * @param stableBorrowRate The new stable borrow rate\\n     * @param variableBorrowRate The new variable borrow rate\\n     * @param liquidityIndex The new liquidity index\\n     * @param variableBorrowIndex The new variable borrow index\\n     **/\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to deposit\\n     * @param amount The amount to be deposited\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to Address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     **/\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     **/\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     **/\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 rateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n     * @param asset The address of the underlying asset borrowed\\n     * @param rateMode The rate mode that the user wants to swap to\\n     **/\\n    function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n    /**\\n     * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n     *        borrowed at a stable rate and depositors are not earning enough\\n     * @param asset The address of the underlying asset borrowed\\n     * @param user The address of the user to be rebalanced\\n     **/\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n     * @param asset The address of the underlying asset deposited\\n     * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n     **/\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n    /**\\n     * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n     * For further details please visit https://developers.aave.com\\n     * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n     * @param assets The addresses of the assets being flash-borrowed\\n     * @param amounts The amounts amounts being flash-borrowed\\n     * @param modes Types of the debt to open if the flash loan is not returned:\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalCollateralETH the total collateral in ETH of the user\\n     * @return totalDebtETH the total debt in ETH of the user\\n     * @return availableBorrowsETH the borrowing power left of the user\\n     * @return currentLiquidationThreshold the liquidation threshold of the user\\n     * @return ltv the loan to value of the user\\n     * @return healthFactor the current health factor of the user\\n     **/\\n    function getUserAccountData(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    function initReserve(\\n        address reserve,\\n        address aTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\\n\\n    function setConfiguration(address reserve, uint256 configuration) external;\\n\\n    /**\\n     * @dev Returns the configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The configuration of the reserve\\n     **/\\n    function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @dev Returns the configuration of the user across all the reserves\\n     * @param user The user address\\n     * @return The configuration of the user\\n     **/\\n    function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n    /**\\n     * @dev Returns the normalized income normalized income of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the normalized variable debt per unit of asset\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 balanceFromAfter,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    function getReservesList() external view returns (address[] memory);\\n\\n    function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n    function setPause(bool val) external;\\n\\n    function paused() external view returns (bool);\\n}\\n\\ninterface IProtocolDataProvider {\\n    struct TokenData {\\n        string symbol;\\n        address tokenAddress;\\n    }\\n\\n    //solhint-disable-next-line\\n    function ADDRESSES_PROVIDER() external view returns (ILendingPoolAddressesProvider);\\n\\n    function getAllReservesTokens() external view returns (TokenData[] memory);\\n\\n    function getAllATokens() external view returns (TokenData[] memory);\\n\\n    function getReserveConfigurationData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 decimals,\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            uint256 reserveFactor,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive,\\n            bool isFrozen\\n        );\\n\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n\\n    function getUserReserveData(address asset, address user)\\n        external\\n        view\\n        returns (\\n            uint256 currentATokenBalance,\\n            uint256 currentStableDebt,\\n            uint256 currentVariableDebt,\\n            uint256 principalStableDebt,\\n            uint256 scaledVariableDebt,\\n            uint256 stableBorrowRate,\\n            uint256 liquidityRate,\\n            uint40 stableRateLastUpdated,\\n            bool usageAsCollateralEnabled\\n        );\\n\\n    function getReserveTokensAddresses(address asset)\\n        external\\n        view\\n        returns (\\n            address aTokenAddress,\\n            address stableDebtTokenAddress,\\n            address variableDebtTokenAddress\\n        );\\n}\\n\\ninterface IScaledBalanceToken {\\n    /**\\n     * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n     * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n     * @param user The user whose balance is calculated\\n     * @return The scaled balance of the user\\n     **/\\n    function scaledBalanceOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the scaled balance of the user and the scaled total supply.\\n     * @param user The address of the user\\n     * @return The scaled balance of the user\\n     * @return The scaled balance and the scaled total supply\\n     **/\\n    function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n    /**\\n     * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n     * @return The scaled total supply\\n     **/\\n    function scaledTotalSupply() external view returns (uint256);\\n}\\n\\n/**\\n * @title IVariableDebtToken\\n * @author Aave\\n * @notice Defines the basic interface for a variable debt token.\\n **/\\ninterface IVariableDebtToken is IERC20, IScaledBalanceToken {\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param from The address performing the mint\\n     * @param onBehalfOf The address of the user on which behalf minting has been performed\\n     * @param value The amount to be minted\\n     * @param index The last index of the reserve\\n     **/\\n    event Mint(address indexed from, address indexed onBehalfOf, uint256 value, uint256 index);\\n\\n    /**\\n     * @dev Mints debt token to the `onBehalfOf` address\\n     * @param user The address receiving the borrowed underlying, being the delegatee in case\\n     * of credit delegate, or same as `onBehalfOf` otherwise\\n     * @param onBehalfOf The address receiving the debt tokens\\n     * @param amount The amount of debt being minted\\n     * @param index The variable debt index of the reserve\\n     * @return `true` if the the previous balance of the user is 0\\n     **/\\n    function mint(\\n        address user,\\n        address onBehalfOf,\\n        uint256 amount,\\n        uint256 index\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when variable debt is burnt\\n     * @param user The user which debt has been burned\\n     * @param amount The amount of debt being burned\\n     * @param index The index of the user\\n     **/\\n    event Burn(address indexed user, uint256 amount, uint256 index);\\n\\n    /**\\n     * @dev Burns user variable debt\\n     * @param user The user which debt is burnt\\n     * @param index The variable debt index of the reserve\\n     **/\\n    function burn(\\n        address user,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n\\n    /**\\n     * @dev Returns the address of the incentives controller contract\\n     **/\\n    function getIncentivesController() external view returns (IAaveIncentivesController);\\n}\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n    event MarketIdSet(string newMarketId);\\n    event LendingPoolUpdated(address indexed newAddress);\\n    event ConfigurationAdminUpdated(address indexed newAddress);\\n    event EmergencyAdminUpdated(address indexed newAddress);\\n    event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n    event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n    event PriceOracleUpdated(address indexed newAddress);\\n    event LendingRateOracleUpdated(address indexed newAddress);\\n    event ProxyCreated(bytes32 id, address indexed newAddress);\\n    event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n    function getMarketId() external view returns (string memory);\\n\\n    function setMarketId(string calldata marketId) external;\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function getLendingPool() external view returns (address);\\n\\n    function setLendingPoolImpl(address pool) external;\\n\\n    function getLendingPoolConfigurator() external view returns (address);\\n\\n    function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n    function getLendingPoolCollateralManager() external view returns (address);\\n\\n    function setLendingPoolCollateralManager(address manager) external;\\n\\n    function getPoolAdmin() external view returns (address);\\n\\n    function setPoolAdmin(address admin) external;\\n\\n    function getEmergencyAdmin() external view returns (address);\\n\\n    function setEmergencyAdmin(address admin) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address priceOracle) external;\\n\\n    function getLendingRateOracle() external view returns (address);\\n\\n    function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\\ninterface IOptionalERC20 {\\n    function decimals() external view returns (uint8);\\n}\\n\\ninterface IPriceOracle {\\n    function getAssetPrice(address _asset) external view returns (uint256);\\n\\n    function getAssetsPrices(address[] calldata _assets) external view returns (uint256[] memory);\\n\\n    function getSourceOfAsset(address _asset) external view returns (address);\\n\\n    function getFallbackOracle() external view returns (address);\\n}\\n\\ninterface IStakedAave is IERC20 {\\n    function stake(address to, uint256 amount) external;\\n\\n    function redeem(address to, uint256 amount) external;\\n\\n    function cooldown() external;\\n\\n    function claimRewards(address to, uint256 amount) external;\\n\\n    function getTotalRewardsBalance(address) external view returns (uint256);\\n\\n    //solhint-disable-next-line\\n    function COOLDOWN_SECONDS() external view returns (uint256);\\n\\n    function stakersCooldowns(address) external view returns (uint256);\\n\\n    //solhint-disable-next-line\\n    function UNSTAKE_WINDOW() external view returns (uint256);\\n}\\n\\n/**\\n * @title IInitializableAToken\\n * @notice Interface for the initialize function on AToken\\n * @author Aave\\n **/\\ninterface IInitializableAToken {\\n    /**\\n     * @dev Emitted when an aToken is initialized\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param pool The address of the associated lending pool\\n     * @param treasury The address of the treasury\\n     * @param incentivesController The address of the incentives controller for this aToken\\n     * @param aTokenDecimals the decimals of the underlying\\n     * @param aTokenName the name of the aToken\\n     * @param aTokenSymbol the symbol of the aToken\\n     * @param params A set of encoded parameters for additional initialization\\n     **/\\n    event Initialized(\\n        address indexed underlyingAsset,\\n        address indexed pool,\\n        address treasury,\\n        address incentivesController,\\n        uint8 aTokenDecimals,\\n        string aTokenName,\\n        string aTokenSymbol,\\n        bytes params\\n    );\\n\\n    /**\\n     * @dev Initializes the aToken\\n     * @param pool The address of the lending pool where this aToken will be used\\n     * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n     * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n     * @param incentivesController The smart contract managing potential incentives distribution\\n     * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n     * @param aTokenName The name of the aToken\\n     * @param aTokenSymbol The symbol of the aToken\\n     */\\n    function initialize(\\n        ILendingPool pool,\\n        address treasury,\\n        address underlyingAsset,\\n        IAaveIncentivesController incentivesController,\\n        uint8 aTokenDecimals,\\n        string calldata aTokenName,\\n        string calldata aTokenSymbol,\\n        bytes calldata params\\n    ) external;\\n}\\n\\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param from The address performing the mint\\n     * @param value The amount being\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    event Mint(address indexed from, uint256 value, uint256 index);\\n\\n    /**\\n     * @dev Mints `amount` aTokens to `user`\\n     * @param user The address receiving the minted tokens\\n     * @param amount The amount of tokens getting minted\\n     * @param index The new liquidity index of the reserve\\n     * @return `true` if the the previous balance of the user was 0\\n     */\\n    function mint(\\n        address user,\\n        uint256 amount,\\n        uint256 index\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted after aTokens are burned\\n     * @param from The owner of the aTokens, getting them burned\\n     * @param target The address that will receive the underlying\\n     * @param value The amount being burned\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\\n\\n    /**\\n     * @dev Emitted during the transfer action\\n     * @param from The user whose tokens are being transferred\\n     * @param to The recipient\\n     * @param value The amount being transferred\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n    /**\\n     * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n     * @param user The owner of the aTokens, getting them burned\\n     * @param receiverOfUnderlying The address that will receive the underlying\\n     * @param amount The amount being burned\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    function burn(\\n        address user,\\n        address receiverOfUnderlying,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n\\n    /**\\n     * @dev Mints aTokens to the reserve treasury\\n     * @param amount The amount of tokens getting minted\\n     * @param index The new liquidity index of the reserve\\n     */\\n    function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n    /**\\n     * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n     * @param from The address getting liquidated, current owner of the aTokens\\n     * @param to The recipient\\n     * @param value The amount of tokens getting transferred\\n     **/\\n    function transferOnLiquidation(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external;\\n\\n    /**\\n     * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\n     * assets in borrow(), withdraw() and flashLoan()\\n     * @param user The recipient of the underlying\\n     * @param amount The amount getting transferred\\n     * @return The amount transferred\\n     **/\\n    function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @dev Invoked to execute actions on the aToken side after a repayment.\\n     * @param user The user executing the repayment\\n     * @param amount The amount getting repaid\\n     **/\\n    function handleRepayment(address user, uint256 amount) external;\\n\\n    /**\\n     * @dev Returns the address of the incentives controller contract\\n     **/\\n    function getIncentivesController() external view returns (IAaveIncentivesController);\\n\\n    /**\\n     * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n     **/\\n    //solhint-disable-next-line\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\\n/**\\n * @title IReserveInterestRateStrategyInterface interface\\n * @dev Interface for the calculation of the interest rates\\n * @author Aave\\n */\\ninterface IReserveInterestRateStrategy {\\n    function baseVariableBorrowRate() external view returns (uint256);\\n\\n    function getMaxVariableBorrowRate() external view returns (uint256);\\n\\n    function stableRateSlope1() external view returns (uint256);\\n\\n    function stableRateSlope2() external view returns (uint256);\\n\\n    function variableRateSlope1() external view returns (uint256);\\n\\n    function variableRateSlope2() external view returns (uint256);\\n\\n    //solhint-disable-next-line\\n    function OPTIMAL_UTILIZATION_RATE() external view returns (uint256);\\n\\n    function calculateInterestRates(\\n        address reserve,\\n        uint256 availableLiquidity,\\n        uint256 totalStableDebt,\\n        uint256 totalVariableDebt,\\n        uint256 averageStableBorrowRate,\\n        uint256 reserveFactor\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 liquidityRate,\\n            uint256 stableBorrowRate,\\n            uint256 variableBorrowRate\\n        );\\n\\n    function calculateInterestRates(\\n        address reserve,\\n        address aToken,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalStableDebt,\\n        uint256 totalVariableDebt,\\n        uint256 averageStableBorrowRate,\\n        uint256 reserveFactor\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 liquidityRate,\\n            uint256 stableBorrowRate,\\n            uint256 variableBorrowRate\\n        );\\n}\\n\",\"keccak256\":\"0xdcea00ea91910897daad1dfa1ca4023b55d525340120a157e678d698d1b45e3b\",\"license\":\"GPL-3.0\"},\"contracts/strategies/AaveFlashloanStrategy/AaveLibraries.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\nimport { IAToken, IProtocolDataProvider, IProtocolDataProvider, ILendingPool, IPriceOracle, IOptionalERC20 } from \\\"./AaveInterfaces.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary DataTypes {\\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        uint40 lastUpdateTimestamp;\\n        //tokens addresses\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint8 id;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: Reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60-63: reserved\\n        //bit 64-79: reserve factor\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        uint256 data;\\n    }\\n\\n    enum InterestRateMode {\\n        NONE,\\n        STABLE,\\n        VARIABLE\\n    }\\n}\\n\\nlibrary FlashMintLib {\\n    event Leverage(\\n        uint256 amountRequested,\\n        uint256 amountUsed,\\n        uint256 requiredDAI,\\n        uint256 amountToCloseLTVGap,\\n        bool deficit,\\n        address flashLoan\\n    );\\n\\n    address public constant LENDER = 0x1EB4CF3A948E7D72A198fe073cCb8C7a948cD853;\\n    uint256 private constant _DAI_DECIMALS = 1e18;\\n    uint256 private constant _COLLAT_RATIO_PRECISION = 1 ether;\\n    address private constant _WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address private constant _DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    IAToken public constant ADAI = IAToken(0x028171bCA77440897B824Ca71D1c56caC55b68A3);\\n    IProtocolDataProvider private constant _protocolDataProvider =\\n        IProtocolDataProvider(0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d);\\n    ILendingPool private constant _lendingPool = ILendingPool(0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9);\\n\\n    bytes32 public constant CALLBACK_SUCCESS = keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n    uint16 private constant _referral = 0; // TODO: get our own referral code\\n\\n    uint256 private constant _RAY = 10**27;\\n\\n    function doFlashMint(\\n        bool deficit,\\n        uint256 amountDesired,\\n        address token,\\n        uint256 collatRatioDAI,\\n        uint256 depositToCloseLTVGap\\n    ) public returns (uint256 amount) {\\n        if (amountDesired == 0) {\\n            return 0;\\n        }\\n        amount = amountDesired;\\n        address dai = _DAI;\\n\\n        // calculate amount of dai we need\\n        uint256 requiredDAI;\\n        {\\n            requiredDAI = (toDAI(amount, token) * _COLLAT_RATIO_PRECISION) / collatRatioDAI;\\n\\n            uint256 requiredDAIToCloseLTVGap = 0;\\n            if (depositToCloseLTVGap > 0) {\\n                requiredDAIToCloseLTVGap = toDAI(depositToCloseLTVGap, token);\\n                requiredDAI = requiredDAI + requiredDAIToCloseLTVGap;\\n            }\\n\\n            uint256 _maxLiquidity = maxLiquidity();\\n\\n            /*\\n            When depositing/withdrawing in the `lendingPool` the amounts are scaled by a `liquidityIndex` and rounded with the functions rayDiv and rayMul (in the aDAI contract)\\n            Weirdly, 2 different indexes are used: `liquidityIndex` is used when depositing and `getReserveNormalizedIncome` when withdrawing\\n            Therefore, we need to round `requiredDAI`, or we may get some rounding errors and revert\\n            because the amount we try to withdraw (to pay back the flashloan) is not equal to the amount deposited\\n            */\\n            uint256 liquidityIndex = _lendingPool.getReserveData(dai).liquidityIndex;\\n            uint256 getReserveNormalizedIncome = _lendingPool.getReserveNormalizedIncome(dai);\\n            uint256 rayDiv = ((requiredDAI * _RAY + liquidityIndex / 2) / liquidityIndex);\\n            requiredDAI = (rayDiv * getReserveNormalizedIncome + (_RAY / 2)) / _RAY;\\n\\n            if (requiredDAI > _maxLiquidity) {\\n                requiredDAI = (_maxLiquidity * _RAY - (_RAY / 2)) / getReserveNormalizedIncome;\\n                requiredDAI = (requiredDAI * liquidityIndex - liquidityIndex / 2) / _RAY;\\n\\n                // NOTE: if we cap amountDAI, we reduce amountToken we are taking too\\n                amount =\\n                    (fromDAI(requiredDAI - requiredDAIToCloseLTVGap, token) * collatRatioDAI) /\\n                    _COLLAT_RATIO_PRECISION;\\n            }\\n        }\\n\\n        bytes memory data = abi.encode(deficit, amount);\\n        uint256 _fee = IERC3156FlashLender(LENDER).flashFee(dai, requiredDAI);\\n        // Check that fees have not been increased without us knowing\\n        require(_fee == 0);\\n        uint256 _allowance = IERC20(dai).allowance(address(this), address(LENDER));\\n        if (_allowance < requiredDAI) {\\n            IERC20(dai).approve(address(LENDER), 0);\\n            IERC20(dai).approve(address(LENDER), type(uint256).max);\\n        }\\n\\n        IERC3156FlashLender(LENDER).flashLoan(IERC3156FlashBorrower(address(this)), dai, requiredDAI, data);\\n\\n        emit Leverage(amountDesired, amount, requiredDAI, depositToCloseLTVGap, deficit, LENDER);\\n\\n        return amount; // we need to return the amount of Token we have changed our position in\\n    }\\n\\n    function loanLogic(\\n        bool deficit,\\n        uint256 amount,\\n        uint256 amountFlashmint,\\n        address want\\n    ) public returns (bytes32) {\\n        address dai = _DAI;\\n        bool isDai = (want == dai);\\n\\n        ILendingPool lp = _lendingPool;\\n\\n        if (isDai) {\\n            if (deficit) {\\n                lp.deposit(dai, amountFlashmint - amount, address(this), _referral);\\n                lp.repay(dai, IERC20(dai).balanceOf(address(this)), 2, address(this));\\n                lp.withdraw(dai, amountFlashmint, address(this));\\n            } else {\\n                lp.deposit(dai, IERC20(dai).balanceOf(address(this)), address(this), _referral);\\n                lp.borrow(dai, amount, 2, _referral, address(this));\\n                lp.withdraw(dai, amountFlashmint - amount, address(this));\\n            }\\n        } else {\\n            // 1. Deposit DAI in Aave as collateral\\n            lp.deposit(dai, amountFlashmint, address(this), _referral);\\n\\n            if (deficit) {\\n                // 2a. if in deficit withdraw amount and repay it\\n                lp.withdraw(want, amount, address(this));\\n                lp.repay(want, IERC20(want).balanceOf(address(this)), 2, address(this));\\n            } else {\\n                // 2b. if levering up borrow and deposit\\n                lp.borrow(want, amount, 2, _referral, address(this));\\n                lp.deposit(want, IERC20(want).balanceOf(address(this)), address(this), _referral);\\n            }\\n            // 3. Withdraw DAI\\n            lp.withdraw(dai, amountFlashmint, address(this));\\n        }\\n\\n        return CALLBACK_SUCCESS;\\n    }\\n\\n    function priceOracle() internal view returns (IPriceOracle) {\\n        return IPriceOracle(_protocolDataProvider.ADDRESSES_PROVIDER().getPriceOracle());\\n    }\\n\\n    function toDAI(uint256 _amount, address asset) internal view returns (uint256) {\\n        address dai = _DAI;\\n        if (_amount == 0 || _amount == type(uint256).max || asset == dai) {\\n            return _amount;\\n        }\\n\\n        if (asset == _WETH) {\\n            return\\n                (_amount * (uint256(10)**uint256(IOptionalERC20(dai).decimals()))) / priceOracle().getAssetPrice(dai);\\n        }\\n\\n        address[] memory tokens = new address[](2);\\n        tokens[0] = asset;\\n        tokens[1] = dai;\\n        uint256[] memory prices = priceOracle().getAssetsPrices(tokens);\\n\\n        uint256 ethPrice = (_amount * prices[0]) / (uint256(10)**uint256(IOptionalERC20(asset).decimals()));\\n        return (ethPrice * _DAI_DECIMALS) / prices[1];\\n    }\\n\\n    function fromDAI(uint256 _amount, address asset) internal view returns (uint256) {\\n        address dai = _DAI;\\n        if (_amount == 0 || _amount == type(uint256).max || asset == dai) {\\n            return _amount;\\n        }\\n\\n        if (asset == _WETH) {\\n            return\\n                (_amount * priceOracle().getAssetPrice(dai)) / (uint256(10)**uint256(IOptionalERC20(dai).decimals()));\\n        }\\n\\n        address[] memory tokens = new address[](2);\\n        tokens[0] = asset;\\n        tokens[1] = dai;\\n        uint256[] memory prices = priceOracle().getAssetsPrices(tokens);\\n\\n        uint256 ethPrice = (_amount * prices[1]) / _DAI_DECIMALS;\\n\\n        return (ethPrice * (uint256(10)**uint256(IOptionalERC20(asset).decimals()))) / prices[0];\\n    }\\n\\n    function maxLiquidity() public view returns (uint256) {\\n        return IERC3156FlashLender(LENDER).maxFlashLoan(_DAI);\\n    }\\n}\\n\",\"keccak256\":\"0x2c6567605d2332c25bf03e02d6b2b22ed131308f6a4071deb6408f64edfed56b\",\"license\":\"GPL-3.0\"},\"contracts/strategies/AaveFlashloanStrategy/ComputeProfitability.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\n/// @title ComputeProfitability\\n/// @author Angle Core Team\\n/// @notice Helper contract to get the optimal borrow amount from a set of provided parameters from Aave\\nlibrary ComputeProfitability {\\n    struct SCalculateBorrow {\\n        int256 reserveFactor;\\n        int256 totalStableDebt;\\n        int256 totalVariableDebt;\\n        int256 totalDeposits;\\n        int256 stableBorrowRate;\\n        int256 rewardDeposit;\\n        int256 rewardBorrow;\\n        int256 strategyAssets;\\n        int256 guessedBorrowAssets;\\n        int256 slope1;\\n        int256 slope2;\\n        int256 r0;\\n        int256 uOptimal;\\n    }\\n\\n    int256 private constant _BASE_RAY = 10**27;\\n\\n    /// @notice Computes the Aave utilization ratio\\n    function _computeUtilization(int256 borrow, SCalculateBorrow memory parameters) internal pure returns (int256) {\\n        return\\n            ((parameters.totalStableDebt + parameters.totalVariableDebt + borrow) * _BASE_RAY) /\\n            (parameters.totalDeposits + borrow);\\n    }\\n\\n    /// @notice Computes the derivative of the utilization ratio with respect to the amount borrowed\\n    function _computeUprime(int256 borrow, SCalculateBorrow memory parameters) internal pure returns (int256) {\\n        return\\n            ((parameters.totalDeposits - parameters.totalStableDebt - parameters.totalVariableDebt) * _BASE_RAY) /\\n            (parameters.totalDeposits + borrow);\\n    }\\n\\n    /// @notice Computes the value of the interest rate, its first and second order derivatives\\n    /// @dev The returned value is in `_BASE_RAY`\\n    function _calculateInterestPrimes(int256 borrow, SCalculateBorrow memory parameters)\\n        internal\\n        pure\\n        returns (\\n            int256 interest,\\n            int256 interestPrime,\\n            int256 interestPrime2\\n        )\\n    {\\n        int256 newUtilization = _computeUtilization(borrow, parameters);\\n        int256 denomUPrime = (parameters.totalDeposits + borrow);\\n        int256 uprime = _computeUprime(borrow, parameters);\\n        uprime = (uprime * _BASE_RAY) / denomUPrime;\\n        int256 uprime2nd = -2 * uprime;\\n        uprime2nd = (uprime2nd * _BASE_RAY) / denomUPrime;\\n        if (newUtilization < parameters.uOptimal) {\\n            interest = parameters.r0 + (parameters.slope1 * newUtilization) / parameters.uOptimal;\\n            interestPrime = (parameters.slope1 * uprime) / parameters.uOptimal;\\n            interestPrime2 = (parameters.slope1 * uprime2nd) / parameters.uOptimal;\\n        } else {\\n            interest =\\n                parameters.r0 +\\n                parameters.slope1 +\\n                (parameters.slope2 * (newUtilization - parameters.uOptimal)) /\\n                (_BASE_RAY - parameters.uOptimal);\\n            interestPrime = (parameters.slope2 * uprime) / (_BASE_RAY - parameters.uOptimal);\\n            interestPrime2 = (parameters.slope2 * uprime2nd) / (_BASE_RAY - parameters.uOptimal);\\n        }\\n    }\\n\\n    /// @notice Computes the value of the revenue, as well as its first and second order derivatives\\n    function _revenuePrimes(\\n        int256 borrow,\\n        SCalculateBorrow memory parameters,\\n        bool onlyRevenue\\n    )\\n        internal\\n        pure\\n        returns (\\n            int256 revenue,\\n            int256 revenuePrime,\\n            int256 revenuePrime2nd\\n        )\\n    {\\n        (int256 newRate, int256 newRatePrime, int256 newRatePrime2) = _calculateInterestPrimes(borrow, parameters);\\n\\n        // 0 order derivative\\n        int256 proportionStrat = ((borrow + parameters.strategyAssets) * (_BASE_RAY - parameters.reserveFactor)) /\\n            (borrow + parameters.totalDeposits);\\n        int256 poolYearlyRevenue = (parameters.totalStableDebt *\\n            parameters.stableBorrowRate +\\n            (borrow + parameters.totalVariableDebt) *\\n            newRate) / _BASE_RAY;\\n\\n        revenue =\\n            (proportionStrat * poolYearlyRevenue) /\\n            _BASE_RAY +\\n            (borrow * parameters.rewardBorrow) /\\n            (borrow + parameters.totalVariableDebt) +\\n            ((borrow + parameters.strategyAssets) * parameters.rewardDeposit) /\\n            (borrow + parameters.totalDeposits) -\\n            (borrow * newRate) /\\n            _BASE_RAY;\\n\\n        if (!onlyRevenue) {\\n            // 1st order derivative\\n            {\\n                // Computing block per block to avoid stack too deep errors\\n                int256 proportionStratPrime = ((parameters.totalDeposits - parameters.strategyAssets) *\\n                    (_BASE_RAY - parameters.reserveFactor)) / (borrow + parameters.totalDeposits);\\n                proportionStratPrime = (proportionStratPrime * _BASE_RAY) / (borrow + parameters.totalDeposits);\\n                int256 poolYearlyRevenuePrime = (newRate *\\n                    _BASE_RAY +\\n                    (borrow + parameters.totalVariableDebt) *\\n                    newRatePrime) / _BASE_RAY;\\n\\n                revenuePrime = ((proportionStratPrime * poolYearlyRevenue + poolYearlyRevenuePrime * proportionStrat) /\\n                    _BASE_RAY);\\n\\n                {\\n                    int256 proportionStratPrime2nd = (-2 * (proportionStratPrime * (_BASE_RAY))) /\\n                        ((borrow + parameters.totalDeposits));\\n                    revenuePrime2nd =\\n                        2 *\\n                        proportionStratPrime *\\n                        poolYearlyRevenuePrime +\\n                        proportionStratPrime2nd *\\n                        poolYearlyRevenue;\\n                }\\n                poolYearlyRevenuePrime =\\n                    (2 * newRatePrime * _BASE_RAY + (borrow + parameters.totalVariableDebt) * newRatePrime2) /\\n                    _BASE_RAY;\\n\\n                revenuePrime2nd = (revenuePrime2nd + poolYearlyRevenuePrime * proportionStrat) / _BASE_RAY;\\n            }\\n\\n            int256 costPrime = (newRate * _BASE_RAY + borrow * newRatePrime) / _BASE_RAY;\\n            int256 rewardBorrowPrime = (parameters.rewardBorrow * (parameters.totalVariableDebt)) /\\n                (borrow + parameters.totalVariableDebt);\\n            rewardBorrowPrime = (rewardBorrowPrime * _BASE_RAY) / (borrow + parameters.totalVariableDebt);\\n            int256 rewardDepositPrime = (parameters.rewardDeposit *\\n                (parameters.totalDeposits - parameters.strategyAssets)) / (borrow + parameters.totalDeposits);\\n            rewardDepositPrime = (rewardDepositPrime * _BASE_RAY) / (borrow + parameters.totalDeposits);\\n\\n            revenuePrime += rewardBorrowPrime + rewardDepositPrime - costPrime;\\n\\n            // 2nd order derivative\\n            // Reusing variables for the stack too deep issue\\n            costPrime = ((2 * newRatePrime * _BASE_RAY) + borrow * newRatePrime2) / _BASE_RAY;\\n            rewardBorrowPrime = (-2 * rewardBorrowPrime * _BASE_RAY) / (borrow + parameters.totalVariableDebt);\\n            rewardDepositPrime = (-2 * rewardDepositPrime * _BASE_RAY) / (borrow + parameters.totalDeposits);\\n\\n            revenuePrime2nd += (rewardBorrowPrime + rewardDepositPrime) - costPrime;\\n        }\\n    }\\n\\n    /// @notice Returns the absolute value of an integer\\n    function _abs(int256 x) private pure returns (int256) {\\n        return x >= 0 ? x : -x;\\n    }\\n\\n    /// @notice Computes the optimal borrow amount of the strategy depending on Aave protocol parameters\\n    /// to maximize folding revenues\\n    /// @dev Performs a newton Raphson approximation to get the zero point of the derivative of the\\n    /// revenue function of the protocol depending on the amount borrowed\\n    function computeProfitability(SCalculateBorrow memory parameters) internal pure returns (int256 borrow) {\\n        (int256 y, , ) = _revenuePrimes(0, parameters, true);\\n        (int256 revenueWithBorrow, , ) = _revenuePrimes(_BASE_RAY, parameters, true);\\n\\n        if (revenueWithBorrow <= y) {\\n            return 0;\\n        }\\n        uint256 count;\\n        int256 borrowInit;\\n        int256 grad;\\n        int256 grad2nd;\\n        borrow = parameters.guessedBorrowAssets;\\n        // Tolerance is 1% in this method: indeed we're stopping: `_abs(borrowInit - borrow)/ borrowInit < 10**(-2)`\\n        while (count < 10 && (count == 0 || _abs(borrowInit - borrow) * (10**2 / 5) > borrowInit)) {\\n            (, grad, grad2nd) = _revenuePrimes(borrow, parameters, false);\\n            borrowInit = borrow;\\n            borrow = borrowInit - (grad * _BASE_RAY) / grad2nd;\\n            count += 1;\\n        }\\n\\n        (int256 x, , ) = _revenuePrimes(borrow, parameters, true);\\n        if (x <= y) {\\n            borrow = 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x38e8f54ce524f92f85bbbe7470333d626f98e97d085af4b4b57f51eb7cddfc33\",\"license\":\"GPL-3.0\"},\"contracts/strategies/BaseStrategyEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../external/AccessControl.sol\\\";\\nimport \\\"../external/AccessControlUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"../interfaces/IPoolManager.sol\\\";\\n\\n/// @title BaseStrategyEvents\\n/// @author Angle Core Team\\n/// @notice Events used in the abstract `BaseStrategy` contract\\ncontract BaseStrategyEvents {\\n    // So indexers can keep track of this\\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\\n\\n    event UpdatedMinReportDelayed(uint256 delay);\\n\\n    event UpdatedMaxReportDelayed(uint256 delay);\\n\\n    event UpdatedDebtThreshold(uint256 debtThreshold);\\n\\n    event UpdatedRewards(address rewards);\\n\\n    event UpdatedIsRewardActivated(bool activated);\\n\\n    event UpdatedRewardAmountAndMinimumAmountMoved(uint256 _rewardAmount, uint256 _minimumAmountMoved);\\n\\n    event EmergencyExitActivated();\\n}\\n\",\"keccak256\":\"0xd7d356e311f65ea6c6bd9c43487d5bfc84666d636ceeb4f264a65a124e95fe1c\",\"license\":\"GPL-3.0\"},\"contracts/strategies/BaseStrategyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./BaseStrategyEvents.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/// @title BaseStrategyUpgradeable\\n/// @author Forked from https://github.com/yearn/yearn-managers/blob/master/contracts/BaseStrategy.sol\\n/// @notice `BaseStrategyUpgradeable` implements all of the required functionalities to interoperate\\n/// with the `PoolManager` Contract.\\n/// @dev This contract should be inherited and the abstract methods implemented to adapt the `Strategy`\\n/// to the particular needs it has to create a return.\\nabstract contract BaseStrategyUpgradeable is BaseStrategyEvents, AccessControlUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant BASE = 10**18;\\n    uint256 public constant SECONDSPERYEAR = 31556952;\\n\\n    /// @notice Role for `PoolManager` only\\n    bytes32 public constant POOLMANAGER_ROLE = keccak256(\\\"POOLMANAGER_ROLE\\\");\\n    /// @notice Role for guardians and governors\\n    bytes32 public constant GUARDIAN_ROLE = keccak256(\\\"GUARDIAN_ROLE\\\");\\n    /// @notice Role for keepers\\n    bytes32 public constant KEEPER_ROLE = keccak256(\\\"KEEPER_ROLE\\\");\\n\\n    // ======================== References to contracts ============================\\n\\n    /// @notice Reference to the protocol's collateral `PoolManager`\\n    IPoolManager public poolManager;\\n\\n    /// @notice Reference to the ERC20 farmed by this strategy\\n    IERC20 public want;\\n\\n    /// @notice Base of the ERC20 token farmed by this strategy\\n    uint256 public wantBase;\\n\\n    // ============================ Parameters =====================================\\n\\n    /// @notice Use this to adjust the threshold at which running a debt causes a\\n    /// harvest trigger. See `setDebtThreshold()` for more details\\n    uint256 public debtThreshold;\\n\\n    /// @notice See note on `setEmergencyExit()`\\n    bool public emergencyExit;\\n\\n    // ============================ Constructor ====================================\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    /// @notice Constructor of the `BaseStrategyUpgradeable`\\n    /// @param _poolManager Address of the `PoolManager` lending collateral to this strategy\\n    /// @param governor Governor address of the protocol\\n    /// @param guardian Address of the guardian\\n    function _initialize(\\n        address _poolManager,\\n        address governor,\\n        address guardian,\\n        address[] memory keepers\\n    ) internal initializer {\\n        poolManager = IPoolManager(_poolManager);\\n        want = IERC20(poolManager.token());\\n        wantBase = 10**(IERC20Metadata(address(want)).decimals());\\n        require(guardian != address(0) && governor != address(0) && governor != guardian, \\\"0\\\");\\n        // AccessControl\\n        // Governor is guardian so no need for a governor role\\n        _setupRole(GUARDIAN_ROLE, guardian);\\n        _setupRole(GUARDIAN_ROLE, governor);\\n        _setupRole(POOLMANAGER_ROLE, address(_poolManager));\\n        _setRoleAdmin(POOLMANAGER_ROLE, POOLMANAGER_ROLE);\\n        _setRoleAdmin(GUARDIAN_ROLE, POOLMANAGER_ROLE);\\n\\n        // Initializing roles first\\n        for (uint256 i = 0; i < keepers.length; i++) {\\n            require(keepers[i] != address(0), \\\"0\\\");\\n            _setupRole(KEEPER_ROLE, keepers[i]);\\n        }\\n        _setRoleAdmin(KEEPER_ROLE, GUARDIAN_ROLE);\\n\\n        debtThreshold = 100 * BASE;\\n        emergencyExit = false;\\n        // Give `PoolManager` unlimited access (might save gas)\\n        want.safeIncreaseAllowance(address(poolManager), type(uint256).max);\\n    }\\n\\n    // ========================== Core functions ===================================\\n\\n    /// @notice Harvests the Strategy, recognizing any profits or losses and adjusting\\n    /// the Strategy's position.\\n    function harvest() external {\\n        _report();\\n        // Check if free returns are left, and re-invest them\\n        _adjustPosition();\\n    }\\n\\n    /// @notice Harvests the Strategy, recognizing any profits or losses and adjusting\\n    /// the Strategy's position.\\n    /// @param borrowInit Approximate optimal borrows to have faster convergence on the NR method\\n    function harvest(uint256 borrowInit) external onlyRole(KEEPER_ROLE) {\\n        _report();\\n        // Check if free returns are left, and re-invest them, gives an hint on the borrow amount to the NR method\\n        // to maximise revenue\\n        _adjustPosition(borrowInit);\\n    }\\n\\n    /// @notice Withdraws `_amountNeeded` to `poolManager`.\\n    /// @param _amountNeeded How much `want` to withdraw.\\n    /// @return amountFreed How much `want` withdrawn.\\n    /// @return _loss Any realized losses\\n    /// @dev This may only be called by the `PoolManager`\\n    function withdraw(uint256 _amountNeeded)\\n        external\\n        onlyRole(POOLMANAGER_ROLE)\\n        returns (uint256 amountFreed, uint256 _loss)\\n    {\\n        // Liquidate as much as possible `want` (up to `_amountNeeded`)\\n        (amountFreed, _loss) = _liquidatePosition(_amountNeeded);\\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\\n        want.safeTransfer(msg.sender, amountFreed);\\n        // NOTE: Reinvest anything leftover on next `tend`/`harvest`\\n    }\\n\\n    // ============================ View functions =================================\\n\\n    /// @notice Provides an accurate estimate for the total amount of assets\\n    /// (principle + return) that this Strategy is currently managing,\\n    /// denominated in terms of `want` tokens.\\n    /// This total should be \\\"realizable\\\" e.g. the total value that could\\n    /// *actually* be obtained from this Strategy if it were to divest its\\n    /// entire position based on current on-chain conditions.\\n    /// @return The estimated total assets in this Strategy.\\n    /// @dev Care must be taken in using this function, since it relies on external\\n    /// systems, which could be manipulated by the attacker to give an inflated\\n    /// (or reduced) value produced by this function, based on current on-chain\\n    /// conditions (e.g. this function is possible to influence through\\n    /// flashloan attacks, oracle manipulations, or other DeFi attack\\n    /// mechanisms).\\n    function estimatedTotalAssets() public view virtual returns (uint256);\\n\\n    /// @notice Provides an indication of whether this strategy is currently \\\"active\\\"\\n    /// in that it is managing an active position, or will manage a position in\\n    /// the future. This should correlate to `harvest()` activity, so that Harvest\\n    /// events can be tracked externally by indexing agents.\\n    /// @return True if the strategy is actively managing a position.\\n    function isActive() public view returns (bool) {\\n        return estimatedTotalAssets() > 0;\\n    }\\n\\n    // ============================ Internal Functions =============================\\n\\n    /// @notice PrepareReturn the Strategy, recognizing any profits or losses\\n    /// @dev In the rare case the Strategy is in emergency shutdown, this will exit\\n    /// the Strategy's position.\\n    /// @dev  When `_report()` is called, the Strategy reports to the Manager (via\\n    /// `poolManager.report()`), so in some cases `harvest()` must be called in order\\n    /// to take in profits, to borrow newly available funds from the Manager, or\\n    /// otherwise adjust its position. In other cases `harvest()` must be\\n    /// called to report to the Manager on the Strategy's position, especially if\\n    /// any losses have occurred.\\n    /// @dev As keepers may directly profit from this function, there may be front-running problems with miners bots,\\n    /// we may have to put an access control logic for this function to only allow white-listed addresses to act\\n    /// as keepers for the protocol\\n    function _report() internal {\\n        uint256 profit = 0;\\n        uint256 loss = 0;\\n        uint256 debtOutstanding = poolManager.debtOutstanding();\\n        uint256 debtPayment = 0;\\n        if (emergencyExit) {\\n            // Free up as much capital as possible\\n            uint256 amountFreed = _liquidateAllPositions();\\n            if (amountFreed < debtOutstanding) {\\n                loss = debtOutstanding - amountFreed;\\n            } else if (amountFreed > debtOutstanding) {\\n                profit = amountFreed - debtOutstanding;\\n            }\\n            debtPayment = debtOutstanding - loss;\\n        } else {\\n            // Free up returns for Manager to pull\\n            (profit, loss, debtPayment) = _prepareReturn(debtOutstanding);\\n        }\\n        emit Harvested(profit, loss, debtPayment, debtOutstanding);\\n\\n        // Allows Manager to take up to the \\\"harvested\\\" balance of this contract,\\n        // which is the amount it has earned since the last time it reported to\\n        // the Manager.\\n        poolManager.report(profit, loss, debtPayment);\\n    }\\n\\n    /// @notice Performs any Strategy unwinding or other calls necessary to capture the\\n    /// \\\"free return\\\" this Strategy has generated since the last time its core\\n    /// position(s) were adjusted. Examples include unwrapping extra rewards.\\n    /// This call is only used during \\\"normal operation\\\" of a Strategy, and\\n    /// should be optimized to minimize losses as much as possible.\\n    ///\\n    /// This method returns any realized profits and/or realized losses\\n    /// incurred, and should return the total amounts of profits/losses/debt\\n    /// payments (in `want` tokens) for the Manager's accounting (e.g.\\n    /// `want.balanceOf(this) >= _debtPayment + _profit`).\\n    ///\\n    /// `_debtOutstanding` will be 0 if the Strategy is not past the configured\\n    /// debt limit, otherwise its value will be how far past the debt limit\\n    /// the Strategy is. The Strategy's debt limit is configured in the Manager.\\n    ///\\n    /// NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`.\\n    ///       It is okay for it to be less than `_debtOutstanding`, as that\\n    ///       should only used as a guide for how much is left to pay back.\\n    ///       Payments should be made to minimize loss from slippage, debt,\\n    ///       withdrawal fees, etc.\\n    ///\\n    /// See `poolManager.debtOutstanding()`.\\n    function _prepareReturn(uint256 _debtOutstanding)\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _debtPayment\\n        );\\n\\n    /// @notice Performs any adjustments to the core position(s) of this Strategy given\\n    /// what change the Manager made in the \\\"investable capital\\\" available to the\\n    /// Strategy. Note that all \\\"free capital\\\" in the Strategy after the report\\n    /// was made is available for reinvestment. Also note that this number\\n    /// could be 0, and you should handle that scenario accordingly.\\n    function _adjustPosition() internal virtual;\\n\\n    /// @notice same as _adjustPosition but with an initial parameters\\n    function _adjustPosition(uint256) internal virtual;\\n\\n    /// @notice Liquidates up to `_amountNeeded` of `want` of this strategy's positions,\\n    /// irregardless of slippage. Any excess will be re-invested with `_adjustPosition()`.\\n    /// This function should return the amount of `want` tokens made available by the\\n    /// liquidation. If there is a difference between them, `_loss` indicates whether the\\n    /// difference is due to a realized loss, or if there is some other sitution at play\\n    /// (e.g. locked funds) where the amount made available is less than what is needed.\\n    ///\\n    /// NOTE: The invariant `_liquidatedAmount + _loss <= _amountNeeded` should always be maintained\\n    function _liquidatePosition(uint256 _amountNeeded)\\n        internal\\n        virtual\\n        returns (uint256 _liquidatedAmount, uint256 _loss);\\n\\n    /// @notice Liquidates everything and returns the amount that got freed.\\n    /// This function is used during emergency exit instead of `_prepareReturn()` to\\n    /// liquidate all of the Strategy's positions back to the Manager.\\n    function _liquidateAllPositions() internal virtual returns (uint256 _amountFreed);\\n\\n    /// @notice Override this to add all tokens/tokenized positions this contract\\n    /// manages on a *persistent* basis (e.g. not just for swapping back to\\n    /// want ephemerally).\\n    ///\\n    /// NOTE: Do *not* include `want`, already included in `sweep` below.\\n    ///\\n    /// Example:\\n    /// ```\\n    ///    function _protectedTokens() internal override view returns (address[] memory) {\\n    ///      address[] memory protected = new address[](3);\\n    ///      protected[0] = tokenA;\\n    ///      protected[1] = tokenB;\\n    ///      protected[2] = tokenC;\\n    ///      return protected;\\n    ///    }\\n    /// ```\\n    function _protectedTokens() internal view virtual returns (address[] memory);\\n\\n    // ============================== Governance ===================================\\n\\n    /// @notice Activates emergency exit. Once activated, the Strategy will exit its\\n    /// position upon the next harvest, depositing all funds into the Manager as\\n    /// quickly as is reasonable given on-chain conditions.\\n    /// @dev This may only be called by the `PoolManager`, because when calling this the `PoolManager` should at the same\\n    /// time update the debt ratio\\n    /// @dev This function can only be called once by the `PoolManager` contract\\n    /// @dev See `poolManager.setEmergencyExit()` and `harvest()` for further details.\\n    function setEmergencyExit() external onlyRole(POOLMANAGER_ROLE) {\\n        emergencyExit = true;\\n        emit EmergencyExitActivated();\\n    }\\n\\n    /// @notice Sets how far the Strategy can go into loss without a harvest and report\\n    /// being required.\\n    /// @param _debtThreshold How big of a loss this Strategy may carry without\\n    /// @dev By default this is 0, meaning any losses would cause a harvest which\\n    /// will subsequently report the loss to the Manager for tracking.\\n    function setDebtThreshold(uint256 _debtThreshold) external onlyRole(GUARDIAN_ROLE) {\\n        debtThreshold = _debtThreshold;\\n        emit UpdatedDebtThreshold(_debtThreshold);\\n    }\\n\\n    /// @notice Removes tokens from this Strategy that are not the type of tokens\\n    /// managed by this Strategy. This may be used in case of accidentally\\n    /// sending the wrong kind of token to this Strategy.\\n    ///\\n    /// Tokens will be sent to `governance()`.\\n    ///\\n    /// This will fail if an attempt is made to sweep `want`, or any tokens\\n    /// that are protected by this Strategy.\\n    ///\\n    /// This may only be called by governance.\\n    /// @param _token The token to transfer out of this `PoolManager`.\\n    /// @param to Address to send the tokens to.\\n    /// @dev\\n    /// Implement `_protectedTokens()` to specify any additional tokens that\\n    /// should be protected from sweeping in addition to `want`.\\n    function sweep(address _token, address to) external onlyRole(GUARDIAN_ROLE) {\\n        require(_token != address(want), \\\"93\\\");\\n\\n        address[] memory __protectedTokens = _protectedTokens();\\n        for (uint256 i = 0; i < __protectedTokens.length; i++)\\n            // In the strategy we use so far, the only protectedToken is the want token\\n            // and this has been checked above\\n            require(_token != __protectedTokens[i], \\\"93\\\");\\n\\n        IERC20(_token).safeTransfer(to, IERC20(_token).balanceOf(address(this)));\\n    }\\n\\n    // ============================ Manager functions ==============================\\n\\n    /// @notice Adds a new guardian address and echoes the change to the contracts\\n    /// that interact with this collateral `PoolManager`\\n    /// @param _guardian New guardian address\\n    /// @dev This internal function has to be put in this file because Access Control is not defined\\n    /// in PoolManagerInternal\\n    function addGuardian(address _guardian) external virtual;\\n\\n    /// @notice Revokes the guardian role and propagates the change to other contracts\\n    /// @param guardian Old guardian address to revoke\\n    function revokeGuardian(address guardian) external virtual;\\n}\\n\",\"keccak256\":\"0x9639fe29a8ee91e426d85d502daffccfaf8472f98597f038aaf7e18f1a15bab4\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061036d5760003560e01c80634c3f425f116101d3578063abac6e1111610104578063d94fa4af116100a2578063ec342ad01161007c578063ec342ad01461072b578063efbb5cb01461073a578063f8453e7c14610742578063fcf2d0ad1461075557600080fd5b8063d94fa4af146106fc578063dc4c90d314610705578063ddc632621461071857600080fd5b8063b8221bc4116100de578063b8221bc4146106c4578063b8dc491b146106cd578063d0134cb7146106e0578063d547741f146106e957600080fd5b8063abac6e1114610693578063af306e16146106a6578063af648c3d146106b157600080fd5b80638e5b14b011610171578063a34a42231161014b578063a34a42231461065b578063a526d83b1461066e578063a62b75a814610681578063a8f9c0d81461068a57600080fd5b80638e5b14b01461063757806391d1485414610640578063a217fddf1461065357600080fd5b80635e4a1e01116101ad5780635e4a1e01146106135780636314e8841461061c578063659621b51461062557806386d8745b1461062e57600080fd5b80634c3f425f146105f65780635641ec03146105fe5780635a5cd45e1461060b57600080fd5b80632e1a7d4d116102ad578063372500ab1161024b578063418f35cc11610225578063418f35cc146105d45780634322b714146105dc5780634641257d146105e55780634c32e270146105ed57600080fd5b8063372500ab1461059a578063387f504a146105a2578063396794cd146105c157600080fd5b80633042087c116102875780633042087c146104fa578063364bc15a1461050d57806336568abe14610534578063368a9d6d1461054757600080fd5b80632e1a7d4d146104b65780632e4debb3146104de5780632f2ff15d146104e757600080fd5b80631f1fcd511161031a57806323cf978f116102f457806323cf978f1461044557806323e30c8b14610458578063248a9ca31461046b57806324ea54f41461048f57600080fd5b80631f1fcd51146103f9578063205409d31461042457806322f3e2d41461042d57600080fd5b80630c016dc01161034b5780630c016dc0146103b65780630f969b87146103dd5780631d12f28b146103f057600080fd5b806305b4193414610372578063060ca2ba146103875780630b6d1d171461039a575b600080fd5b61038561038036600461574e565b61075d565b005b61038561039536600461581b565b610881565b6103a360355481565b6040519081526020015b60405180910390f35b6103a37f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe56281565b6103856103eb366004615616565b61097f565b6103a360365481565b60345461040c906001600160a01b031681565b6040516001600160a01b0390911681526020016103ad565b6103a360435481565b6104356109e6565b60405190151581526020016103ad565b610385610453366004615616565b6109f7565b6103a361046636600461541d565b610a79565b6103a3610479366004615616565b6000908152600160208190526040909120015490565b6103a37f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504181565b6104c96104c4366004615616565b610bd1565b604080519283526020830191909152016103ad565b6103a3603e5481565b6103856104f5366004615648565b610c2a565b610385610508366004615616565b610c56565b6103a37ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab81565b610385610542366004615648565b610c94565b6047546105709060ff808216916101008104821691620100008204811691630100000090041684565b604080519415158552921515602085015290151591830191909152151560608201526080016103ad565b610385610cfa565b6046546105af9060ff1681565b60405160ff90911681526020016103ad565b6103856105cf366004615616565b610d2d565b6104c9610d61565b6103a3603a5481565b610385610d7c565b6103a360405481565b610385610d8e565b6037546104359060ff1681565b6103a3610d96565b6103a360455481565b6103a360395481565b6103a3603d5481565b6103a360445481565b6103a360415481565b61043561064e366004615648565b611310565b6103a3600081565b61038561066936600461566d565b61133d565b61038561067c36600461535d565b611404565b6103a3603b5481565b6103a3603f5481565b6103856106a136600461596a565b611459565b6103a36301e1855881565b6103856106bf36600461535d565b611512565b6103a360385481565b6103856106db366004615397565b611567565b6103a3603c5481565b6103856106f7366004615648565b611720565b6103a360425481565b60335461040c906001600160a01b031681565b610385610726366004615616565b611747565b6103a3670de0b6b3a764000081565b6103a3611783565b6103856107503660046154c7565b611880565b610385611c06565b7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab6107888133611c79565b600080731111111254fb6c44bac0bed2854e76f90643097d6001600160a01b0316846040516107b79190615a3e565b6000604051808303816000865af19150503d80600081146107f4576040519150601f19603f3d011682016040523d82523d6000602084013e6107f9565b606091505b50915091508161080c5761080c81611cdd565b600081806020019051810190610822919061562f565b9050858110156108795760405162461bcd60e51b815260206004820152600260248201527f313500000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b505050505050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416108ac8133611c79565b60345460009081906108c6906001600160a01b0316611d34565b9150915060006108e9736b175474e89094c44da98b954eedeac495271d0f611d34565b50905081881080156108fa57508187105b801561090557508688105b801561091057508286105b801561091b57508085105b6109675760405162461bcd60e51b815260206004820152600160248201527f38000000000000000000000000000000000000000000000000000000000000006044820152606401610870565b505050604094909455604192909255603f5560425550565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416109aa8133611c79565b60368290556040518281527fa68ba126373d04c004c5748c300c9fca12bd444b3d4332e261f3bd2bac4a86009060200160405180910390a15050565b6000806109f1611783565b11905090565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610a228133611c79565b6127108210610a735760405162461bcd60e51b815260206004820152600160248201527f34000000000000000000000000000000000000000000000000000000000000006044820152606401610870565b50604555565b600033731eb4cf3a948e7d72a198fe073ccb8c7a948cd853148015610aa657506001600160a01b03871630145b610af25760405162461bcd60e51b815260206004820152600160248201527f31000000000000000000000000000000000000000000000000000000000000006044820152606401610870565b600080610b01848601866155ea565b6034546040517fbf04d6e8000000000000000000000000000000000000000000000000000000008152831515600482015260248101839052604481018b90526001600160a01b039091166064820152919350915073__$769b0789f1f3504b29e5e16055ef62b17c$__9063bf04d6e89060840160206040518083038186803b158015610b8c57600080fd5b505af4158015610ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc4919061562f565b9998505050505050505050565b6000807f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe562610bff8133611c79565b610c0884611e19565b6034549194509250610c24906001600160a01b03163385611e49565b50915091565b60008281526001602081905260409091200154610c478133611c79565b610c518383611ef2565b505050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610c818133611c79565b610c8a82611f5d565b50610c518261202a565b6001600160a01b0381163314610cec5760405162461bcd60e51b815260206004820152600260248201527f37310000000000000000000000000000000000000000000000000000000000006044820152606401610870565b610cf682826120f7565b5050565b7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab610d258133611c79565b610cf661215e565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610d588133611c79565b610c5182611f5d565b600080610d6c6123d2565b9150610d76612454565b90509091565b610d84612485565b610d8c612651565b565b610d8c61265c565b6034546040517f35ea6a750000000000000000000000000000000000000000000000000000000081526001600160a01b03909116600482015260009081908190819073057835ad21a177dbdd3090bb1cae03eacf78fc6d906335ea6a75906024016101406040518083038186803b158015610e1057600080fd5b505afa158015610e24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4891906158f4565b505050505094509450945050506000610e5f612454565b610e676123d2565b610e6f612a70565b610e799190615bf4565b610e839190615e53565b9050801580610e90575083155b80610f1e5750604860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ee457600080fd5b505afa158015610ef8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1c919061562f565b155b15610f2e57600094505050505090565b600080610f39610d61565b915091506000806000610f53670de0b6b3a7640000612aa1565b90506000604860009054906101000a90046001600160a01b03166001600160a01b03166375d264136040518163ffffffff1660e01b815260040160206040518083038186803b158015610fa557600080fd5b505afa158015610fb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdd919061537a565b604854604051631e23703160e31b81526001600160a01b03918216600482015291169063f11b81889060240160606040518083038186803b15801561102157600080fd5b505afa158015611035573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105991906157ed565b505090506000604960009054906101000a90046001600160a01b03166001600160a01b03166375d264136040518163ffffffff1660e01b815260040160206040518083038186803b1580156110ad57600080fd5b505afa1580156110c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e5919061537a565b604954604051631e23703160e31b81526001600160a01b03918216600482015291169063f11b81889060240160606040518083038186803b15801561112957600080fd5b505afa15801561113d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116191906157ed565b50509050600082603c6111749190615ddc565b61117f90603c615ddc565b61118a906018615ddc565b6111969061016d615ddc565b905060006111a583603c615ddc565b6111b090603c615ddc565b6111bb906018615ddc565b6111c79061016d615ddc565b9050604860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561121757600080fd5b505afa15801561122b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124f919061562f565b8561125a848c615ddc565b6112649190615ddc565b61127290633b9aca00615ddc565b61127c9190615c3a565b96508c8561128a838b615ddc565b6112949190615ddc565b6112a290633b9aca00615ddc565b6112ac9190615c3a565b95505050505050633b9aca008584886112c59190615ddc565b83856112d1898d615ddc565b6112db9190615bf4565b6112e59190615bf4565b6112ef9190615e53565b6112f99190615c3a565b6113039190615c3a565b9850505050505050505090565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416113688133611c79565b508051604780546020840151604085015160609095015161ffff1990921693151561ff0019169390931761010093151593909302929092177fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000ffff1662010000931515939093027fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff1692909217630100000091151591909102179055565b7f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe56261142f8133611c79565b610cf67f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504183611ef2565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416114848133611c79565b603f5483108015611498575060008260ff16115b80156114a7575060108260ff16105b6114f35760405162461bcd60e51b815260206004820152600160248201527f38000000000000000000000000000000000000000000000000000000000000006044820152606401610870565b506043929092556044556046805460ff191660ff909216919091179055565b7f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe56261153d8133611c79565b610cf67f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041836120f7565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416115928133611c79565b6034546001600160a01b03848116911614156115f05760405162461bcd60e51b815260206004820152600260248201527f39330000000000000000000000000000000000000000000000000000000000006044820152606401610870565b606060005b815181101561168b5781818151811061161057611610615f31565b60200260200101516001600160a01b0316856001600160a01b031614156116795760405162461bcd60e51b815260206004820152600260248201527f39330000000000000000000000000000000000000000000000000000000000006044820152606401610870565b8061168381615ead565b9150506115f5565b506040516370a0823160e01b815230600482015261171a9084906001600160a01b038716906370a082319060240160206040518083038186803b1580156116d157600080fd5b505afa1580156116e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611709919061562f565b6001600160a01b0387169190611e49565b50505050565b6000828152600160208190526040909120015461173d8133611c79565b610c5183836120f7565b7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab6117728133611c79565b61177a612485565b610cf682612b74565b6000806000611790610d61565b909250905061185173d784927ff2f95ba542bfc824c8a8a98f3495f6b5638b599f266117ba612d57565b306040518363ffffffff1660e01b81526004016117d8929190615adb565b60206040518083038186803b1580156117f057600080fd5b505afa158015611804573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611828919061562f565b611830612deb565b611838612e25565b6118429190615bf4565b61184c9190615bf4565b612aa1565b818361185b612a70565b6118659190615bf4565b61186f9190615e53565b6118799190615bf4565b9250505090565b61188c85848484612e5f565b60468054600660ff1990911617905560646043556611c37937e080006044556123286045556040805160808101825260018082526020820181905260009282019290925260600152604780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000166301000101179055603780547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b0387160217905561194161265c565b6034546040517fd2493b6c0000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152600090819073057835ad21a177dbdd3090bb1cae03eacf78fc6d9063d2493b6c9060240160606040518083038186803b1580156119b657600080fd5b505afa1580156119ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ee91906153d0565b604880546001600160a01b038086167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255604980548385169216919091179055603454939550909350600092839250611a4d9116611d34565b9092509050611a6366470de4df82000082615e53565b604055611a776611c37937e0800082615e53565b604155611a8b6611c37937e0800083615e53565b603f556000611aad736b175474e89094c44da98b954eedeac495271d0f611d34565b509050611ac16611c37937e0800082615e53565b604255603454611aee906001600160a01b0316737d2768de32b0b80b7a3454c06bdac94a69ddc7a9613397565b611b0c85737d2768de32b0b80b7a3454c06bdac94a69ddc7a9613397565b611b3e736b175474e89094c44da98b954eedeac495271d0f731eb4cf3a948e7d72a198fe073ccb8c7a948cd853613397565b611b70734da27a545c0c5b758a6ba100e3a049001de870f5731111111254fb6c44bac0bed2854e76f90643097d613397565b611ba2737fc66500c84a76ad7e9c93437bfc5ac33e2ddae9731111111254fb6c44bac0bed2854e76f90643097d613397565b6034546001600160a01b0316736b175474e89094c44da98b954eedeac495271d0f14611bfa57611bfa736b175474e89094c44da98b954eedeac495271d0f737d2768de32b0b80b7a3454c06bdac94a69ddc7a9613397565b50505050505050505050565b7f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe562611c318133611c79565b6037805460ff191660011790556040517f17fa25a1c2ac074f71f0cf4f6af525c06fab7d83eff5ffcf6df5277f2919ae2490600090a150565b6001600160a01b03163b151590565b611c838282611310565b610cf657611c9b816001600160a01b031660146133ad565b611ca68360206133ad565b604051602001611cb7929190615a5a565b60408051601f198184030181529082905262461bcd60e51b825261087091600401615b38565b805115611cec57805181602001fd5b60405162461bcd60e51b815260206004820152600360248201527f31313700000000000000000000000000000000000000000000000000000000006044820152606401610870565b6040517f3e1501410000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152600090819073057835ad21a177dbdd3090bb1cae03eacf78fc6d90633e150141906024016101406040518083038186803b158015611da657600080fd5b505afa158015611dba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dde919061584d565b50969950949750611e009650655af3107a40009550889450615ddc9350505050565b9150611e12655af3107a400082615ddc565b9050915091565b600080600080611e27610d61565b91509150611e3e85611e37612a70565b84846135d6565b935093505050915091565b6040516001600160a01b038316602482015260448101829052610c519084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526136b4565b611efc8282611310565b610cf65760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b600081611f6c57506000919050565b6034546040517f69328dec0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116600482015260248101839052306044820152737d2768de32b0b80b7a3454c06bdac94a69ddc7a9906369328dec90606401602060405180830381600087803b158015611feb57600080fd5b505af1158015611fff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612023919061562f565b5090919050565b60008161203957506000919050565b6034546040517f573ade810000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526024810183905260026044820152306064820152737d2768de32b0b80b7a3454c06bdac94a69ddc7a99063573ade8190608401602060405180830381600087803b1580156120bf57600080fd5b505af11580156120d3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611337919061562f565b6121018282611310565b15610cf65760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000612168612e25565b90506000811561217d5761217a613799565b90505b60008211801561218d5750806001145b1561229c576040517f9a99b4f00000000000000000000000000000000000000000000000000000000081523060048201526000196024820152734da27a545c0c5b758a6ba100e3a049001de870f590639a99b4f090604401600060405180830381600087803b1580156121ff57600080fd5b505af1158015612213573d6000803e3d6000fd5b50506040517f1e9a695000000000000000000000000000000000000000000000000000000000815230600482015260248101859052734da27a545c0c5b758a6ba100e3a049001de870f59250631e9a69509150604401600060405180830381600087803b15801561228357600080fd5b505af1158015612297573d6000803e3d6000fd5b505050505b73d784927ff2f95ba542bfc824c8a8a98f3495f6b5633111e7b36122be612d57565b600019306040518463ffffffff1660e01b81526004016122e093929190615b06565b602060405180830381600087803b1580156122fa57600080fd5b505af115801561230e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612332919061562f565b5061233b612e25565b6047549092506301000000900460ff1680156123575750600082115b8015612361575080155b156123ce57734da27a545c0c5b758a6ba100e3a049001de870f56001600160a01b031663787a08a66040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156123b557600080fd5b505af11580156123c9573d6000803e3d6000fd5b505050505b5090565b6048546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a08231906024015b60206040518083038186803b15801561241757600080fd5b505afa15801561242b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244f919061562f565b905090565b6049546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a08231906024016123ff565b6000806000603360009054906101000a90046001600160a01b03166001600160a01b031663bf3759b56040518163ffffffff1660e01b815260040160206040518083038186803b1580156124d857600080fd5b505afa1580156124ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612510919061562f565b60375490915060009060ff161561256d57600061252b61389a565b9050828110156125465761253f8184615e53565b935061255b565b8281111561255b576125588382615e53565b94505b6125658484615e53565b91505061257e565b612576826138ad565b919550935090505b6040805185815260208101859052908101829052606081018390527f4c0f499ffe6befa0ca7c826b0916cf87bea98de658013e76938489368d60d5099060800160405180910390a16033546040517fa1d9bafc0000000000000000000000000000000000000000000000000000000081526004810186905260248101859052604481018390526001600160a01b039091169063a1d9bafc90606401600060405180830381600087803b15801561263357600080fd5b505af1158015612647573d6000803e3d6000fd5b5050505050505050565b610d8c600019612b74565b6034546040517f3e1501410000000000000000000000000000000000000000000000000000000081526001600160a01b03909116600482015260009073057835ad21a177dbdd3090bb1cae03eacf78fc6d90633e150141906024016101406040518083038186803b1580156126d057600080fd5b505afa1580156126e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612708919061584d565b5050505050945050505050734da27a545c0c5b758a6ba100e3a049001de870f56001600160a01b03166372b49d636040518163ffffffff1660e01b815260040160206040518083038186803b15801561276057600080fd5b505afa158015612774573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612798919061562f565b603881905550734da27a545c0c5b758a6ba100e3a049001de870f56001600160a01b031663359c4a966040518163ffffffff1660e01b815260040160206040518083038186803b1580156127eb57600080fd5b505afa1580156127ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612823919061562f565b60395561283a8169152d02c7e14af6800000615ddc565b603a81905550603760019054906101000a90046001600160a01b03166001600160a01b0316637b832f586040518163ffffffff1660e01b815260040160206040518083038186803b15801561288e57600080fd5b505afa1580156128a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c6919061562f565b603b81905550603760019054906101000a90046001600160a01b03166001600160a01b03166365614f816040518163ffffffff1660e01b815260040160206040518083038186803b15801561291a57600080fd5b505afa15801561292e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612952919061562f565b603c81905550603760019054906101000a90046001600160a01b03166001600160a01b031663b25895446040518163ffffffff1660e01b815260040160206040518083038186803b1580156129a657600080fd5b505afa1580156129ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129de919061562f565b603d81905550603760019054906101000a90046001600160a01b03166001600160a01b031663a15f30ac6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a3257600080fd5b505afa158015612a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6a919061562f565b603e5550565b6034546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a08231906024016123ff565b60008073547a514d5e3769680ce22b2361c10ea13619e8a96001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015612af157600080fd5b505afa158015612b05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b299190615998565b5050509150506c0c9f2c9cd04674edea400000006045546035548584612b4f9190615ddc565b612b599190615ddc565b612b639190615ddc565b612b6d9190615c3a565b9392505050565b603354604080517fbf3759b500000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163bf3759b5916004808301926020929190829003018186803b158015612bd257600080fd5b505afa158015612be6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0a919061562f565b90506000612c16612a70565b90508181118015612c315750604354612c2f8383615e53565b115b15612c5457612c48612c438383615e53565b613a4c565b50612c51612a70565b90505b600080612c5f610d61565b915091506000198514612c725784612c74565b805b60475490955060009060ff1615612cac57612ca582612c938587615bf4565b612c9d9190615e53565b848489613b00565b9050612cb1565b506040545b6000612cbd8484613b48565b905084861115612ce7576000612cd38688615e53565b9050612ce0818686613b63565b5050612d4e565b81811015612d1157604454612cfc8284615e53565b1115612d0c57612d0c8484613bc0565b612d4e565b81811115612d4e57604454612d268383615e53565b1115612d4e576000612d41612d3b8587615e53565b84613c72565b9050612647818686613c90565b50505050505050565b6040805160028082526060808301845292602083019080368337505060485482519293506001600160a01b031691839150600090612d9757612d97615f31565b6001600160a01b039283166020918202929092010152604954825191169082906001908110612dc857612dc8615f31565b60200260200101906001600160a01b031690816001600160a01b03168152505090565b6040516370a0823160e01b8152306004820152600090737fc66500c84a76ad7e9c93437bfc5ac33e2ddae9906370a08231906024016123ff565b6040516370a0823160e01b8152306004820152600090734da27a545c0c5b758a6ba100e3a049001de870f5906370a08231906024016123ff565b600054610100900460ff16612e7a5760005460ff1615612e7e565b303b155b612ef05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610870565b600054610100900460ff16158015612f12576000805461ffff19166101011790555b603380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038716908117909155604080517ffc0c546a000000000000000000000000000000000000000000000000000000008152905163fc0c546a91600480820192602092909190829003018186803b158015612f9757600080fd5b505afa158015612fab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fcf919061537a565b603480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169182179055604080517f313ce567000000000000000000000000000000000000000000000000000000008152905163313ce56791600480820192602092909190829003018186803b15801561305557600080fd5b505afa158015613069573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061308d91906159e8565b61309890600a615c91565b6035556001600160a01b038316158015906130bb57506001600160a01b03841615155b80156130d95750826001600160a01b0316846001600160a01b031614155b6131255760405162461bcd60e51b815260206004820152600160248201527f30000000000000000000000000000000000000000000000000000000000000006044820152606401610870565b61314f7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504184613dc4565b6131797f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504185613dc4565b6131a37f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe56286613dc4565b6131cd7f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe56280613dce565b6132177f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50417f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe562613dce565b60005b82518110156132f45760006001600160a01b031683828151811061324057613240615f31565b60200260200101516001600160a01b0316141561329f5760405162461bcd60e51b815260206004820152600160248201527f30000000000000000000000000000000000000000000000000000000000000006044820152606401610870565b6132e27ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab8483815181106132d5576132d5615f31565b6020026020010151613dc4565b806132ec81615ead565b91505061321a565b5061333f7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041613dce565b613352670de0b6b3a76400006064615ddc565b6036556037805460ff1916905560335460345461337e916001600160a01b039182169116600019613e25565b8015613390576000805461ff00191690555b5050505050565b610cf66001600160a01b03831682600019613f18565b606060006133bc836002615ddc565b6133c7906002615bf4565b67ffffffffffffffff8111156133df576133df615f47565b6040519080825280601f01601f191660200182016040528015613409576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061344057613440615f31565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106134a3576134a3615f31565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006134df846002615ddc565b6134ea906001615bf4565b90505b6001811115613587577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061352b5761352b615f31565b1a60f81b82828151811061354157613541615f31565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361358081615e96565b90506134ed565b508315612b6d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610870565b600080858511156135ec575084905060006136ab565b60006135f88688615e53565b9050613605818686613b63565b5061360e612a70565b95508587111561363c5785925060006136278489615e53565b90506043548111613636578092505b50613640565b8692505b60475462010000900460ff16156136a95761365b8284615bf4565b87146136a95760405162461bcd60e51b815260206004820152600260248201527f35340000000000000000000000000000000000000000000000000000000000006044820152606401610870565b505b94509492505050565b6000613709826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166140759092919063ffffffff16565b805190915015610c51578080602001905181019061372791906155cd565b610c515760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610870565b6040517f091030c30000000000000000000000000000000000000000000000000000000081523060048201526000908190734da27a545c0c5b758a6ba100e3a049001de870f59063091030c39060240160206040518083038186803b15801561380157600080fd5b505afa158015613815573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613839919061562f565b905060006038548261384b9190615bf4565b90508161385b5760009250505090565b804211801561387657506039546138729082615bf4565b4211155b156138845760019250505090565b804210156138955760029250505090565b505090565b60006138a7600019611e19565b50919050565b6033546040517f39ebf8230000000000000000000000000000000000000000000000000000000081523060048201526000918291829182916001600160a01b03909116906339ebf8239060240160606040518083038186803b15801561391257600080fd5b505afa158015613926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061394a91906156f2565b602001519050600061395a612a70565b9050600080613967610d61565b90925090506000816139798486615bf4565b6139839190615e53565b90508085111561399e576139978186615e53565b96506139ab565b6139a88582615e53565b97505b60006139b7898b615bf4565b905084811115613a1e576139cd818686866135d6565b5094508085106139fd57899650886139e58883615e53565b10156139f8576139f58782615e53565b98505b613a3f565b89851015613a115760009850849650613a3f565b8996506139f58786615e53565b89965088613a2c8883615e53565b1015613a3f57613a3c8782615e53565b98505b5050505050509193909250565b600081613a5b57506000919050565b6034546040517fe8eda9df0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526024810183905230604482015260006064820152737d2768de32b0b80b7a3454c06bdac94a69ddc7a99063e8eda9df906084015b600060405180830381600087803b158015613ae257600080fd5b505af1158015613af6573d6000803e3d6000fd5b5093949350505050565b600080613b0f8686868661408c565b90506000613b26613b208389615bf4565b83613b48565b60415490915080821115613b38578091505b5060408190559695505050505050565b600082156113375782612b63670de0b6b3a764000084615ddc565b600083613b7257506000612b6d565b6000613b7e8385615e53565b90506000613ba1613b8f8784614498565b613b999084615e53565b604054613c72565b9050613bae818686613c90565b613bb6612a70565b9695505050505050565b600081613bd0613b998286615e53565b613bda9190615e53565b604754909150610100900460ff1615613c2157613bf88184846144a7565b613c029082615e53565b9050604354811115610c5157613c178161453f565b61171a9082615e53565b60005b60465460ff908116908216108015613c3d575060435482115b1561171a57613c4d8285856144a7565b613c579083615e53565b60009450849350915080613c6a81615ec8565b915050613c24565b6000613c8682670de0b6b3a7640000615e53565b612b638385615ddc565b82811115613d58576000613ca48483615e53565b604754909150610100900460ff1615613cce57613cc1818361463d565b613ccb9082615e53565b90505b60415460005b60465460ff908116908216108015613ced575060435483115b15613d4757613cfe82600080614721565b50826000613d0a612a70565b905080821115613d18578091505b6000613d238361202a565b9050613d2f8187615e53565b95505050508080613d3f90615ec8565b915050613cd4565b50613d50610d61565b909450925050505b6040546000613d68838386614781565b905083811115613da6576000613d7e8583615e53565b9050604354811115613da057613d9e612c4382613d99612a70565b614498565b505b50613390565b604354613db38286615e53565b111561339057610879828585614721565b610cf68282611ef2565b60008281526001602081905260409091200154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a4600091825260016020819052604090922090910155565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b158015613e8a57600080fd5b505afa158015613e9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ec2919061562f565b613ecc9190615bf4565b6040516001600160a01b03851660248201526044810182905290915061171a9085907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611e8e565b801580613fba57506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015613f8057600080fd5b505afa158015613f94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fb8919061562f565b155b61402c5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610870565b6040516001600160a01b038316602482015260448101829052610c519084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611e8e565b606061408484846000856147b4565b949350505050565b6000806035546b033b2e3c9fd0803ce80000006140a99190615c3a565b9050614116604051806101a00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6034546040517f35ea6a750000000000000000000000000000000000000000000000000000000081526001600160a01b03909116600482015260009081908190819073057835ad21a177dbdd3090bb1cae03eacf78fc6d906335ea6a75906024016101406040518083038186803b15801561419057600080fd5b505afa1580156141a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141c891906158f4565b5050509650505050935093509350604051806101a00160405280603a54815260200187856141f69190615ddc565b8152602001876142068c86615e53565b6142109190615ddc565b8152602001878c8e86614223898b615bf4565b61422d9190615bf4565b6142379190615bf4565b6142419190615e53565b61424b9190615ddc565b81526020018281526020016000815260200160008152602001878d6142709190615ddc565b815260200161427f888b615ddc565b8152602001603b548152602001603c548152602001603d548152602001603e5481525094505050505060006142bb670de0b6b3a7640000612aa1565b604854604051631e23703160e31b81526001600160a01b03909116600482015290915060009073d784927ff2f95ba542bfc824c8a8a98f3495f6b59063f11b81889060240160606040518083038186803b15801561431857600080fd5b505afa15801561432c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061435091906157ed565b5050604954604051631e23703160e31b81526001600160a01b03909116600482015290915060009073d784927ff2f95ba542bfc824c8a8a98f3495f6b59063f11b81889060240160606040518083038186803b1580156143af57600080fd5b505afa1580156143c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143e791906157ed565b5050603554909150836143fd8462015180615ddc565b6144099061016d615ddc565b6144139190615ddc565b61442190633b9aca00615ddc565b61442b9190615c3a565b60a0850152603554836144418362015180615ddc565b61444d9061016d615ddc565b6144579190615ddc565b61446590633b9aca00615ddc565b61446f9190615c3a565b60c0850152508391506144839050826148f1565b61448d9190615c3a565b979650505050505050565b60008183106120235781612b6d565b6000821580156144b5575081155b156144c8576144c2610d61565b90935091505b60006144d2612a70565b905060006144eb6144e38387615bf4565b603f546149fa565b90508381116144ff57600092505050612b6d565b6145098482615e53565b905085811015614517578095505b61452082613a4c565b5061452a86614a0f565b5061453486613a4c565b509495945050505050565b600080600061454c610d61565b91509150600061455f82603f5485614781565b9050600083821115614578576145758483615e53565b90505b6034546042546040517fbf5061df00000000000000000000000000000000000000000000000000000000815260006004820152602481018990526001600160a01b03909216604483015260648201526084810182905273__$769b0789f1f3504b29e5e16055ef62b17c$__9063bf5061df9060a40160206040518083038186803b15801561460557600080fd5b505af4158015614619573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bb6919061562f565b6000604354831161465057506000611337565b8183111561465c578192505b6034546042546040517fbf5061df00000000000000000000000000000000000000000000000000000000815260016004820152602481018690526001600160a01b03909216604483015260648201526000608482015273__$769b0789f1f3504b29e5e16055ef62b17c$__9063bf5061df9060a40160206040518083038186803b1580156146e957600080fd5b505af41580156146fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b6d919061562f565b60008215801561472f575081155b156147425761473c610d61565b90935091505b600061474f838686614781565b9050808411156147795760006147658286615e53565b905061477081611f5d565b92505050612b6d565b509392505050565b600082156147ad578261479c670de0b6b3a764000086615ddc565b6147a69190615c3a565b9050612b6d565b5080612b6d565b60608247101561482c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610870565b6001600160a01b0385163b6148835760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610870565b600080866001600160a01b0316858760405161489f9190615a3e565b60006040518083038185875af1925050503d80600081146148dc576040519150601f19603f3d011682016040523d82523d6000602084013e6148e1565b606091505b509150915061448d828286614a8a565b6000806149016000846001614ac3565b50509050600061491f6b033b2e3c9fd0803ce8000000856001614ac3565b50509050818113614934575060009392505050565b60008060008087610100015196505b600a8410801561497657508315806149765750826149696149648983615dfb565b615095565b614974906014615d3c565b135b156149d05761498787896000614ac3565b89955090935091508190506149a86b033b2e3c9fd0803ce800000084615d3c565b6149b29190615c0c565b6149bc9084615dfb565b96506149c9600185615bf4565b9350614943565b60006149de888a6001614ac3565b505090508681136149ee57600097505b50505050505050919050565b6000670de0b6b3a7640000612b638385615ddc565b6034546040517fa415bcad0000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152602481018290526002604482015260006064820181905230608483015290737d2768de32b0b80b7a3454c06bdac94a69ddc7a99063a415bcad9060a401613ac8565b60608315614a99575081612b6d565b825115614aa95782518084602001fd5b8160405162461bcd60e51b81526004016108709190615b38565b600080600080600080614ad689896150ad565b925092509250600088606001518a614aee9190615b9c565b8951614b06906b033b2e3c9fd0803ce8000000615dfb565b60e08b0151614b15908d615b9c565b614b1f9190615d3c565b614b299190615c0c565b905060006b033b2e3c9fd0803ce8000000858b604001518d614b4b9190615b9c565b614b559190615d3c565b8b608001518c60200151614b699190615d3c565b614b739190615b9c565b614b7d9190615c0c565b90506b033b2e3c9fd0803ce8000000614b96868d615d3c565b614ba09190615c0c565b60608b0151614baf908d615b9c565b60a08c015160e08d0151614bc3908f615b9c565b614bcd9190615d3c565b614bd79190615c0c565b60408c0151614be6908e615b9c565b60c08d0151614bf5908f615d3c565b614bff9190615c0c565b6b033b2e3c9fd0803ce8000000614c168587615d3c565b614c209190615c0c565b614c2a9190615b9c565b614c349190615b9c565b614c3e9190615dfb565b9750886150875760008a606001518c614c579190615b9c565b8b51614c6f906b033b2e3c9fd0803ce8000000615dfb565b8c60e001518d60600151614c839190615dfb565b614c8d9190615d3c565b614c979190615c0c565b90508a606001518c614ca99190615b9c565b614cbf6b033b2e3c9fd0803ce800000083615d3c565b614cc99190615c0c565b905060006b033b2e3c9fd0803ce8000000868d604001518f614ceb9190615b9c565b614cf59190615d3c565b614d0b6b033b2e3c9fd0803ce80000008a615d3c565b614d159190615b9c565b614d1f9190615c0c565b90506b033b2e3c9fd0803ce8000000614d388583615d3c565b614d428585615d3c565b614d4c9190615b9c565b614d569190615c0c565b985060008c606001518e614d6a9190615b9c565b614d806b033b2e3c9fd0803ce800000085615d3c565b614d8c90600119615d3c565b614d969190615c0c565b9050614da28482615d3c565b82614dae856002615d3c565b614db89190615d3c565b614dc29190615b9c565b9850506b033b2e3c9fd0803ce8000000858d604001518f614de39190615b9c565b614ded9190615d3c565b6b033b2e3c9fd0803ce8000000614e05896002615d3c565b614e0f9190615d3c565b614e199190615b9c565b614e239190615c0c565b90506b033b2e3c9fd0803ce8000000614e3c8583615d3c565b614e46908a615b9c565b614e509190615c0c565b9750505060006b033b2e3c9fd0803ce8000000858d614e6f9190615d3c565b614e856b033b2e3c9fd0803ce800000089615d3c565b614e8f9190615b9c565b614e999190615c0c565b905060008b604001518d614ead9190615b9c565b8c604001518d60c00151614ec19190615d3c565b614ecb9190615c0c565b90508b604001518d614edd9190615b9c565b614ef36b033b2e3c9fd0803ce800000083615d3c565b614efd9190615c0c565b905060008c606001518e614f119190615b9c565b8d60e001518e60600151614f259190615dfb565b8e60a00151614f349190615d3c565b614f3e9190615c0c565b90508c606001518e614f509190615b9c565b614f666b033b2e3c9fd0803ce800000083615d3c565b614f709190615c0c565b905082614f7d8284615b9c565b614f879190615dfb565b614f91908b615b9c565b99506b033b2e3c9fd0803ce8000000868f614fac9190615d3c565b6b033b2e3c9fd0803ce8000000614fc48a6002615d3c565b614fce9190615d3c565b614fd89190615b9c565b614fe29190615c0c565b92508c604001518e614ff49190615b9c565b6b033b2e3c9fd0803ce800000061500d84600119615d3c565b6150179190615d3c565b6150219190615c0c565b91508c606001518e6150339190615b9c565b6b033b2e3c9fd0803ce800000061504c83600119615d3c565b6150569190615d3c565b6150609190615c0c565b90508261506d8284615b9c565b6150779190615dfb565b615081908a615b9c565b98505050505b505050505093509350939050565b6000808212156123ce576150a882615ee8565b611337565b6000806000806150bd86866152aa565b905060008686606001516150d19190615b9c565b905060006150df88886152fc565b9050816150f86b033b2e3c9fd0803ce800000083615d3c565b6151029190615c0c565b9050600061511282600119615d3c565b90508261512b6b033b2e3c9fd0803ce800000083615d3c565b6151359190615c0c565b90508761018001518412156151c2578761018001518489610120015161515b9190615d3c565b6151659190615c0c565b8861016001516151759190615b9c565b96508761018001518289610120015161518e9190615d3c565b6151989190615c0c565b9550876101800151818961012001516151b19190615d3c565b6151bb9190615c0c565b945061529f565b6101808801516151de906b033b2e3c9fd0803ce8000000615dfb565b6101808901516151ee9086615dfb565b8961014001516151fe9190615d3c565b6152089190615c0c565b88610120015189610160015161521e9190615b9c565b6152289190615b9c565b96508761018001516b033b2e3c9fd0803ce80000006152479190615dfb565b828961014001516152589190615d3c565b6152629190615c0c565b95508761018001516b033b2e3c9fd0803ce80000006152819190615dfb565b818961014001516152929190615d3c565b61529c9190615c0c565b94505b505050509250925092565b60008282606001516152bc9190615b9c565b6b033b2e3c9fd0803ce800000084846040015185602001516152de9190615b9c565b6152e89190615b9c565b6152f29190615d3c565b612b6d9190615c0c565b600082826060015161530e9190615b9c565b6b033b2e3c9fd0803ce80000008360400151846020015185606001516153349190615dfb565b6152e89190615dfb565b805169ffffffffffffffffffff8116811461535857600080fd5b919050565b60006020828403121561536f57600080fd5b8135612b6d81615f5d565b60006020828403121561538c57600080fd5b8151612b6d81615f5d565b600080604083850312156153aa57600080fd5b82356153b581615f5d565b915060208301356153c581615f5d565b809150509250929050565b6000806000606084860312156153e557600080fd5b83516153f081615f5d565b602085015190935061540181615f5d565b604085015190925061541281615f5d565b809150509250925092565b60008060008060008060a0878903121561543657600080fd5b863561544181615f5d565b9550602087013561545181615f5d565b94506040870135935060608701359250608087013567ffffffffffffffff8082111561547c57600080fd5b818901915089601f83011261549057600080fd5b81358181111561549f57600080fd5b8a60208285010111156154b157600080fd5b6020830194508093505050509295509295509295565b600080600080600060a086880312156154df57600080fd5b85356154ea81615f5d565b94506020868101356154fb81615f5d565b9450604087013561550b81615f5d565b9350606087013561551b81615f5d565b9250608087013567ffffffffffffffff8082111561553857600080fd5b818901915089601f83011261554c57600080fd5b81358181111561555e5761555e615f47565b8060051b915061556f848301615b6b565b8181528481019084860184860187018e101561558a57600080fd5b600095505b838610156155b957803594506155a485615f5d565b8483526001959095019491860191860161558f565b508096505050505050509295509295909350565b6000602082840312156155df57600080fd5b8151612b6d81615f75565b600080604083850312156155fd57600080fd5b823561560881615f75565b946020939093013593505050565b60006020828403121561562857600080fd5b5035919050565b60006020828403121561564157600080fd5b5051919050565b6000806040838503121561565b57600080fd5b8235915060208301356153c581615f5d565b60006080828403121561567f57600080fd5b6040516080810181811067ffffffffffffffff821117156156a2576156a2615f47565b60405282356156b081615f75565b815260208301356156c081615f75565b602082015260408301356156d381615f75565b604082015260608301356156e681615f75565b60608201529392505050565b60006060828403121561570457600080fd5b6040516060810181811067ffffffffffffffff8211171561572757615727615f47565b80604052508251815260208301516020820152604083015160408201528091505092915050565b6000806040838503121561576157600080fd5b8235915060208084013567ffffffffffffffff8082111561578157600080fd5b818601915086601f83011261579557600080fd5b8135818111156157a7576157a7615f47565b6157b984601f19601f84011601615b6b565b915080825287848285010111156157cf57600080fd5b80848401858401376000848284010152508093505050509250929050565b60008060006060848603121561580257600080fd5b8351925060208401519150604084015190509250925092565b6000806000806080858703121561583157600080fd5b5050823594602084013594506040840135936060013592509050565b6000806000806000806000806000806101408b8d03121561586d57600080fd5b8a51995060208b0151985060408b0151975060608b0151965060808b0151955060a08b015161589b81615f75565b60c08c01519095506158ac81615f75565b60e08c01519094506158bd81615f75565b6101008c01519093506158cf81615f75565b6101208c01519092506158e181615f75565b809150509295989b9194979a5092959850565b6000806000806000806000806000806101408b8d03121561591457600080fd5b8a51995060208b0151985060408b0151975060608b0151965060808b0151955060a08b0151945060c08b0151935060e08b015192506101008b015191506101208b015164ffffffffff811681146158e157600080fd5b60008060006060848603121561597f57600080fd5b8335925060208401359150604084013561541281615f83565b600080600080600060a086880312156159b057600080fd5b6159b98661533e565b94506020860151935060408601519250606086015191506159dc6080870161533e565b90509295509295909350565b6000602082840312156159fa57600080fd5b8151612b6d81615f83565b600081518084526020808501945080840160005b838110156145345781516001600160a01b031687529582019590820190600101615a19565b60008251615a50818460208701615e6a565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351615a92816017850160208801615e6a565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351615acf816028840160208801615e6a565b01602801949350505050565b604081526000615aee6040830185615a05565b90506001600160a01b03831660208301529392505050565b606081526000615b196060830186615a05565b90508360208301526001600160a01b0383166040830152949350505050565b6020815260008251806020840152615b57816040850160208701615e6a565b601f01601f19169190910160400192915050565b604051601f8201601f1916810167ffffffffffffffff81118282101715615b9457615b94615f47565b604052919050565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03841381151615615bd657615bd6615f05565b82600160ff1b038412811615615bee57615bee615f05565b50500190565b60008219821115615c0757615c07615f05565b500190565b600082615c1b57615c1b615f1b565b6000198314600160ff1b83141615615c3557615c35615f05565b500590565b600082615c4957615c49615f1b565b500490565b600181815b80851115615c89578160001904821115615c6f57615c6f615f05565b80851615615c7c57918102915b93841c9390800290615c53565b509250929050565b6000612b6d60ff841683600082615caa57506001611337565b81615cb757506000611337565b8160018114615ccd5760028114615cd757615cf3565b6001915050611337565b60ff841115615ce857615ce8615f05565b50506001821b611337565b5060208310610133831016604e8410600b8410161715615d16575081810a611337565b615d208383615c4e565b8060001904821115615d3457615d34615f05565b029392505050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600084136000841385830485118282161615615d7d57615d7d615f05565b600160ff1b6000871286820588128184161615615d9c57615d9c615f05565b60008712925087820587128484161615615db857615db8615f05565b87850587128184161615615dce57615dce615f05565b505050929093029392505050565b6000816000190483118215151615615df657615df6615f05565b500290565b600080831283600160ff1b01831281151615615e1957615e19615f05565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615615e4d57615e4d615f05565b50500390565b600082821015615e6557615e65615f05565b500390565b60005b83811015615e85578181015183820152602001615e6d565b8381111561171a5750506000910152565b600081615ea557615ea5615f05565b506000190190565b6000600019821415615ec157615ec1615f05565b5060010190565b600060ff821660ff811415615edf57615edf615f05565b60010192915050565b6000600160ff1b821415615efe57615efe615f05565b5060000390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114615f7257600080fd5b50565b8015158114615f7257600080fd5b60ff81168114615f7257600080fdfea264697066735822122077ff7ffe4f2d059fa4fd7bb9459cfa0e12fafa86d59ebcb79bfa6ff774a9449564736f6c63430008070033",
  "libraries": {
    "FlashMintLib": "0x169487a55dE79476125A56B07C36cA8dbF37a373"
  },
  "devdoc": {
    "author": "Yearn Finance (https://etherscan.io/address/0xd4E94061183b2DBF24473F28A3559cf4dE4459Db#code) but heavily reviewed and modified by Angle Core Team",
    "details": "Angle strategies computes the optimal collateral ratio based on AAVE rewards for deposits and borrows",
    "kind": "dev",
    "methods": {
      "addGuardian(address)": {
        "params": {
          "_guardian": "New guardian address"
        }
      },
      "estimatedTotalAssets()": {
        "details": "It sums the effective deposit amount to the rewards accumulated"
      },
      "getCurrentPosition()": {
        "details": "The actual amount brought is `deposits - borrows`"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "harvest(uint256)": {
        "params": {
          "borrowInit": "Approximate optimal borrows to have faster convergence on the NR method"
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,address,address,address[])": {
        "params": {
          "_poolManager": "Address of the `PoolManager` lending to this strategy",
          "governor": "Governor address of the protocol",
          "guardian": "Address of the guardian",
          "interestRateStrategyAddress_": "Address of the `InterestRateStrategy` defining borrow rates for the collateral",
          "keepers": "List of the addresses with keeper privilege"
        }
      },
      "isActive()": {
        "returns": {
          "_0": "True if the strategy is actively managing a position."
        }
      },
      "manualDeleverage(uint256)": {
        "params": {
          "amount": "Amount of `want` to withdraw/repay"
        }
      },
      "manualReleaseWant(uint256)": {
        "params": {
          "amount": "Amount of `want` to withdraw"
        }
      },
      "onFlashLoan(address,address,uint256,uint256,bytes)": {
        "details": "If everything went smoothly, will return `keccak256(\"ERC3156FlashBorrower.onFlashLoan\")`"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeGuardian(address)": {
        "params": {
          "guardian": "Old guardian address to revoke"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "sellRewards(uint256,bytes)": {
        "params": {
          "minAmountOut": "Minimum amount of `want` to receive for the swap to happen",
          "payload": "Bytes needed for 1Inch API. Tokens swapped should be: stkAave -> `want` or Aave -> `want`"
        }
      },
      "setAavePoolVariables()": {
        "details": "No access control needed because they fetch the values from Aave directly. If it changes there, it will need to be updated here tooWe expect the values concerned not to be often modified"
      },
      "setDebtThreshold(uint256)": {
        "details": "By default this is 0, meaning any losses would cause a harvest which will subsequently report the loss to the Manager for tracking.",
        "params": {
          "_debtThreshold": "How big of a loss this Strategy may carry without"
        }
      },
      "setEmergencyExit()": {
        "details": "This may only be called by the `PoolManager`, because when calling this the `PoolManager` should at the same time update the debt ratioThis function can only be called once by the `PoolManager` contractSee `poolManager.setEmergencyExit()` and `harvest()` for further details."
      },
      "sweep(address,address)": {
        "details": "Implement `_protectedTokens()` to specify any additional tokens that should be protected from sweeping in addition to `want`.",
        "params": {
          "_token": "The token to transfer out of this `PoolManager`.",
          "to": "Address to send the tokens to."
        }
      },
      "withdraw(uint256)": {
        "details": "This may only be called by the `PoolManager`",
        "params": {
          "_amountNeeded": "How much `want` to withdraw."
        },
        "returns": {
          "_loss": "Any realized losses",
          "amountFreed": "How much `want` withdrawn."
        }
      }
    },
    "title": "AaveFlashloanStrategy",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "GUARDIAN_ROLE()": {
        "notice": "Role for guardians and governors"
      },
      "KEEPER_ROLE()": {
        "notice": "Role for keepers"
      },
      "POOLMANAGER_ROLE()": {
        "notice": "Role for `PoolManager` only"
      },
      "addGuardian(address)": {
        "notice": "Adds a new guardian address"
      },
      "boolParams()": {
        "notice": "Struct with some boolean parameters of the contract These parameters are packed in a struct for efficiency of SLOAD operations"
      },
      "daiBorrowCollatRatio()": {
        "notice": "Parameter used for flash mints"
      },
      "debtThreshold()": {
        "notice": "Use this to adjust the threshold at which running a debt causes a harvest trigger. See `setDebtThreshold()` for more details"
      },
      "discountFactor()": {
        "notice": "Discount factor applied to the StkAAVE price"
      },
      "emergencyExit()": {
        "notice": "See note on `setEmergencyExit()`"
      },
      "estimatedTotalAssets()": {
        "notice": "Estimates the total assets controlled by the strategy"
      },
      "getCurrentPosition()": {
        "notice": "Get the current position of the strategy: that is to say the amount deposited and the amount borrowed on Aave"
      },
      "harvest()": {
        "notice": "Harvests the Strategy, recognizing any profits or losses and adjusting the Strategy's position."
      },
      "harvest(uint256)": {
        "notice": "Harvests the Strategy, recognizing any profits or losses and adjusting the Strategy's position."
      },
      "initialize(address,address,address,address,address[])": {
        "notice": "Constructor of the `Strategy`"
      },
      "isActive()": {
        "notice": "Provides an indication of whether this strategy is currently \"active\" in that it is managing an active position, or will manage a position in the future. This should correlate to `harvest()` activity, so that Harvest events can be tracked externally by indexing agents."
      },
      "manualDeleverage(uint256)": {
        "notice": "Emergency function that we can use to deleverage manually if something is broken"
      },
      "manualReleaseWant(uint256)": {
        "notice": "Emergency function that we can use to deleverage manually if something is broken"
      },
      "maxBorrowCollatRatio()": {
        "notice": "Maximum the Aave protocol will let us borrow"
      },
      "maxCollatRatio()": {
        "notice": "Closest to liquidation we'll risk"
      },
      "maxIterations()": {
        "notice": "Max number of iterations possible for the computation of the optimal lever"
      },
      "minRatio()": {
        "notice": "Minimum gap between the collat ratio and the target collat ratio before rectifying it"
      },
      "minWant()": {
        "notice": "Minimum amount to be moved before a deposit or a borrow"
      },
      "onFlashLoan(address,address,uint256,uint256,bytes)": {
        "notice": "Flashload callback, as defined by EIP-3156We check that the call is coming from the DAI lender and then execute the load logic"
      },
      "poolManager()": {
        "notice": "Reference to the protocol's collateral `PoolManager`"
      },
      "revokeGuardian(address)": {
        "notice": "Revokes the guardian role"
      },
      "sellRewards(uint256,bytes)": {
        "notice": "Swap earned stkAave or Aave for `want` through 1Inch"
      },
      "setAavePoolVariables()": {
        "notice": "Retrieves lending pool variables for `want`. Those variables are mostly used in the function to compute the optimal borrow amount"
      },
      "setBoolParams((bool,bool,bool,bool))": {
        "notice": "Sets all boolean parameters related to cooldown, withdraw check, flash loan and so on"
      },
      "setCollateralTargets(uint256,uint256,uint256,uint256)": {
        "notice": "Sets collateral targets and value for collateral ratio"
      },
      "setDebtThreshold(uint256)": {
        "notice": "Sets how far the Strategy can go into loss without a harvest and report being required."
      },
      "setDiscountFactor(uint256)": {
        "notice": "Sets the discount factor for the StkAAVE price"
      },
      "setEmergencyExit()": {
        "notice": "Activates emergency exit. Once activated, the Strategy will exit its position upon the next harvest, depositing all funds into the Manager as quickly as is reasonable given on-chain conditions."
      },
      "setMinsAndMaxs(uint256,uint256,uint8)": {
        "notice": "Sets `minWant`, `minRatio` and `maxItrations` values"
      },
      "sweep(address,address)": {
        "notice": "Removes tokens from this Strategy that are not the type of tokens managed by this Strategy. This may be used in case of accidentally sending the wrong kind of token to this Strategy. Tokens will be sent to `governance()`. This will fail if an attempt is made to sweep `want`, or any tokens that are protected by this Strategy. This may only be called by governance."
      },
      "targetCollatRatio()": {
        "notice": "LTV the strategy is going to lever up to"
      },
      "want()": {
        "notice": "Reference to the ERC20 farmed by this strategy"
      },
      "wantBase()": {
        "notice": "Base of the ERC20 token farmed by this strategy"
      },
      "withdraw(uint256)": {
        "notice": "Withdraws `_amountNeeded` to `poolManager`."
      }
    },
    "notice": "This strategy is used to optimize lending yield on Aave by taking some form or recursivity that is to say by borrowing to maximize Aave rewards",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 52,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 55,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3409,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)3404_storage)"
      },
      {
        "astId": 3695,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12966,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "poolManager",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(IPoolManager)3973"
      },
      {
        "astId": 12970,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "want",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(IERC20)2114"
      },
      {
        "astId": 12973,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "wantBase",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 12976,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "debtThreshold",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 12979,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "emergencyExit",
        "offset": 0,
        "slot": "55",
        "type": "t_bool"
      },
      {
        "astId": 7375,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "_interestRateStrategyAddress",
        "offset": 1,
        "slot": "55",
        "type": "t_contract(IReserveInterestRateStrategy)11153"
      },
      {
        "astId": 7377,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "cooldownSeconds",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 7379,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "unstakeWindow",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 7381,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "reserveFactor",
        "offset": 0,
        "slot": "58",
        "type": "t_int256"
      },
      {
        "astId": 7383,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "slope1",
        "offset": 0,
        "slot": "59",
        "type": "t_int256"
      },
      {
        "astId": 7385,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "slope2",
        "offset": 0,
        "slot": "60",
        "type": "t_int256"
      },
      {
        "astId": 7387,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "r0",
        "offset": 0,
        "slot": "61",
        "type": "t_int256"
      },
      {
        "astId": 7389,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "uOptimal",
        "offset": 0,
        "slot": "62",
        "type": "t_int256"
      },
      {
        "astId": 7392,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "maxBorrowCollatRatio",
        "offset": 0,
        "slot": "63",
        "type": "t_uint256"
      },
      {
        "astId": 7395,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "targetCollatRatio",
        "offset": 0,
        "slot": "64",
        "type": "t_uint256"
      },
      {
        "astId": 7398,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "maxCollatRatio",
        "offset": 0,
        "slot": "65",
        "type": "t_uint256"
      },
      {
        "astId": 7401,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "daiBorrowCollatRatio",
        "offset": 0,
        "slot": "66",
        "type": "t_uint256"
      },
      {
        "astId": 7404,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "minWant",
        "offset": 0,
        "slot": "67",
        "type": "t_uint256"
      },
      {
        "astId": 7407,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "minRatio",
        "offset": 0,
        "slot": "68",
        "type": "t_uint256"
      },
      {
        "astId": 7410,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "discountFactor",
        "offset": 0,
        "slot": "69",
        "type": "t_uint256"
      },
      {
        "astId": 7413,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "maxIterations",
        "offset": 0,
        "slot": "70",
        "type": "t_uint8"
      },
      {
        "astId": 7426,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "boolParams",
        "offset": 0,
        "slot": "71",
        "type": "t_struct(BoolParams)7422_storage"
      },
      {
        "astId": 7429,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "_aToken",
        "offset": 0,
        "slot": "72",
        "type": "t_contract(IAToken)11070"
      },
      {
        "astId": 7432,
        "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
        "label": "_debtToken",
        "offset": 0,
        "slot": "73",
        "type": "t_contract(IVariableDebtToken)10681"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAToken)11070": {
        "encoding": "inplace",
        "label": "contract IAToken",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2114": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolManager)3973": {
        "encoding": "inplace",
        "label": "contract IPoolManager",
        "numberOfBytes": "20"
      },
      "t_contract(IReserveInterestRateStrategy)11153": {
        "encoding": "inplace",
        "label": "contract IReserveInterestRateStrategy",
        "numberOfBytes": "20"
      },
      "t_contract(IVariableDebtToken)10681": {
        "encoding": "inplace",
        "label": "contract IVariableDebtToken",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)3404_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)3404_storage"
      },
      "t_struct(BoolParams)7422_storage": {
        "encoding": "inplace",
        "label": "struct AaveFlashloanStrategy.BoolParams",
        "members": [
          {
            "astId": 7415,
            "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
            "label": "automaticallyComputeCollatRatio",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 7417,
            "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
            "label": "isFlashMintActive",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 7419,
            "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
            "label": "withdrawCheck",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 7421,
            "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
            "label": "cooldownStkAave",
            "offset": 3,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)3404_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 3401,
            "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 3403,
            "contract": "contracts/strategies/AaveFlashloanStrategy/AaveFlashloanStrategy.sol:AaveFlashloanStrategy",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}