{
  "address": "0x0b997ae973cC65fE5A66653dca7a518929d0245b",
  "abi": [
    {
      "inputs": [],
      "name": "ErrorSwap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedToMint",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedToRecoverETH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedToRedeem",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncompatibleLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidOracleValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProtectedToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooSmallAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongCToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BLOCKS_PER_YEAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GUARDIAN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "KEEPER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STRATEGY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "apr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "aprAfterDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cToken",
      "outputs": [
        {
          "internalType": "contract CErc20I",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "spenders",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "changeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract IComptroller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasAssets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_cToken",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "governorList",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "keeperList",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lenderName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nav",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolManager",
      "outputs": [
        {
          "internalType": "contract IPoolManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "sellRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dust_",
          "type": "uint256"
        }
      ],
      "name": "setDust",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingBalanceStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wantBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weightedApr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0f5db1d5a59f8fa28f691af9572a55e93c7f814fda150b1fb3f81787e44dea93",
  "receipt": {
    "to": null,
    "from": "0xfdA462548Ce04282f4B6D6619823a7C64Fdc0185",
    "contractAddress": "0x0b997ae973cC65fE5A66653dca7a518929d0245b",
    "transactionIndex": 256,
    "gasUsed": "3269561",
    "logsBloom": "0x
    "blockHash": "0x5a4174bfcd10deba49afebcac2ec5bda1130f9adf1705b81a6ce10b5929bb43e",
    "transactionHash": "0x0f5db1d5a59f8fa28f691af9572a55e93c7f814fda150b1fb3f81787e44dea93",
    "logs": [],
    "blockNumber": 14852880,
    "cumulativeGasUsed": "18687251",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ca650e45c91489812b6b51e1d5513906",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ErrorSwap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedToMint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedToRecoverETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedToRedeem\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncompatibleLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOracleValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtectedToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooSmallAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongCToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLOCKS_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KEEPER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"aprAfterDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cToken\",\"outputs\":[{\"internalType\":\"contract CErc20I\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"spenders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"changeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_cToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"governorList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"keeperList\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lenderName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nav\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"sellRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dust_\",\"type\":\"uint256\"}],\"name\":\"setDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingBalanceStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weightedApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Forked from here: https://github.com/Grandthrax/yearnV2-generic-lender-strat/blob/master/contracts/GenericLender/GenericCompound.sol\",\"kind\":\"dev\",\"methods\":{\"aprAfterDeposit(uint256)\":{\"params\":{\"amount\":\"Amount to add to the lending platform, and that we want to take into account in the apr computation\"}},\"changeAllowance(address[],address[],uint256[])\":{\"params\":{\"amounts\":\"Approval amounts for each address\",\"spenders\":\"Addresses to approve\",\"tokens\":\"Addresses of the tokens for which approvals should be made\"}},\"emergencyWithdraw(uint256)\":{\"details\":\"Does not check if any error occurs or if the amount withdrawn is correct\",\"params\":{\"amount\":\"Amount to withdraw\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasAssets()\":{\"details\":\"We're considering that the strategy has no assets if it has less than 10 of the underlying asset in total to avoid the case where there is dust remaining on the lending market we cannot withdraw everything\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,string,address,address[],address,address[])\":{\"params\":{\"_cToken\":\"Address of the cToken\",\"_strategy\":\"Reference to the strategy using this lender\",\"governorList\":\"List of addresses with governor privilege\",\"guardian\":\"Address of the guardian\",\"keeperList\":\"List of addresses with keeper privilege\"}},\"recoverETH(address,uint256)\":{\"params\":{\"amount\":\"Amount to be recovered\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"sellRewards(uint256,bytes)\":{\"details\":\"In the case of a contract lending to Aave, tokens swapped should typically be: _stkAave -> `want` or Aave -> `want`\",\"params\":{\"minAmountOut\":\"Minimum amount of `want` to receive for the swap to happen\",\"payload\":\"Bytes needed for 1Inch API\"}},\"setDust(uint256)\":{\"details\":\"Set in a function because contract was already initalized\",\"params\":{\"dust_\":\"Amount under which the contract do not try to redeem from Compouns\"}},\"sweep(address,address)\":{\"details\":\"Implement `_protectedTokens()` to specify any additional tokens that should be protected from sweeping in addition to `want`.\",\"params\":{\"_token\":\"The token to transfer out of this poolManager.\",\"to\":\"Address to send the tokens to.\"}},\"withdraw(uint256)\":{\"params\":{\"amount\":\"The amount the caller wants to withdraw\"},\"returns\":{\"_0\":\"Amount actually withdrawn\"}},\"withdrawAll()\":{\"returns\":{\"_0\":\"Whether everything was withdrawn or not\"}}},\"title\":\"GenericCompoundV3\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"apr()\":{\"notice\":\"Returns an estimation of the current Annual Percentage Rate\"},\"aprAfterDeposit(uint256)\":{\"notice\":\"Returns an estimation of the current Annual Percentage Rate after a new deposit of `amount`\"},\"changeAllowance(address[],address[],uint256[])\":{\"notice\":\"Changes allowance of a set of tokens to addresses\"},\"deposit()\":{\"notice\":\"Deposits the current balance of the contract to the lending platform\"},\"emergencyWithdraw(uint256)\":{\"notice\":\"Withdraws as much as possible in case of emergency and sends it to the `PoolManager`\"},\"hasAssets()\":{\"notice\":\"Check if assets are currently managed by the lender\"},\"initialize(address,string,address,address[],address,address[])\":{\"notice\":\"Initializer of the `GenericCompound`\"},\"nav()\":{\"notice\":\"Helper function to get the current total of assets managed by the lender.\"},\"poolManager()\":{\"notice\":\"Reference to the protocol's collateral poolManager\"},\"recoverETH(address,uint256)\":{\"notice\":\"Recovers ETH from the contract\"},\"sellRewards(uint256,bytes)\":{\"notice\":\"Swap earned _stkAave or Aave for `want` through 1Inch\"},\"setDust(uint256)\":{\"notice\":\"Allow to modify the dust amount\"},\"strategy()\":{\"notice\":\"Reference to the `Strategy`\"},\"sweep(address,address)\":{\"notice\":\"Removes tokens from this Strategy that are not the type of tokens managed by this Strategy. This may be used in case of accidentally sending the wrong kind of token to this Strategy. Tokens will be sent to `governance()`. This will fail if an attempt is made to sweep `want`, or any tokens that are protected by this Strategy. This may only be called by governance.\"},\"underlyingBalanceStored()\":{\"notice\":\"Helper function the current balance of cTokens\"},\"want()\":{\"notice\":\"Reference to the token lent\"},\"wantBase()\":{\"notice\":\"Base of the asset handled by the lender\"},\"weightedApr()\":{\"notice\":\"Returns an estimation of the current Annual Percentage Rate weighted by a factor\"},\"withdraw(uint256)\":{\"notice\":\"Withdraws a given amount from lender\"},\"withdrawAll()\":{\"notice\":\"Withdraws as much as possible from the lending platform\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/OptimizerAPR/genericLender/GenericCompoundUpgradeable.sol\":\"GenericCompoundUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":3000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/external/AccessControlAngleUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IAccessControlAngle.sol\\\";\\n\\n/**\\n * @dev This contract is fully forked from OpenZeppelin `AccessControlUpgradeable`.\\n * The only difference is the removal of the ERC165 implementation as it's not\\n * needed in Angle.\\n *\\n * Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlAngleUpgradeable is Initializable, IAccessControlAngle {\\n    function __AccessControl_init() internal initializer {\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {}\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external override {\\n        require(account == msg.sender, \\\"71\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x19de1e61951f4337ce937af06297ce54f082244e33d4696fe8f54b5bd13b0877\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAccessControlAngle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n/// @title IAccessControl\\n/// @author Forked from OpenZeppelin\\n/// @notice Interface for `AccessControl` contracts\\ninterface IAccessControlAngle {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x8d34c4bcd7eb669fe972901727c5467541591a67a4d05e5b609c0b1642478a3a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGenericLender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IAccessControlAngle.sol\\\";\\n\\n/// @title IGenericLender\\n/// @author Yearn with slight modifications from Angle Core Team\\n/// @dev Interface for the `GenericLender` contract, the base interface for contracts interacting\\n/// with lending and yield farming platforms\\ninterface IGenericLender is IAccessControlAngle {\\n    function lenderName() external view returns (string memory);\\n\\n    function nav() external view returns (uint256);\\n\\n    function strategy() external view returns (address);\\n\\n    function apr() external view returns (uint256);\\n\\n    function weightedApr() external view returns (uint256);\\n\\n    function withdraw(uint256 amount) external returns (uint256);\\n\\n    function emergencyWithdraw(uint256 amount) external;\\n\\n    function deposit() external;\\n\\n    function withdrawAll() external returns (bool);\\n\\n    function hasAssets() external view returns (bool);\\n\\n    function aprAfterDeposit(uint256 amount) external view returns (uint256);\\n\\n    function sweep(address _token, address to) external;\\n}\\n\",\"keccak256\":\"0x716b6e4d7368a636dd2de872bf314819c8961cdcbfdd94d4dcf52302599fdae7\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n// Struct for the parameters associated to a strategy interacting with a collateral `PoolManager`\\n// contract\\nstruct StrategyParams {\\n    // Timestamp of last report made by this strategy\\n    // It is also used to check if a strategy has been initialized\\n    uint256 lastReport;\\n    // Total amount the strategy is expected to have\\n    uint256 totalStrategyDebt;\\n    // The share of the total assets in the `PoolManager` contract that the `strategy` can access to.\\n    uint256 debtRatio;\\n}\\n\\n/// @title IPoolManagerFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the collateral poolManager contracts handling each one type of collateral for\\n/// a given stablecoin\\n/// @dev Only the functions used in other contracts of the protocol are left here\\ninterface IPoolManagerFunctions {\\n    // ============================ Yield Farming ==================================\\n\\n    function creditAvailable() external view returns (uint256);\\n\\n    function debtOutstanding() external view returns (uint256);\\n\\n    function report(\\n        uint256 _gain,\\n        uint256 _loss,\\n        uint256 _debtPayment\\n    ) external;\\n\\n    // ============================= Getters =======================================\\n\\n    function getBalance() external view returns (uint256);\\n\\n    function getTotalAsset() external view returns (uint256);\\n}\\n\\n/// @title IPoolManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\n/// @dev Used in other contracts of the protocol\\ninterface IPoolManager is IPoolManagerFunctions {\\n    function stableMaster() external view returns (address);\\n\\n    function perpetualManager() external view returns (address);\\n\\n    function token() external view returns (address);\\n\\n    function totalDebt() external view returns (uint256);\\n\\n    function strategies(address _strategy) external view returns (StrategyParams memory);\\n}\\n\",\"keccak256\":\"0xc51d60159971c6a15c6cc1511eceb416927f702c2c39ab20cfcab27b152e07b3\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"./IAccessControlAngle.sol\\\";\\n\\n/// @title IStrategy\\n/// @author Inspired by Yearn with slight changes from Angle Core Team\\n/// @notice Interface for yield farming strategies\\ninterface IStrategy is IAccessControlAngle {\\n    function estimatedAPR() external view returns (uint256);\\n\\n    function poolManager() external view returns (address);\\n\\n    function want() external view returns (address);\\n\\n    function isActive() external view returns (bool);\\n\\n    function estimatedTotalAssets() external view returns (uint256);\\n\\n    function harvestTrigger(uint256 callCost) external view returns (bool);\\n\\n    function harvest() external;\\n\\n    function withdraw(uint256 _amountNeeded) external returns (uint256 amountFreed, uint256 _loss);\\n\\n    function setEmergencyExit() external;\\n\\n    function addGuardian(address _guardian) external;\\n\\n    function revokeGuardian(address _guardian) external;\\n}\\n\",\"keccak256\":\"0x4fd8ce17ef1b2e3a2f4d7c2106b946f8742fb86416045c41f236d8109bc80984\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/compound/CErc20I.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./CTokenI.sol\\\";\\n\\ninterface CErc20I is CTokenI {\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function underlying() external view returns (address);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function decimals() external returns (uint8);\\n}\\n\",\"keccak256\":\"0xfa9c248a444854ffda991294e08589b558a57c6c0be9159379f745c83a2f738a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/compound/CTokenI.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ninterface CTokenI {\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function supplyRatePerBlock() external view returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function interestRateModel() external view returns (InterestRateModel);\\n\\n    function totalReserves() external view returns (uint256);\\n\\n    function reserveFactorMantissa() external view returns (uint256);\\n\\n    function totalBorrows() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe78d9b0aa9ecd9eae55da295bfb1b79c61d94ce9be8535f8189f862598dd8fe5\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/compound/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"./CTokenI.sol\\\";\\n\\ninterface IComptroller {\\n    function compSupplySpeeds(address cToken) external view returns (uint256);\\n\\n    function claimComp(\\n        address[] memory holders,\\n        CTokenI[] memory cTokens,\\n        bool borrowers,\\n        bool suppliers\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3e986ae6ab82c3389f6b916c9382b850ea35ead55975bbda80278955fe90bf01\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/compound/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\ninterface InterestRateModel {\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) external view returns (uint256);\\n\\n    // Rinkeby function\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 _reserves\\n    ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x74bebab381f62960951099a8a4467324260c176e232005dbb83463214ad984a1\",\"license\":\"GPL-3.0\"},\"contracts/strategies/OptimizerAPR/genericLender/GenericCompoundUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport \\\"../../../interfaces/external/compound/CErc20I.sol\\\";\\nimport \\\"../../../interfaces/external/compound/IComptroller.sol\\\";\\nimport \\\"../../../interfaces/external/compound/InterestRateModel.sol\\\";\\n\\nimport \\\"./GenericLenderBaseUpgradeable.sol\\\";\\n\\n/// @title GenericCompoundV3\\n/// @author Forked from here: https://github.com/Grandthrax/yearnV2-generic-lender-strat/blob/master/contracts/GenericLender/GenericCompound.sol\\ncontract GenericCompoundUpgradeable is GenericLenderBaseUpgradeable {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    uint256 public constant BLOCKS_PER_YEAR = 2_350_000;\\n\\n    AggregatorV3Interface public constant oracle = AggregatorV3Interface(0xdbd020CAeF83eFd542f4De03e3cF0C28A4428bd5);\\n    IComptroller public constant comptroller = IComptroller(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\\n    address public constant comp = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\\n\\n    // ======================== References to contracts ============================\\n\\n    CErc20I public cToken;\\n    uint256 private dust;\\n\\n    // =============================== Errors ======================================\\n\\n    error FailedToMint();\\n    error FailedToRecoverETH();\\n    error FailedToRedeem();\\n    error InvalidOracleValue();\\n    error WrongCToken();\\n\\n    // ============================= Constructor ===================================\\n\\n    /// @notice Initializer of the `GenericCompound`\\n    /// @param _strategy Reference to the strategy using this lender\\n    /// @param _cToken Address of the cToken\\n    /// @param governorList List of addresses with governor privilege\\n    /// @param keeperList List of addresses with keeper privilege\\n    /// @param guardian Address of the guardian\\n    function initialize(\\n        address _strategy,\\n        string memory _name,\\n        address _cToken,\\n        address[] memory governorList,\\n        address guardian,\\n        address[] memory keeperList\\n    ) external {\\n        _initialize(_strategy, _name, governorList, guardian, keeperList);\\n\\n        cToken = CErc20I(_cToken);\\n        if (CErc20I(_cToken).underlying() != address(want)) revert WrongCToken();\\n\\n        want.safeApprove(_cToken, type(uint256).max);\\n        IERC20(comp).safeApprove(oneInch, type(uint256).max);\\n    }\\n\\n    // ===================== External Strategy Functions ===========================\\n\\n    /// @notice Deposits the current balance of the contract to the lending platform\\n    function deposit() external override onlyRole(STRATEGY_ROLE) {\\n        uint256 balance = want.balanceOf(address(this));\\n        if (cToken.mint(balance) != 0) revert FailedToMint();\\n    }\\n\\n    /// @notice Withdraws a given amount from lender\\n    /// @param amount The amount the caller wants to withdraw\\n    /// @return Amount actually withdrawn\\n    function withdraw(uint256 amount) external override onlyRole(STRATEGY_ROLE) returns (uint256) {\\n        return _withdraw(amount);\\n    }\\n\\n    /// @notice Withdraws as much as possible from the lending platform\\n    /// @return Whether everything was withdrawn or not\\n    function withdrawAll() external override onlyRole(STRATEGY_ROLE) returns (bool) {\\n        uint256 invested = _nav();\\n        uint256 returned = _withdraw(invested);\\n        return returned >= invested;\\n    }\\n\\n    // ========================== External View Functions ==========================\\n\\n    /// @notice Helper function the current balance of cTokens\\n    function underlyingBalanceStored() public view override returns (uint256 balance) {\\n        uint256 currentCr = cToken.balanceOf(address(this));\\n        if (currentCr == 0) {\\n            balance = 0;\\n        } else {\\n            //The current exchange rate as an unsigned integer, scaled by 1e18.\\n            balance = (currentCr * cToken.exchangeRateStored()) / 1e18;\\n        }\\n    }\\n\\n    /// @notice Returns an estimation of the current Annual Percentage Rate after a new deposit\\n    /// of `amount`\\n    /// @param amount Amount to add to the lending platform, and that we want to take into account\\n    /// in the apr computation\\n    function aprAfterDeposit(uint256 amount) external view override returns (uint256) {\\n        uint256 cashPrior = want.balanceOf(address(cToken));\\n\\n        uint256 borrows = cToken.totalBorrows();\\n\\n        uint256 reserves = cToken.totalReserves();\\n\\n        uint256 reserverFactor = cToken.reserveFactorMantissa();\\n\\n        InterestRateModel model = cToken.interestRateModel();\\n\\n        // The supply rate is derived from the borrow rate, reserve factor and the amount of total borrows.\\n        uint256 supplyRate = model.getSupplyRate(cashPrior + amount, borrows, reserves, reserverFactor);\\n        // Adding the yield from comp\\n        return supplyRate * BLOCKS_PER_YEAR + _incentivesRate(amount);\\n    }\\n\\n    // ================================= Governance ================================\\n\\n    /// @notice Withdraws as much as possible in case of emergency and sends it to the `PoolManager`\\n    /// @param amount Amount to withdraw\\n    /// @dev Does not check if any error occurs or if the amount withdrawn is correct\\n    function emergencyWithdraw(uint256 amount) external override onlyRole(GUARDIAN_ROLE) {\\n        // Do not care about errors here, what is important is to withdraw what is possible\\n        cToken.redeemUnderlying(amount);\\n\\n        want.safeTransfer(address(poolManager), want.balanceOf(address(this)));\\n    }\\n\\n    /// @notice Allow to modify the dust amount\\n    /// @param dust_ Amount under which the contract do not try to redeem from Compouns\\n    /// @dev Set in a function because contract was already initalized\\n    function setDust(uint256 dust_) external onlyRole(GUARDIAN_ROLE) {\\n        dust = dust_;\\n    }\\n\\n    // ============================= Internal Functions ============================\\n\\n    /// @notice See `apr`\\n    function _apr() internal view override returns (uint256) {\\n        return cToken.supplyRatePerBlock() * BLOCKS_PER_YEAR + _incentivesRate(0);\\n    }\\n\\n    /// @notice See `withdraw`\\n    function _withdraw(uint256 amount) internal returns (uint256) {\\n        uint256 balanceUnderlying = cToken.balanceOfUnderlying(address(this));\\n        uint256 looseBalance = want.balanceOf(address(this));\\n        uint256 total = balanceUnderlying + looseBalance;\\n\\n        if (amount > total) {\\n            // Can't withdraw more than we own\\n            amount = total;\\n        }\\n\\n        if (looseBalance >= amount) {\\n            want.safeTransfer(address(strategy), amount);\\n            return amount;\\n        }\\n\\n        // Not state changing but OK because of previous call\\n        uint256 liquidity = want.balanceOf(address(cToken));\\n\\n        if (liquidity > 1) {\\n            uint256 toWithdraw = amount - looseBalance;\\n            // If amount is too low then do not try to withdraw it\\n            // Risk being: the tx can revert because the cToken needed to be sent == 0\\n            if (toWithdraw >= dust) {\\n                if (toWithdraw <= liquidity) {\\n                    // We can take all\\n                    if (cToken.redeemUnderlying(toWithdraw) != 0) revert FailedToRedeem();\\n                } else {\\n                    // Take all we can\\n                    if (cToken.redeemUnderlying(liquidity) != 0) revert FailedToRedeem();\\n                }\\n            }\\n        }\\n        address[] memory holders = new address[](1);\\n        CTokenI[] memory cTokens = new CTokenI[](1);\\n        holders[0] = address(this);\\n        cTokens[0] = cToken;\\n        comptroller.claimComp(holders, cTokens, true, true);\\n\\n        looseBalance = want.balanceOf(address(this));\\n        want.safeTransfer(address(strategy), looseBalance);\\n        return looseBalance;\\n    }\\n\\n    /// @notice Calculates APR from Compound's Liquidity Mining Program\\n    /// @param amountToAdd Amount to add to the `totalSupplyInWant` (for the `aprAfterDeposit` function)\\n    function _incentivesRate(uint256 amountToAdd) internal view returns (uint256) {\\n        uint256 supplySpeed = comptroller.compSupplySpeeds(address(cToken));\\n        uint256 totalSupplyInWant = (cToken.totalSupply() * cToken.exchangeRateStored()) / 1e18 + amountToAdd;\\n        // `supplySpeed` is in `COMP` unit -> the following operation is going to put it in `want` unit\\n        supplySpeed = _comptoWant(supplySpeed);\\n        uint256 incentivesRate;\\n        // Added for testing purposes and to handle the edge case where there is nothing left in a market\\n        if (totalSupplyInWant == 0) {\\n            incentivesRate = supplySpeed * BLOCKS_PER_YEAR;\\n        } else {\\n            // `incentivesRate` is expressed in base 18 like all APR\\n            incentivesRate = (supplySpeed * BLOCKS_PER_YEAR * 1e18) / totalSupplyInWant;\\n        }\\n        return (incentivesRate * 9500) / 10000; // 95% of estimated APR to avoid overestimations\\n    }\\n\\n    /// @notice Estimates the value of `_amount` COMP tokens\\n    /// @param _amount Amount of comp to compute the `want` price of\\n    /// @dev This function uses a ChainLink oracle to easily compute the price\\n    function _comptoWant(uint256 _amount) internal view returns (uint256) {\\n        if (_amount == 0) {\\n            return 0;\\n        }\\n        (uint80 roundId, int256 ratio, , , uint80 answeredInRound) = oracle.latestRoundData();\\n        if (ratio == 0 || roundId > answeredInRound) revert InvalidOracleValue();\\n        uint256 castedRatio = uint256(ratio);\\n\\n        // Checking whether we should multiply or divide by the ratio computed\\n        return (_amount * castedRatio * wantBase) / 1e26;\\n    }\\n\\n    /// @notice Specifies the token managed by this contract during normal operation\\n    function _protectedTokens() internal view override returns (address[] memory) {\\n        address[] memory protected = new address[](2);\\n        protected[0] = address(want);\\n        protected[1] = address(cToken);\\n        return protected;\\n    }\\n\\n    /// @notice Recovers ETH from the contract\\n    /// @param amount Amount to be recovered\\n    function recoverETH(address to, uint256 amount) external onlyRole(GUARDIAN_ROLE) {\\n        if (!payable(to).send(amount)) revert FailedToRecoverETH();\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xcbb7767525ef313d752ce641af3ab4576df8c09cb7ecd2acd4932aba1a556df4\",\"license\":\"GPL-3.0\"},\"contracts/strategies/OptimizerAPR/genericLender/GenericLenderBaseUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../../../external/AccessControlAngleUpgradeable.sol\\\";\\n\\nimport \\\"../../../interfaces/IGenericLender.sol\\\";\\nimport \\\"../../../interfaces/IPoolManager.sol\\\";\\nimport \\\"../../../interfaces/IStrategy.sol\\\";\\n\\n/// @title GenericLenderBaseUpgradeable\\n/// @author Forked from https://github.com/Grandthrax/yearnV2-generic-lender-strat/tree/master/contracts/GenericLender\\n/// @notice A base contract to build contracts that lend assets to protocols\\nabstract contract GenericLenderBaseUpgradeable is IGenericLender, AccessControlAngleUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant GUARDIAN_ROLE = keccak256(\\\"GUARDIAN_ROLE\\\");\\n    bytes32 public constant STRATEGY_ROLE = keccak256(\\\"STRATEGY_ROLE\\\");\\n    bytes32 public constant KEEPER_ROLE = keccak256(\\\"KEEPER_ROLE\\\");\\n\\n    // ======================= References to contracts =============================\\n\\n    address internal constant oneInch = 0x1111111254fb6c44bAC0beD2854e76F90643097d;\\n\\n    // ========================= References and Parameters =========================\\n\\n    string public override lenderName;\\n    /// @notice Reference to the protocol's collateral poolManager\\n    IPoolManager public poolManager;\\n    /// @notice Reference to the `Strategy`\\n    address public override strategy;\\n    /// @notice Reference to the token lent\\n    IERC20 public want;\\n    /// @notice Base of the asset handled by the lender\\n    uint256 public wantBase;\\n\\n    uint256[45] private __gapBaseLender;\\n\\n    // ================================ Errors =====================================\\n\\n    error ErrorSwap();\\n    error IncompatibleLengths();\\n    error ProtectedToken();\\n    error TooSmallAmount();\\n\\n    // ================================ Initializer ================================\\n\\n    /// @notice Initalizer of the `GenericLenderBase`\\n    /// @param _strategy Reference to the strategy using this lender\\n    /// @param _name Name of the lender\\n    /// @param governorList List of addresses with governor privilege\\n    /// @param guardian Address of the guardian\\n    /// @param keeperList List of keeper addresses\\n    function _initialize(\\n        address _strategy,\\n        string memory _name,\\n        address[] memory governorList,\\n        address guardian,\\n        address[] memory keeperList\\n    ) internal initializer {\\n        strategy = _strategy;\\n        // The corresponding `PoolManager` is inferred from the `Strategy`\\n        poolManager = IPoolManager(IStrategy(strategy).poolManager());\\n        want = IERC20(poolManager.token());\\n        lenderName = _name;\\n\\n        _setupRole(GUARDIAN_ROLE, address(poolManager));\\n        for (uint256 i = 0; i < governorList.length; i++) {\\n            _setupRole(GUARDIAN_ROLE, governorList[i]);\\n        }\\n\\n        _setupRole(KEEPER_ROLE, guardian);\\n        for (uint256 i = 0; i < keeperList.length; i++) {\\n            _setupRole(KEEPER_ROLE, keeperList[i]);\\n        }\\n\\n        _setRoleAdmin(KEEPER_ROLE, GUARDIAN_ROLE);\\n\\n        _setupRole(GUARDIAN_ROLE, guardian);\\n        _setupRole(STRATEGY_ROLE, _strategy);\\n        _setRoleAdmin(GUARDIAN_ROLE, STRATEGY_ROLE);\\n        _setRoleAdmin(STRATEGY_ROLE, GUARDIAN_ROLE);\\n        wantBase = 10**IERC20Metadata(address(want)).decimals();\\n        want.safeApprove(_strategy, type(uint256).max);\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    // ============================ View Functions =================================\\n\\n    /// @notice Returns an estimation of the current Annual Percentage Rate\\n    function apr() external view override returns (uint256) {\\n        return _apr();\\n    }\\n\\n    /// @notice Returns an estimation of the current Annual Percentage Rate weighted by a factor\\n    function weightedApr() external view override returns (uint256) {\\n        uint256 a = _apr();\\n        return a * _nav();\\n    }\\n\\n    /// @notice Helper function to get the current total of assets managed by the lender.\\n    function nav() external view override returns (uint256) {\\n        return _nav();\\n    }\\n\\n    /// @notice Check if assets are currently managed by the lender\\n    /// @dev We're considering that the strategy has no assets if it has less than 10 of the\\n    /// underlying asset in total to avoid the case where there is dust remaining on the lending market we cannot\\n    /// withdraw everything\\n    function hasAssets() external view override returns (bool) {\\n        return _nav() > 10 * wantBase;\\n    }\\n\\n    /// @notice See `nav`\\n    function _nav() internal view returns (uint256) {\\n        return want.balanceOf(address(this)) + underlyingBalanceStored();\\n    }\\n\\n    /// @notice See `apr`\\n    function _apr() internal view virtual returns (uint256);\\n\\n    /// @notice Returns the current balance invested on the lender and related staking contracts\\n    function underlyingBalanceStored() public view virtual returns (uint256 balance);\\n\\n    // ============================ Governance Functions ===========================\\n\\n    /// @notice Override this to add all tokens/tokenized positions this contract\\n    /// manages on a *persistent* basis (e.g. not just for swapping back to\\n    /// want ephemerally).\\n    ///\\n    /// Example:\\n    /// ```\\n    ///    function _protectedTokens() internal override view returns (address[] memory) {\\n    ///      address[] memory protected = new address[](3);\\n    ///      protected[0] = tokenA;\\n    ///      protected[1] = tokenB;\\n    ///      protected[2] = tokenC;\\n    ///      return protected;\\n    ///    }\\n    /// ```\\n    function _protectedTokens() internal view virtual returns (address[] memory);\\n\\n    /// @notice\\n    /// Removes tokens from this Strategy that are not the type of tokens\\n    /// managed by this Strategy. This may be used in case of accidentally\\n    /// sending the wrong kind of token to this Strategy.\\n    ///\\n    /// Tokens will be sent to `governance()`.\\n    ///\\n    /// This will fail if an attempt is made to sweep `want`, or any tokens\\n    /// that are protected by this Strategy.\\n    ///\\n    /// This may only be called by governance.\\n    /// @param _token The token to transfer out of this poolManager.\\n    /// @param to Address to send the tokens to.\\n    /// @dev\\n    /// Implement `_protectedTokens()` to specify any additional tokens that\\n    /// should be protected from sweeping in addition to `want`.\\n    function sweep(address _token, address to) external override onlyRole(GUARDIAN_ROLE) {\\n        address[] memory __protectedTokens = _protectedTokens();\\n        for (uint256 i = 0; i < __protectedTokens.length; i++)\\n            if (_token == __protectedTokens[i]) revert ProtectedToken();\\n\\n        IERC20(_token).safeTransfer(to, IERC20(_token).balanceOf(address(this)));\\n    }\\n\\n    /// @notice Changes allowance of a set of tokens to addresses\\n    /// @param tokens Addresses of the tokens for which approvals should be made\\n    /// @param spenders Addresses to approve\\n    /// @param amounts Approval amounts for each address\\n    function changeAllowance(\\n        IERC20[] calldata tokens,\\n        address[] calldata spenders,\\n        uint256[] calldata amounts\\n    ) external onlyRole(GUARDIAN_ROLE) {\\n        if (tokens.length != spenders.length || tokens.length != amounts.length) revert IncompatibleLengths();\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            _changeAllowance(tokens[i], spenders[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Swap earned _stkAave or Aave for `want` through 1Inch\\n    /// @param minAmountOut Minimum amount of `want` to receive for the swap to happen\\n    /// @param payload Bytes needed for 1Inch API\\n    /// @dev In the case of a contract lending to Aave, tokens swapped should typically be: _stkAave -> `want` or Aave -> `want`\\n    function sellRewards(uint256 minAmountOut, bytes memory payload) external onlyRole(KEEPER_ROLE) {\\n        //solhint-disable-next-line\\n        (bool success, bytes memory result) = oneInch.call(payload);\\n        if (!success) _revertBytes(result);\\n\\n        uint256 amountOut = abi.decode(result, (uint256));\\n        if (amountOut < minAmountOut) revert TooSmallAmount();\\n    }\\n\\n    /// @notice Internal function used for error handling\\n    function _revertBytes(bytes memory errMsg) internal pure {\\n        if (errMsg.length > 0) {\\n            //solhint-disable-next-line\\n            assembly {\\n                revert(add(32, errMsg), mload(errMsg))\\n            }\\n        }\\n        revert ErrorSwap();\\n    }\\n\\n    /// @notice Changes allowance of a set of tokens to addresses\\n    /// @param token Address of the token for which approval should be made\\n    /// @param spender Address to approve\\n    /// @param amount Approval amount\\n    function _changeAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        uint256 currentAllowance = token.allowance(address(this), address(spender));\\n        if (currentAllowance < amount) {\\n            token.safeIncreaseAllowance(address(spender), amount - currentAllowance);\\n        } else if (currentAllowance > amount) {\\n            token.safeDecreaseAllowance(address(spender), currentAllowance - amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x66a045cd12fdd204d7e36e66bbc6dfd635ca7246882d4369dd49c9535bf3f407\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b506200010b565b6000620000f630620000fc60201b620015881760201c565b15905090565b6001600160a01b03163b151590565b6139f0806200011b6000396000f3fe6080604052600436106102385760003560e01c80635be9b2d311610138578063a8c62e76116100b0578063c6afba3c1161007f578063d37db1d211610064578063d37db1d214610686578063d547741f1461069d578063dc4c90d3146106bd57600080fd5b8063c6afba3c1461065c578063d0e30db01461067157600080fd5b8063a8c62e76146105e7578063b82c4dc114610607578063b8dc491b14610627578063c1590cd71461064757600080fd5b8063853828b6116101075780638b202176116100ec5780638b2021761461059057806391d14854146105b2578063a217fddf146105d257600080fd5b8063853828b61461055b578063864d705e1461057057600080fd5b80635be9b2d3146104c65780635fe3b567146104eb57806369e527da146105135780637dc0d1d01461053357600080fd5b80632e1a7d4d116101cb5780633e0c06291161019a5780635312ea8e1161017f5780635312ea8e1461045d57806357ded9c91461047d578063580b7c2e1461049257600080fd5b80633e0c06291461041d578063437552c01461043d57600080fd5b80632e1a7d4d146103895780632f2ff15d146103a9578063364bc15a146103c957806336568abe146103fd57600080fd5b8063149a4ae411610207578063149a4ae4146102e45780631f1fcd5114610304578063248a9ca31461032457806324ea54f41461035557600080fd5b806305b41934146102445780630b6d1d1714610266578063109d0af81461028f578063116ac4a3146102cf57600080fd5b3661023f57005b600080fd5b34801561025057600080fd5b5061026461025f3660046131c9565b6106dd565b005b34801561027257600080fd5b5061027c60375481565b6040519081526020015b60405180910390f35b34801561029b57600080fd5b506102b773c00e94cb662c3520282e6f5717214004a7f2688881565b6040516001600160a01b039091168152602001610286565b3480156102db57600080fd5b5061027c6107e6565b3480156102f057600080fd5b5061027c6102ff366004613224565b61080b565b34801561031057600080fd5b506036546102b7906001600160a01b031681565b34801561033057600080fd5b5061027c61033f366004613224565b6000908152600160208190526040909120015490565b34801561036157600080fd5b5061027c7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504181565b34801561039557600080fd5b5061027c6103a4366004613224565b610b43565b3480156103b557600080fd5b506102646103c4366004613265565b610b82565b3480156103d557600080fd5b5061027c7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab81565b34801561040957600080fd5b50610264610418366004613265565b610bae565b34801561042957600080fd5b50610264610438366004613295565b610c19565b34801561044957600080fd5b50610264610458366004613224565b610c9f565b34801561046957600080fd5b50610264610478366004613224565b610cd0565b34801561048957600080fd5b5061027c610e0c565b34801561049e57600080fd5b5061027c7f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c81565b3480156104d257600080fd5b506104db610e1b565b6040519015158152602001610286565b3480156104f757600080fd5b506102b7733d9819210a31b4961b30ef54be2aed79b9c9cd3b81565b34801561051f57600080fd5b506065546102b7906001600160a01b031681565b34801561053f57600080fd5b506102b773dbd020caef83efd542f4de03e3cf0c28a4428bd581565b34801561056757600080fd5b506104db610e3a565b34801561057c57600080fd5b5061026461058b36600461333f565b610e8b565b34801561059c57600080fd5b506105a5610fdc565b604051610286919061343d565b3480156105be57600080fd5b506104db6105cd366004613265565b61106a565b3480156105de57600080fd5b5061027c600081565b3480156105f357600080fd5b506035546102b7906001600160a01b031681565b34801561061357600080fd5b506102646106223660046134bc565b611097565b34801561063357600080fd5b50610264610642366004613556565b61119e565b34801561065357600080fd5b5061027c6112de565b34801561066857600080fd5b5061027c6112e8565b34801561067d57600080fd5b5061026461140a565b34801561069257600080fd5b5061027c6223dbb081565b3480156106a957600080fd5b506102646106b8366004613265565b611561565b3480156106c957600080fd5b506034546102b7906001600160a01b031681565b7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab6107088133611597565b600080731111111254fb6c44bac0bed2854e76f90643097d6001600160a01b0316846040516107379190613584565b6000604051808303816000865af19150503d8060008114610774576040519150601f19603f3d011682016040523d82523d6000602084013e610779565b606091505b50915091508161078c5761078c816115fb565b6000818060200190518101906107a291906135a0565b9050858110156107de576040517f22313ae900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b6000806107f161163c565b90506107fb6116e5565b61080590826135cf565b91505090565b6036546065546040516370a0823160e01b81526001600160a01b039182166004820152600092839216906370a0823190602401602060405180830381865afa15801561085b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087f91906135a0565b90506000606560009054906101000a90046001600160a01b03166001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fa91906135a0565b90506000606560009054906101000a90046001600160a01b03166001600160a01b0316638f840ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610951573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097591906135a0565b90506000606560009054906101000a90046001600160a01b03166001600160a01b031663173b99046040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f091906135a0565b90506000606560009054906101000a90046001600160a01b03166001600160a01b031663f3fdb15a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6b91906135ee565b905060006001600160a01b03821663b8168816610a888a8961360b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526004810191909152602481018890526044810187905260648101869052608401602060405180830381865afa158015610af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1591906135a0565b9050610b208861175b565b610b2d6223dbb0836135cf565b610b37919061360b565b98975050505050505050565b60007f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c610b708133611597565b610b798361198a565b91505b50919050565b60008281526001602081905260409091200154610b9f8133611597565b610ba98383611eb5565b505050565b6001600160a01b0381163314610c0b5760405162461bcd60e51b815260206004820152600260248201527f373100000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b610c158282611f20565b5050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610c448133611597565b6040516001600160a01b0384169083156108fc029084906000818181858888f19350505050610ba9576040517f72de321200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610cca8133611597565b50606655565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610cfb8133611597565b6065546040517f852a12e3000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b039091169063852a12e3906024016020604051808303816000875af1158015610d5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8391906135a0565b506034546036546040516370a0823160e01b8152306004820152610c15926001600160a01b039081169216906370a0823190602401602060405180830381865afa158015610dd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df991906135a0565b6036546001600160a01b03169190611f87565b6000610e1661163c565b905090565b6000603754600a610e2c91906135cf565b610e346116e5565b11905090565b60007f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c610e678133611597565b6000610e716116e5565b90506000610e7e8261198a565b91909110159250505b5090565b610e988686858585612030565b606580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03868116918217909255603654604080517f6f307dc300000000000000000000000000000000000000000000000000000000815290519190931692636f307dc39160048083019260209291908290030181865afa158015610f2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4e91906135ee565b6001600160a01b031614610f8e576040517f0766ebc200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b603654610fa7906001600160a01b0316856000196125c7565b6107de73c00e94cb662c3520282e6f5717214004a7f26888731111111254fb6c44bac0bed2854e76f90643097d6000196125c7565b60338054610fe990613623565b80601f016020809104026020016040519081016040528092919081815260200182805461101590613623565b80156110625780601f1061103757610100808354040283529160200191611062565b820191906000526020600020905b81548152906001019060200180831161104557829003601f168201915b505050505081565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416110c28133611597565b85841415806110d15750858214155b15611108576040517f46282e8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b868110156111945761118288888381811061112857611128613658565b905060200201602081019061113d919061366e565b87878481811061114f5761114f613658565b9050602002016020810190611164919061366e565b86868581811061117657611176613658565b905060200201356126fc565b8061118c8161368b565b91505061110b565b5050505050505050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416111c98133611597565b60006111d36127c5565b905060005b8151811015611258578181815181106111f3576111f3613658565b60200260200101516001600160a01b0316856001600160a01b03161415611246576040517f093e1cdb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806112508161368b565b9150506111d8565b506040516370a0823160e01b81523060048201526112d89084906001600160a01b038716906370a0823190602401602060405180830381865afa1580156112a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c791906135a0565b6001600160a01b0387169190611f87565b50505050565b6000610e166116e5565b6065546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611335573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135991906135a0565b90508061136857600091505090565b606554604080517f182df0f50000000000000000000000000000000000000000000000000000000081529051670de0b6b3a7640000926001600160a01b03169163182df0f59160048083019260209291908290030181865afa1580156113d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f691906135a0565b61140090836135cf565b61080591906136a6565b7f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c6114358133611597565b6036546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561147e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a291906135a0565b6065546040517fa0712d68000000000000000000000000000000000000000000000000000000008152600481018390529192506001600160a01b03169063a0712d68906024016020604051808303816000875af1158015611507573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152b91906135a0565b15610c15576040517e48195d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000828152600160208190526040909120015461157e8133611597565b610ba98383611f20565b6001600160a01b03163b151590565b6115a1828261106a565b610c15576115b9816001600160a01b03166014612858565b6115c4836020612858565b6040516020016115d59291906136c8565b60408051601f198184030181529082905262461bcd60e51b8252610c029160040161343d565b80511561160a57805181602001fd5b6040517fc76d51a100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611648600061175b565b606554604080517fae9d70b000000000000000000000000000000000000000000000000000000000815290516223dbb0926001600160a01b03169163ae9d70b09160048083019260209291908290030181865afa1580156116ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d191906135a0565b6116db91906135cf565b610e16919061360b565b60006116ef6112e8565b6036546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611737573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116db91906135a0565b6065546040517f6aa875b50000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526000908190733d9819210a31b4961b30ef54be2aed79b9c9cd3b90636aa875b590602401602060405180830381865afa1580156117d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f991906135a0565b9050600083670de0b6b3a7640000606560009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561185a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187e91906135a0565b606560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f591906135a0565b6118ff91906135cf565b61190991906136a6565b611913919061360b565b905061191e82612a88565b915060008161193b576119346223dbb0846135cf565b9050611968565b816119496223dbb0856135cf565b61195b90670de0b6b3a76400006135cf565b61196591906136a6565b90505b6127106119778261251c6135cf565b61198191906136a6565b95945050505050565b6065546040517f3af9e66900000000000000000000000000000000000000000000000000000000815230600482015260009182916001600160a01b0390911690633af9e669906024016020604051808303816000875af11580156119f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1691906135a0565b6036546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8891906135a0565b90506000611a96828461360b565b905080851115611aa4578094505b848210611ad157603554603654611ac8916001600160a01b03918216911687611f87565b50929392505050565b6036546065546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa158015611b22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4691906135a0565b90506001811115611cf4576000611b5d8488613749565b90506066548110611cf257818111611c33576065546040517f852a12e3000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b039091169063852a12e3906024016020604051808303816000875af1158015611bd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf791906135a0565b15611c2e576040517f3c9bb3ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611cf2565b6065546040517f852a12e3000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b039091169063852a12e3906024016020604051808303816000875af1158015611c97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbb91906135a0565b15611cf2576040517f3c9bb3ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b6040805160018082528183019092526000916020808301908036833750506040805160018082528183019092529293506000929150602080830190803683370190505090503082600081518110611d4d57611d4d613658565b6001600160a01b03928316602091820292909201015260655482519116908290600090611d7c57611d7c613658565b6001600160a01b03909216602092830291909101909101526040517f6810dfa6000000000000000000000000000000000000000000000000000000008152733d9819210a31b4961b30ef54be2aed79b9c9cd3b90636810dfa690611deb90859085906001908190600401613760565b600060405180830381600087803b158015611e0557600080fd5b505af1158015611e19573d6000803e3d6000fd5b50506036546040516370a0823160e01b81523060048201526001600160a01b0390911692506370a082319150602401602060405180830381865afa158015611e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8991906135a0565b603554603654919650611ea9916001600160a01b03908116911687611f87565b50929695505050505050565b611ebf828261106a565b610c155760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b611f2a828261106a565b15610c155760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6040516001600160a01b038316602482015260448101829052610ba99084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612bb1565b600054610100900460ff1661204b5760005460ff161561204f565b303b155b6120c15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610c02565b600054610100900460ff1615801561210057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b603580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038816908117909155604080517fdc4c90d3000000000000000000000000000000000000000000000000000000008152905163dc4c90d3916004808201926020929091908290030181865afa15801561218a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ae91906135ee565b603480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169182179055604080517ffc0c546a000000000000000000000000000000000000000000000000000000008152905163fc0c546a916004808201926020929091908290030181865afa158015612239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225d91906135ee565b603680547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905584516122a890603390602088019061309a565b506034546122e0907f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041906001600160a01b0316612c96565b60005b84518110156123415761232f7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504186838151811061232257612322613658565b6020026020010151612c96565b806123398161368b565b9150506122e3565b5061236c7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab84612c96565b60005b82518110156123c0576123ae7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab84838151811061232257612322613658565b806123b88161368b565b91505061236f565b5061240b7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041612ca0565b6124357f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504184612c96565b61245f7f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c87612c96565b6124a97f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50417f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c612ca0565b6124f37f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041612ca0565b603660009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256a9190613801565b61257590600a613908565b603755603654612591906001600160a01b0316876000196125c7565b80156107de57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055505050505050565b8015806126415750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa15801561261b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061263f91906135a0565b155b6126b35760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610c02565b6040516001600160a01b038316602482015260448101829052610ba99084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611fcc565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa15801561274c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277091906135a0565b90508181101561279e57612799836127888385613749565b6001600160a01b0387169190612cf7565b6112d8565b818111156112d8576112d8836127b48484613749565b6001600160a01b0387169190612dc2565b60408051600280825260608083018452926000929190602083019080368337505060365482519293506001600160a01b03169183915060009061280a5761280a613658565b6001600160a01b03928316602091820292909201015260655482519116908290600190811061283b5761283b613658565b6001600160a01b0390921660209283029190910190910152919050565b606060006128678360026135cf565b61287290600261360b565b67ffffffffffffffff81111561288a5761288a61312a565b6040519080825280601f01601f1916602001820160405280156128b4576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106128eb576128eb613658565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061294e5761294e613658565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600061298a8460026135cf565b61299590600161360b565b90505b6001811115612a32577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106129d6576129d6613658565b1a60f81b8282815181106129ec576129ec613658565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93612a2b81613917565b9050612998565b508315612a815760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610c02565b9392505050565b600081612a9757506000919050565b600080600073dbd020caef83efd542f4de03e3cf0c28a4428bd56001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015612aee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b129190613948565b94505050925092508160001480612b4057508069ffffffffffffffffffff168369ffffffffffffffffffff16115b15612b77576040517f4e596b3100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60375482906a52b7d2dcc80cd2e400000090612b9383896135cf565b612b9d91906135cf565b612ba791906136a6565b9695505050505050565b6000612c06826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612f029092919063ffffffff16565b805190915015610ba95780806020019051810190612c249190613998565b610ba95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610c02565b610c158282611eb5565b60008281526001602081905260409091200154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a4600091825260016020819052604090922090910155565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015612d48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6c91906135a0565b612d76919061360b565b6040516001600160a01b0385166024820152604481018290529091506112d89085907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611fcc565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015612e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e3691906135a0565b905081811015612eae5760405162461bcd60e51b815260206004820152602960248201527f5361666545524332303a2064656372656173656420616c6c6f77616e6365206260448201527f656c6f77207a65726f00000000000000000000000000000000000000000000006064820152608401610c02565b6040516001600160a01b03841660248201528282036044820181905290612efb9086907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611fcc565b5050505050565b6060612f118484600085612f19565b949350505050565b606082471015612f915760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610c02565b6001600160a01b0385163b612fe85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c02565b600080866001600160a01b031685876040516130049190613584565b60006040518083038185875af1925050503d8060008114613041576040519150601f19603f3d011682016040523d82523d6000602084013e613046565b606091505b5091509150613056828286613061565b979650505050505050565b60608315613070575081612a81565b8251156130805782518084602001fd5b8160405162461bcd60e51b8152600401610c02919061343d565b8280546130a690613623565b90600052602060002090601f0160209004810192826130c8576000855561310e565b82601f106130e157805160ff191683800117855561310e565b8280016001018555821561310e579182015b8281111561310e5782518255916020019190600101906130f3565b50610e879291505b80821115610e875760008155600101613116565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156131695761316961312a565b604052919050565b600067ffffffffffffffff83111561318b5761318b61312a565b61319e6020601f19601f86011601613140565b90508281528383830111156131b257600080fd5b828260208301376000602084830101529392505050565b600080604083850312156131dc57600080fd5b82359150602083013567ffffffffffffffff8111156131fa57600080fd5b8301601f8101851361320b57600080fd5b61321a85823560208401613171565b9150509250929050565b60006020828403121561323657600080fd5b5035919050565b6001600160a01b038116811461325257600080fd5b50565b80356132608161323d565b919050565b6000806040838503121561327857600080fd5b82359150602083013561328a8161323d565b809150509250929050565b600080604083850312156132a857600080fd5b82356132b38161323d565b946020939093013593505050565b600082601f8301126132d257600080fd5b8135602067ffffffffffffffff8211156132ee576132ee61312a565b8160051b6132fd828201613140565b928352848101820192828101908785111561331757600080fd5b83870192505b848310156130565782356133308161323d565b8252918301919083019061331d565b60008060008060008060c0878903121561335857600080fd5b86356133638161323d565b9550602087013567ffffffffffffffff8082111561338057600080fd5b818901915089601f83011261339457600080fd5b6133a38a833560208501613171565b96506133b160408a01613255565b955060608901359150808211156133c757600080fd5b6133d38a838b016132c1565b94506133e160808a01613255565b935060a08901359150808211156133f757600080fd5b5061340489828a016132c1565b9150509295509295509295565b60005b8381101561342c578181015183820152602001613414565b838111156112d85750506000910152565b602081526000825180602084015261345c816040850160208701613411565b601f01601f19169190910160400192915050565b60008083601f84011261348257600080fd5b50813567ffffffffffffffff81111561349a57600080fd5b6020830191508360208260051b85010111156134b557600080fd5b9250929050565b600080600080600080606087890312156134d557600080fd5b863567ffffffffffffffff808211156134ed57600080fd5b6134f98a838b01613470565b9098509650602089013591508082111561351257600080fd5b61351e8a838b01613470565b9096509450604089013591508082111561353757600080fd5b5061354489828a01613470565b979a9699509497509295939492505050565b6000806040838503121561356957600080fd5b82356135748161323d565b9150602083013561328a8161323d565b60008251613596818460208701613411565b9190910192915050565b6000602082840312156135b257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156135e9576135e96135b9565b500290565b60006020828403121561360057600080fd5b8151612a818161323d565b6000821982111561361e5761361e6135b9565b500190565b600181811c9082168061363757607f821691505b60208210811415610b7c57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561368057600080fd5b8135612a818161323d565b600060001982141561369f5761369f6135b9565b5060010190565b6000826136c357634e487b7160e01b600052601260045260246000fd5b500490565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613700816017850160208801613411565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161373d816028840160208801613411565b01602801949350505050565b60008282101561375b5761375b6135b9565b500390565b6080808252855190820181905260009060209060a0840190828901845b828110156137a25781516001600160a01b03168452928401929084019060010161377d565b5050508381038285015286518082528783019183019060005b818110156137e05783516001600160a01b0316835292840192918401916001016137bb565b5050861515604086015292506137f4915050565b8215156060830152611981565b60006020828403121561381357600080fd5b815160ff81168114612a8157600080fd5b600181815b8085111561385f578160001904821115613845576138456135b9565b8085161561385257918102915b93841c9390800290613829565b509250929050565b60008261387657506001611091565b8161388357506000611091565b816001811461389957600281146138a3576138bf565b6001915050611091565b60ff8411156138b4576138b46135b9565b50506001821b611091565b5060208310610133831016604e8410600b84101617156138e2575081810a611091565b6138ec8383613824565b8060001904821115613900576139006135b9565b029392505050565b6000612a8160ff841683613867565b600081613926576139266135b9565b506000190190565b805169ffffffffffffffffffff8116811461326057600080fd5b600080600080600060a0868803121561396057600080fd5b6139698661392e565b945060208601519350604086015192506060860151915061398c6080870161392e565b90509295509295909350565b6000602082840312156139aa57600080fd5b81518015158114612a8157600080fdfea2646970667358221220e7d2dc2aa499bed01b21f0e2eeff964d04bca1903c71c8fad68fddff9b808fd864736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106102385760003560e01c80635be9b2d311610138578063a8c62e76116100b0578063c6afba3c1161007f578063d37db1d211610064578063d37db1d214610686578063d547741f1461069d578063dc4c90d3146106bd57600080fd5b8063c6afba3c1461065c578063d0e30db01461067157600080fd5b8063a8c62e76146105e7578063b82c4dc114610607578063b8dc491b14610627578063c1590cd71461064757600080fd5b8063853828b6116101075780638b202176116100ec5780638b2021761461059057806391d14854146105b2578063a217fddf146105d257600080fd5b8063853828b61461055b578063864d705e1461057057600080fd5b80635be9b2d3146104c65780635fe3b567146104eb57806369e527da146105135780637dc0d1d01461053357600080fd5b80632e1a7d4d116101cb5780633e0c06291161019a5780635312ea8e1161017f5780635312ea8e1461045d57806357ded9c91461047d578063580b7c2e1461049257600080fd5b80633e0c06291461041d578063437552c01461043d57600080fd5b80632e1a7d4d146103895780632f2ff15d146103a9578063364bc15a146103c957806336568abe146103fd57600080fd5b8063149a4ae411610207578063149a4ae4146102e45780631f1fcd5114610304578063248a9ca31461032457806324ea54f41461035557600080fd5b806305b41934146102445780630b6d1d1714610266578063109d0af81461028f578063116ac4a3146102cf57600080fd5b3661023f57005b600080fd5b34801561025057600080fd5b5061026461025f3660046131c9565b6106dd565b005b34801561027257600080fd5b5061027c60375481565b6040519081526020015b60405180910390f35b34801561029b57600080fd5b506102b773c00e94cb662c3520282e6f5717214004a7f2688881565b6040516001600160a01b039091168152602001610286565b3480156102db57600080fd5b5061027c6107e6565b3480156102f057600080fd5b5061027c6102ff366004613224565b61080b565b34801561031057600080fd5b506036546102b7906001600160a01b031681565b34801561033057600080fd5b5061027c61033f366004613224565b6000908152600160208190526040909120015490565b34801561036157600080fd5b5061027c7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504181565b34801561039557600080fd5b5061027c6103a4366004613224565b610b43565b3480156103b557600080fd5b506102646103c4366004613265565b610b82565b3480156103d557600080fd5b5061027c7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab81565b34801561040957600080fd5b50610264610418366004613265565b610bae565b34801561042957600080fd5b50610264610438366004613295565b610c19565b34801561044957600080fd5b50610264610458366004613224565b610c9f565b34801561046957600080fd5b50610264610478366004613224565b610cd0565b34801561048957600080fd5b5061027c610e0c565b34801561049e57600080fd5b5061027c7f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c81565b3480156104d257600080fd5b506104db610e1b565b6040519015158152602001610286565b3480156104f757600080fd5b506102b7733d9819210a31b4961b30ef54be2aed79b9c9cd3b81565b34801561051f57600080fd5b506065546102b7906001600160a01b031681565b34801561053f57600080fd5b506102b773dbd020caef83efd542f4de03e3cf0c28a4428bd581565b34801561056757600080fd5b506104db610e3a565b34801561057c57600080fd5b5061026461058b36600461333f565b610e8b565b34801561059c57600080fd5b506105a5610fdc565b604051610286919061343d565b3480156105be57600080fd5b506104db6105cd366004613265565b61106a565b3480156105de57600080fd5b5061027c600081565b3480156105f357600080fd5b506035546102b7906001600160a01b031681565b34801561061357600080fd5b506102646106223660046134bc565b611097565b34801561063357600080fd5b50610264610642366004613556565b61119e565b34801561065357600080fd5b5061027c6112de565b34801561066857600080fd5b5061027c6112e8565b34801561067d57600080fd5b5061026461140a565b34801561069257600080fd5b5061027c6223dbb081565b3480156106a957600080fd5b506102646106b8366004613265565b611561565b3480156106c957600080fd5b506034546102b7906001600160a01b031681565b7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab6107088133611597565b600080731111111254fb6c44bac0bed2854e76f90643097d6001600160a01b0316846040516107379190613584565b6000604051808303816000865af19150503d8060008114610774576040519150601f19603f3d011682016040523d82523d6000602084013e610779565b606091505b50915091508161078c5761078c816115fb565b6000818060200190518101906107a291906135a0565b9050858110156107de576040517f22313ae900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b6000806107f161163c565b90506107fb6116e5565b61080590826135cf565b91505090565b6036546065546040516370a0823160e01b81526001600160a01b039182166004820152600092839216906370a0823190602401602060405180830381865afa15801561085b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087f91906135a0565b90506000606560009054906101000a90046001600160a01b03166001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fa91906135a0565b90506000606560009054906101000a90046001600160a01b03166001600160a01b0316638f840ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610951573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097591906135a0565b90506000606560009054906101000a90046001600160a01b03166001600160a01b031663173b99046040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f091906135a0565b90506000606560009054906101000a90046001600160a01b03166001600160a01b031663f3fdb15a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6b91906135ee565b905060006001600160a01b03821663b8168816610a888a8961360b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526004810191909152602481018890526044810187905260648101869052608401602060405180830381865afa158015610af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1591906135a0565b9050610b208861175b565b610b2d6223dbb0836135cf565b610b37919061360b565b98975050505050505050565b60007f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c610b708133611597565b610b798361198a565b91505b50919050565b60008281526001602081905260409091200154610b9f8133611597565b610ba98383611eb5565b505050565b6001600160a01b0381163314610c0b5760405162461bcd60e51b815260206004820152600260248201527f373100000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b610c158282611f20565b5050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610c448133611597565b6040516001600160a01b0384169083156108fc029084906000818181858888f19350505050610ba9576040517f72de321200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610cca8133611597565b50606655565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610cfb8133611597565b6065546040517f852a12e3000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b039091169063852a12e3906024016020604051808303816000875af1158015610d5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8391906135a0565b506034546036546040516370a0823160e01b8152306004820152610c15926001600160a01b039081169216906370a0823190602401602060405180830381865afa158015610dd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df991906135a0565b6036546001600160a01b03169190611f87565b6000610e1661163c565b905090565b6000603754600a610e2c91906135cf565b610e346116e5565b11905090565b60007f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c610e678133611597565b6000610e716116e5565b90506000610e7e8261198a565b91909110159250505b5090565b610e988686858585612030565b606580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03868116918217909255603654604080517f6f307dc300000000000000000000000000000000000000000000000000000000815290519190931692636f307dc39160048083019260209291908290030181865afa158015610f2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4e91906135ee565b6001600160a01b031614610f8e576040517f0766ebc200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b603654610fa7906001600160a01b0316856000196125c7565b6107de73c00e94cb662c3520282e6f5717214004a7f26888731111111254fb6c44bac0bed2854e76f90643097d6000196125c7565b60338054610fe990613623565b80601f016020809104026020016040519081016040528092919081815260200182805461101590613623565b80156110625780601f1061103757610100808354040283529160200191611062565b820191906000526020600020905b81548152906001019060200180831161104557829003601f168201915b505050505081565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416110c28133611597565b85841415806110d15750858214155b15611108576040517f46282e8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b868110156111945761118288888381811061112857611128613658565b905060200201602081019061113d919061366e565b87878481811061114f5761114f613658565b9050602002016020810190611164919061366e565b86868581811061117657611176613658565b905060200201356126fc565b8061118c8161368b565b91505061110b565b5050505050505050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416111c98133611597565b60006111d36127c5565b905060005b8151811015611258578181815181106111f3576111f3613658565b60200260200101516001600160a01b0316856001600160a01b03161415611246576040517f093e1cdb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806112508161368b565b9150506111d8565b506040516370a0823160e01b81523060048201526112d89084906001600160a01b038716906370a0823190602401602060405180830381865afa1580156112a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c791906135a0565b6001600160a01b0387169190611f87565b50505050565b6000610e166116e5565b6065546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611335573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135991906135a0565b90508061136857600091505090565b606554604080517f182df0f50000000000000000000000000000000000000000000000000000000081529051670de0b6b3a7640000926001600160a01b03169163182df0f59160048083019260209291908290030181865afa1580156113d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f691906135a0565b61140090836135cf565b61080591906136a6565b7f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c6114358133611597565b6036546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561147e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a291906135a0565b6065546040517fa0712d68000000000000000000000000000000000000000000000000000000008152600481018390529192506001600160a01b03169063a0712d68906024016020604051808303816000875af1158015611507573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152b91906135a0565b15610c15576040517e48195d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000828152600160208190526040909120015461157e8133611597565b610ba98383611f20565b6001600160a01b03163b151590565b6115a1828261106a565b610c15576115b9816001600160a01b03166014612858565b6115c4836020612858565b6040516020016115d59291906136c8565b60408051601f198184030181529082905262461bcd60e51b8252610c029160040161343d565b80511561160a57805181602001fd5b6040517fc76d51a100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611648600061175b565b606554604080517fae9d70b000000000000000000000000000000000000000000000000000000000815290516223dbb0926001600160a01b03169163ae9d70b09160048083019260209291908290030181865afa1580156116ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d191906135a0565b6116db91906135cf565b610e16919061360b565b60006116ef6112e8565b6036546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611737573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116db91906135a0565b6065546040517f6aa875b50000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526000908190733d9819210a31b4961b30ef54be2aed79b9c9cd3b90636aa875b590602401602060405180830381865afa1580156117d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f991906135a0565b9050600083670de0b6b3a7640000606560009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561185a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187e91906135a0565b606560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f591906135a0565b6118ff91906135cf565b61190991906136a6565b611913919061360b565b905061191e82612a88565b915060008161193b576119346223dbb0846135cf565b9050611968565b816119496223dbb0856135cf565b61195b90670de0b6b3a76400006135cf565b61196591906136a6565b90505b6127106119778261251c6135cf565b61198191906136a6565b95945050505050565b6065546040517f3af9e66900000000000000000000000000000000000000000000000000000000815230600482015260009182916001600160a01b0390911690633af9e669906024016020604051808303816000875af11580156119f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1691906135a0565b6036546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8891906135a0565b90506000611a96828461360b565b905080851115611aa4578094505b848210611ad157603554603654611ac8916001600160a01b03918216911687611f87565b50929392505050565b6036546065546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa158015611b22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4691906135a0565b90506001811115611cf4576000611b5d8488613749565b90506066548110611cf257818111611c33576065546040517f852a12e3000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b039091169063852a12e3906024016020604051808303816000875af1158015611bd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf791906135a0565b15611c2e576040517f3c9bb3ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611cf2565b6065546040517f852a12e3000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b039091169063852a12e3906024016020604051808303816000875af1158015611c97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbb91906135a0565b15611cf2576040517f3c9bb3ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b6040805160018082528183019092526000916020808301908036833750506040805160018082528183019092529293506000929150602080830190803683370190505090503082600081518110611d4d57611d4d613658565b6001600160a01b03928316602091820292909201015260655482519116908290600090611d7c57611d7c613658565b6001600160a01b03909216602092830291909101909101526040517f6810dfa6000000000000000000000000000000000000000000000000000000008152733d9819210a31b4961b30ef54be2aed79b9c9cd3b90636810dfa690611deb90859085906001908190600401613760565b600060405180830381600087803b158015611e0557600080fd5b505af1158015611e19573d6000803e3d6000fd5b50506036546040516370a0823160e01b81523060048201526001600160a01b0390911692506370a082319150602401602060405180830381865afa158015611e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8991906135a0565b603554603654919650611ea9916001600160a01b03908116911687611f87565b50929695505050505050565b611ebf828261106a565b610c155760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b611f2a828261106a565b15610c155760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6040516001600160a01b038316602482015260448101829052610ba99084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612bb1565b600054610100900460ff1661204b5760005460ff161561204f565b303b155b6120c15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610c02565b600054610100900460ff1615801561210057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b603580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038816908117909155604080517fdc4c90d3000000000000000000000000000000000000000000000000000000008152905163dc4c90d3916004808201926020929091908290030181865afa15801561218a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ae91906135ee565b603480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169182179055604080517ffc0c546a000000000000000000000000000000000000000000000000000000008152905163fc0c546a916004808201926020929091908290030181865afa158015612239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225d91906135ee565b603680547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905584516122a890603390602088019061309a565b506034546122e0907f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041906001600160a01b0316612c96565b60005b84518110156123415761232f7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504186838151811061232257612322613658565b6020026020010151612c96565b806123398161368b565b9150506122e3565b5061236c7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab84612c96565b60005b82518110156123c0576123ae7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab84838151811061232257612322613658565b806123b88161368b565b91505061236f565b5061240b7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041612ca0565b6124357f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504184612c96565b61245f7f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c87612c96565b6124a97f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50417f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c612ca0565b6124f37f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041612ca0565b603660009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256a9190613801565b61257590600a613908565b603755603654612591906001600160a01b0316876000196125c7565b80156107de57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055505050505050565b8015806126415750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa15801561261b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061263f91906135a0565b155b6126b35760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610c02565b6040516001600160a01b038316602482015260448101829052610ba99084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611fcc565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa15801561274c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277091906135a0565b90508181101561279e57612799836127888385613749565b6001600160a01b0387169190612cf7565b6112d8565b818111156112d8576112d8836127b48484613749565b6001600160a01b0387169190612dc2565b60408051600280825260608083018452926000929190602083019080368337505060365482519293506001600160a01b03169183915060009061280a5761280a613658565b6001600160a01b03928316602091820292909201015260655482519116908290600190811061283b5761283b613658565b6001600160a01b0390921660209283029190910190910152919050565b606060006128678360026135cf565b61287290600261360b565b67ffffffffffffffff81111561288a5761288a61312a565b6040519080825280601f01601f1916602001820160405280156128b4576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106128eb576128eb613658565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061294e5761294e613658565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600061298a8460026135cf565b61299590600161360b565b90505b6001811115612a32577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106129d6576129d6613658565b1a60f81b8282815181106129ec576129ec613658565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93612a2b81613917565b9050612998565b508315612a815760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610c02565b9392505050565b600081612a9757506000919050565b600080600073dbd020caef83efd542f4de03e3cf0c28a4428bd56001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015612aee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b129190613948565b94505050925092508160001480612b4057508069ffffffffffffffffffff168369ffffffffffffffffffff16115b15612b77576040517f4e596b3100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60375482906a52b7d2dcc80cd2e400000090612b9383896135cf565b612b9d91906135cf565b612ba791906136a6565b9695505050505050565b6000612c06826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612f029092919063ffffffff16565b805190915015610ba95780806020019051810190612c249190613998565b610ba95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610c02565b610c158282611eb5565b60008281526001602081905260409091200154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a4600091825260016020819052604090922090910155565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015612d48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6c91906135a0565b612d76919061360b565b6040516001600160a01b0385166024820152604481018290529091506112d89085907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611fcc565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015612e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e3691906135a0565b905081811015612eae5760405162461bcd60e51b815260206004820152602960248201527f5361666545524332303a2064656372656173656420616c6c6f77616e6365206260448201527f656c6f77207a65726f00000000000000000000000000000000000000000000006064820152608401610c02565b6040516001600160a01b03841660248201528282036044820181905290612efb9086907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611fcc565b5050505050565b6060612f118484600085612f19565b949350505050565b606082471015612f915760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610c02565b6001600160a01b0385163b612fe85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c02565b600080866001600160a01b031685876040516130049190613584565b60006040518083038185875af1925050503d8060008114613041576040519150601f19603f3d011682016040523d82523d6000602084013e613046565b606091505b5091509150613056828286613061565b979650505050505050565b60608315613070575081612a81565b8251156130805782518084602001fd5b8160405162461bcd60e51b8152600401610c02919061343d565b8280546130a690613623565b90600052602060002090601f0160209004810192826130c8576000855561310e565b82601f106130e157805160ff191683800117855561310e565b8280016001018555821561310e579182015b8281111561310e5782518255916020019190600101906130f3565b50610e879291505b80821115610e875760008155600101613116565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156131695761316961312a565b604052919050565b600067ffffffffffffffff83111561318b5761318b61312a565b61319e6020601f19601f86011601613140565b90508281528383830111156131b257600080fd5b828260208301376000602084830101529392505050565b600080604083850312156131dc57600080fd5b82359150602083013567ffffffffffffffff8111156131fa57600080fd5b8301601f8101851361320b57600080fd5b61321a85823560208401613171565b9150509250929050565b60006020828403121561323657600080fd5b5035919050565b6001600160a01b038116811461325257600080fd5b50565b80356132608161323d565b919050565b6000806040838503121561327857600080fd5b82359150602083013561328a8161323d565b809150509250929050565b600080604083850312156132a857600080fd5b82356132b38161323d565b946020939093013593505050565b600082601f8301126132d257600080fd5b8135602067ffffffffffffffff8211156132ee576132ee61312a565b8160051b6132fd828201613140565b928352848101820192828101908785111561331757600080fd5b83870192505b848310156130565782356133308161323d565b8252918301919083019061331d565b60008060008060008060c0878903121561335857600080fd5b86356133638161323d565b9550602087013567ffffffffffffffff8082111561338057600080fd5b818901915089601f83011261339457600080fd5b6133a38a833560208501613171565b96506133b160408a01613255565b955060608901359150808211156133c757600080fd5b6133d38a838b016132c1565b94506133e160808a01613255565b935060a08901359150808211156133f757600080fd5b5061340489828a016132c1565b9150509295509295509295565b60005b8381101561342c578181015183820152602001613414565b838111156112d85750506000910152565b602081526000825180602084015261345c816040850160208701613411565b601f01601f19169190910160400192915050565b60008083601f84011261348257600080fd5b50813567ffffffffffffffff81111561349a57600080fd5b6020830191508360208260051b85010111156134b557600080fd5b9250929050565b600080600080600080606087890312156134d557600080fd5b863567ffffffffffffffff808211156134ed57600080fd5b6134f98a838b01613470565b9098509650602089013591508082111561351257600080fd5b61351e8a838b01613470565b9096509450604089013591508082111561353757600080fd5b5061354489828a01613470565b979a9699509497509295939492505050565b6000806040838503121561356957600080fd5b82356135748161323d565b9150602083013561328a8161323d565b60008251613596818460208701613411565b9190910192915050565b6000602082840312156135b257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156135e9576135e96135b9565b500290565b60006020828403121561360057600080fd5b8151612a818161323d565b6000821982111561361e5761361e6135b9565b500190565b600181811c9082168061363757607f821691505b60208210811415610b7c57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561368057600080fd5b8135612a818161323d565b600060001982141561369f5761369f6135b9565b5060010190565b6000826136c357634e487b7160e01b600052601260045260246000fd5b500490565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613700816017850160208801613411565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161373d816028840160208801613411565b01602801949350505050565b60008282101561375b5761375b6135b9565b500390565b6080808252855190820181905260009060209060a0840190828901845b828110156137a25781516001600160a01b03168452928401929084019060010161377d565b5050508381038285015286518082528783019183019060005b818110156137e05783516001600160a01b0316835292840192918401916001016137bb565b5050861515604086015292506137f4915050565b8215156060830152611981565b60006020828403121561381357600080fd5b815160ff81168114612a8157600080fd5b600181815b8085111561385f578160001904821115613845576138456135b9565b8085161561385257918102915b93841c9390800290613829565b509250929050565b60008261387657506001611091565b8161388357506000611091565b816001811461389957600281146138a3576138bf565b6001915050611091565b60ff8411156138b4576138b46135b9565b50506001821b611091565b5060208310610133831016604e8410600b84101617156138e2575081810a611091565b6138ec8383613824565b8060001904821115613900576139006135b9565b029392505050565b6000612a8160ff841683613867565b600081613926576139266135b9565b506000190190565b805169ffffffffffffffffffff8116811461326057600080fd5b600080600080600060a0868803121561396057600080fd5b6139698661392e565b945060208601519350604086015192506060860151915061398c6080870161392e565b90509295509295909350565b6000602082840312156139aa57600080fd5b81518015158114612a8157600080fdfea2646970667358221220e7d2dc2aa499bed01b21f0e2eeff964d04bca1903c71c8fad68fddff9b808fd864736f6c634300080c0033",
  "devdoc": {
    "author": "Forked from here: https://github.com/Grandthrax/yearnV2-generic-lender-strat/blob/master/contracts/GenericLender/GenericCompound.sol",
    "kind": "dev",
    "methods": {
      "aprAfterDeposit(uint256)": {
        "params": {
          "amount": "Amount to add to the lending platform, and that we want to take into account in the apr computation"
        }
      },
      "changeAllowance(address[],address[],uint256[])": {
        "params": {
          "amounts": "Approval amounts for each address",
          "spenders": "Addresses to approve",
          "tokens": "Addresses of the tokens for which approvals should be made"
        }
      },
      "emergencyWithdraw(uint256)": {
        "details": "Does not check if any error occurs or if the amount withdrawn is correct",
        "params": {
          "amount": "Amount to withdraw"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasAssets()": {
        "details": "We're considering that the strategy has no assets if it has less than 10 of the underlying asset in total to avoid the case where there is dust remaining on the lending market we cannot withdraw everything"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,string,address,address[],address,address[])": {
        "params": {
          "_cToken": "Address of the cToken",
          "_strategy": "Reference to the strategy using this lender",
          "governorList": "List of addresses with governor privilege",
          "guardian": "Address of the guardian",
          "keeperList": "List of addresses with keeper privilege"
        }
      },
      "recoverETH(address,uint256)": {
        "params": {
          "amount": "Amount to be recovered"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "sellRewards(uint256,bytes)": {
        "details": "In the case of a contract lending to Aave, tokens swapped should typically be: _stkAave -> `want` or Aave -> `want`",
        "params": {
          "minAmountOut": "Minimum amount of `want` to receive for the swap to happen",
          "payload": "Bytes needed for 1Inch API"
        }
      },
      "setDust(uint256)": {
        "details": "Set in a function because contract was already initalized",
        "params": {
          "dust_": "Amount under which the contract do not try to redeem from Compouns"
        }
      },
      "sweep(address,address)": {
        "details": "Implement `_protectedTokens()` to specify any additional tokens that should be protected from sweeping in addition to `want`.",
        "params": {
          "_token": "The token to transfer out of this poolManager.",
          "to": "Address to send the tokens to."
        }
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "The amount the caller wants to withdraw"
        },
        "returns": {
          "_0": "Amount actually withdrawn"
        }
      },
      "withdrawAll()": {
        "returns": {
          "_0": "Whether everything was withdrawn or not"
        }
      }
    },
    "title": "GenericCompoundV3",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "apr()": {
        "notice": "Returns an estimation of the current Annual Percentage Rate"
      },
      "aprAfterDeposit(uint256)": {
        "notice": "Returns an estimation of the current Annual Percentage Rate after a new deposit of `amount`"
      },
      "changeAllowance(address[],address[],uint256[])": {
        "notice": "Changes allowance of a set of tokens to addresses"
      },
      "deposit()": {
        "notice": "Deposits the current balance of the contract to the lending platform"
      },
      "emergencyWithdraw(uint256)": {
        "notice": "Withdraws as much as possible in case of emergency and sends it to the `PoolManager`"
      },
      "hasAssets()": {
        "notice": "Check if assets are currently managed by the lender"
      },
      "initialize(address,string,address,address[],address,address[])": {
        "notice": "Initializer of the `GenericCompound`"
      },
      "nav()": {
        "notice": "Helper function to get the current total of assets managed by the lender."
      },
      "poolManager()": {
        "notice": "Reference to the protocol's collateral poolManager"
      },
      "recoverETH(address,uint256)": {
        "notice": "Recovers ETH from the contract"
      },
      "sellRewards(uint256,bytes)": {
        "notice": "Swap earned _stkAave or Aave for `want` through 1Inch"
      },
      "setDust(uint256)": {
        "notice": "Allow to modify the dust amount"
      },
      "strategy()": {
        "notice": "Reference to the `Strategy`"
      },
      "sweep(address,address)": {
        "notice": "Removes tokens from this Strategy that are not the type of tokens managed by this Strategy. This may be used in case of accidentally sending the wrong kind of token to this Strategy. Tokens will be sent to `governance()`. This will fail if an attempt is made to sweep `want`, or any tokens that are protected by this Strategy. This may only be called by governance."
      },
      "underlyingBalanceStored()": {
        "notice": "Helper function the current balance of cTokens"
      },
      "want()": {
        "notice": "Reference to the token lent"
      },
      "wantBase()": {
        "notice": "Base of the asset handled by the lender"
      },
      "weightedApr()": {
        "notice": "Returns an estimation of the current Annual Percentage Rate weighted by a factor"
      },
      "withdraw(uint256)": {
        "notice": "Withdraws a given amount from lender"
      },
      "withdrawAll()": {
        "notice": "Withdraws as much as possible from the lending platform"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 52,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericCompoundUpgradeable.sol:GenericCompoundUpgradeable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 55,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericCompoundUpgradeable.sol:GenericCompoundUpgradeable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4126,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericCompoundUpgradeable.sol:GenericCompoundUpgradeable",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4121_storage)"
      },
      {
        "astId": 4412,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericCompoundUpgradeable.sol:GenericCompoundUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 19996,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericCompoundUpgradeable.sol:GenericCompoundUpgradeable",
        "label": "lenderName",
        "offset": 0,
        "slot": "51",
        "type": "t_string_storage"
      },
      {
        "astId": 20000,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericCompoundUpgradeable.sol:GenericCompoundUpgradeable",
        "label": "poolManager",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(IPoolManager)4761"
      },
      {
        "astId": 20004,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericCompoundUpgradeable.sol:GenericCompoundUpgradeable",
        "label": "strategy",
        "offset": 0,
        "slot": "53",
        "type": "t_address"
      },
      {
        "astId": 20008,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericCompoundUpgradeable.sol:GenericCompoundUpgradeable",
        "label": "want",
        "offset": 0,
        "slot": "54",
        "type": "t_contract(IERC20)2114"
      },
      {
        "astId": 20011,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericCompoundUpgradeable.sol:GenericCompoundUpgradeable",
        "label": "wantBase",
        "offset": 0,
        "slot": "55",
        "type": "t_uint256"
      },
      {
        "astId": 20015,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericCompoundUpgradeable.sol:GenericCompoundUpgradeable",
        "label": "__gapBaseLender",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 19256,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericCompoundUpgradeable.sol:GenericCompoundUpgradeable",
        "label": "cToken",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(CErc20I)6064"
      },
      {
        "astId": 19258,
        "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericCompoundUpgradeable.sol:GenericCompoundUpgradeable",
        "label": "dust",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(CErc20I)6064": {
        "encoding": "inplace",
        "label": "contract CErc20I",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2114": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolManager)4761": {
        "encoding": "inplace",
        "label": "contract IPoolManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4121_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlAngleUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4121_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)4121_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlAngleUpgradeable.RoleData",
        "members": [
          {
            "astId": 4118,
            "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericCompoundUpgradeable.sol:GenericCompoundUpgradeable",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 4120,
            "contract": "contracts/strategies/OptimizerAPR/genericLender/GenericCompoundUpgradeable.sol:GenericCompoundUpgradeable",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}