{
  "address": "0x3899D92041401eB127886689924d637Fc28a5B6F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [],
      "name": "EmergencyExitActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loss",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtPayment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtOutstanding",
          "type": "uint256"
        }
      ],
      "name": "Harvested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtThreshold",
          "type": "uint256"
        }
      ],
      "name": "UpdatedDebtThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "activated",
          "type": "bool"
        }
      ],
      "name": "UpdatedIsRewardActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delay",
          "type": "uint256"
        }
      ],
      "name": "UpdatedMaxReportDelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delay",
          "type": "uint256"
        }
      ],
      "name": "UpdatedMinReportDelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_rewardAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minimumAmountMoved",
          "type": "uint256"
        }
      ],
      "name": "UpdatedRewardAmountAndMinimumAmountMoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewards",
          "type": "address"
        }
      ],
      "name": "UpdatedRewards",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GUARDIAN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "KEEPER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOLMANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECONDSPERYEAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_guardian",
          "type": "address"
        }
      ],
      "name": "addGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "apr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyExit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimatedAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimatedTotalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "borrowInit",
          "type": "uint256"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "governor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "keepers",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_stableSwapSTETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "contract ISteth",
          "name": "_stETH",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_apr",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "invest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSingleTrade",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolManager",
      "outputs": [
        {
          "internalType": "contract IPoolManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rescueStuckEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "revokeGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_apr",
          "type": "uint256"
        }
      ],
      "name": "setApr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtThreshold",
          "type": "uint256"
        }
      ],
      "name": "setDebtThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setEmergencyExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippageProtectionOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stETH",
      "outputs": [
        {
          "internalType": "contract ISteth",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableSwapSTETH",
      "outputs": [
        {
          "internalType": "contract IStableSwapPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stethBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSingleTrade",
          "type": "uint256"
        }
      ],
      "name": "updateMaxSingleTrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newReferral",
          "type": "address"
        }
      ],
      "name": "updateReferral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_slippageProtectionOut",
          "type": "uint256"
        }
      ],
      "name": "updateSlippageProtectionOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wantBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wantBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IWETH9",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountNeeded",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountFreed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loss",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x21828bc23452127a76f3b8a4af9413494b823769d9b05c4a90f9e1111c8bd61b",
  "receipt": {
    "to": null,
    "from": "0xfdA462548Ce04282f4B6D6619823a7C64Fdc0185",
    "contractAddress": "0x3899D92041401eB127886689924d637Fc28a5B6F",
    "transactionIndex": 219,
    "gasUsed": "2529066",
    "logsBloom": "0x
    "blockHash": "0xf9c918aa712b7516b118a0b1d2975f13d95582451ab1620609b9c73d97391c80",
    "transactionHash": "0x21828bc23452127a76f3b8a4af9413494b823769d9b05c4a90f9e1111c8bd61b",
    "logs": [],
    "blockNumber": 14660241,
    "cumulativeGasUsed": "15045233",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9094c892ceec1568a20f6e248d614272",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyExitActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtOutstanding\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtThreshold\",\"type\":\"uint256\"}],\"name\":\"UpdatedDebtThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"name\":\"UpdatedIsRewardActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxReportDelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinReportDelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minimumAmountMoved\",\"type\":\"uint256\"}],\"name\":\"UpdatedRewardAmountAndMinimumAmountMoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"}],\"name\":\"UpdatedRewards\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KEEPER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOLMANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDSPERYEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"addGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedTotalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowInit\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"keepers\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_stableSwapSTETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"contract ISteth\",\"name\":\"_stETH\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_apr\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSingleTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueStuckEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"revokeGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_apr\",\"type\":\"uint256\"}],\"name\":\"setApr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtThreshold\",\"type\":\"uint256\"}],\"name\":\"setDebtThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageProtectionOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stETH\",\"outputs\":[{\"internalType\":\"contract ISteth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableSwapSTETH\",\"outputs\":[{\"internalType\":\"contract IStableSwapPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stethBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSingleTrade\",\"type\":\"uint256\"}],\"name\":\"updateMaxSingleTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReferral\",\"type\":\"address\"}],\"name\":\"updateReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippageProtectionOut\",\"type\":\"uint256\"}],\"name\":\"updateSlippageProtectionOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountNeeded\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountFreed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Forked from https://github.com/Grandthrax/yearn-steth-acc/blob/master/contracts/Strategy.sol\",\"kind\":\"dev\",\"methods\":{\"addGuardian(address)\":{\"details\":\"This internal function has to be put in this file because `AccessControl` is not defined in `PoolManagerInternal`\",\"params\":{\"_guardian\":\"New guardian address\"}},\"estimatedTotalAssets()\":{\"details\":\"We are purposely treating stETH and ETH as being equivalent. This is for a few reasons. The main one is that we do not have a good way to value stETH at any current time without creating exploit routes. Currently you can mint eth for steth but can't burn steth for eth so need to sell. Once eth 2.0 is merged you will be able to burn 1-1 as well. The main downside here is that we will noramlly overvalue our position as we expect stETH to trade slightly below peg. That means we will earn profit on deposits and take losses on withdrawals. This may sound scary but it is the equivalent of using virtualprice in a curve lp. As we have seen from many exploits, virtual pricing is safer than touch pricing.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"harvest(uint256)\":{\"params\":{\"borrowInit\":\"Approximate optimal borrows to have faster convergence on the NR method\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,address,address[],address,address,address,uint256)\":{\"params\":{\"_apr\":\"Estimated apr on staked ETH\",\"_poolManager\":\"Address of the `PoolManager` lending to this strategy\",\"_stETH\":\"Address of the stETH token\",\"_stableSwapSTETH\":\"Address of the stETH/ETH Curve pool\",\"_weth\":\"Address of wETH\",\"governor\":\"Address of the governance multisig with governor privilege\",\"guardian\":\"Address of the guardian\",\"keepers\":\"List of addresses of keepers\"}},\"invest(uint256)\":{\"details\":\"This function allows to override the behavior that could be obtained through `harvest` calls\",\"params\":{\"_amount\":\"Amount to invest\"}},\"isActive()\":{\"returns\":{\"_0\":\"True if the strategy is actively managing a position.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"rescueStuckEth()\":{\"details\":\"This strategy should never have stuck eth, but let it just in case\"},\"revokeGuardian(address)\":{\"params\":{\"guardian\":\"Old guardian address to revoke\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setApr(uint256)\":{\"params\":{\"_apr\":\"New strategy APR\"}},\"setDebtThreshold(uint256)\":{\"details\":\"By default this is 0, meaning any losses would cause a harvest which will subsequently report the loss to the Manager for tracking.\",\"params\":{\"_debtThreshold\":\"How big of a loss this Strategy may carry without\"}},\"setEmergencyExit()\":{\"details\":\"This may only be called by the `PoolManager`, because when calling this the `PoolManager` should at the same time update the debt ratioThis function can only be called once by the `PoolManager` contractSee `poolManager.setEmergencyExit()` and `harvest()` for further details.\"},\"sweep(address,address)\":{\"details\":\"Implement `_protectedTokens()` to specify any additional tokens that should be protected from sweeping in addition to `want`.\",\"params\":{\"_token\":\"The token to transfer out of this `PoolManager`.\",\"to\":\"Address to send the tokens to.\"}},\"updateMaxSingleTrade(uint256)\":{\"params\":{\"_maxSingleTrade\":\"New `maxSingleTrade` value\"}},\"updateReferral(address)\":{\"params\":{\"newReferral\":\"Address of the new referral\"}},\"updateSlippageProtectionOut(uint256)\":{\"params\":{\"_slippageProtectionOut\":\"New slippage protection parameter\"}},\"withdraw(uint256)\":{\"details\":\"This may only be called by the `PoolManager`\",\"params\":{\"_amountNeeded\":\"How much `want` to withdraw.\"},\"returns\":{\"_loss\":\"Any realized losses\",\"amountFreed\":\"How much `want` withdrawn.\"}}},\"title\":\"StrategyStETHAcc\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DENOMINATOR()\":{\"notice\":\"Parameter used for slippage protection\"},\"GUARDIAN_ROLE()\":{\"notice\":\"Role for guardians and governors\"},\"KEEPER_ROLE()\":{\"notice\":\"Role for keepers\"},\"POOLMANAGER_ROLE()\":{\"notice\":\"Role for `PoolManager` only\"},\"addGuardian(address)\":{\"notice\":\"Adds a new guardian address and echoes the change to the contracts that interact with this collateral `PoolManager`\"},\"apr()\":{\"notice\":\"Current `apr` of the strategy: this apr needs to be manually filled by the strategist and updated when Lido's APR changes. It is put like that as there is no easy way to compute Lido's APR on-chainBase used is `BASE_PARAMS`\"},\"debtThreshold()\":{\"notice\":\"Use this to adjust the threshold at which running a debt causes a harvest trigger. See `setDebtThreshold()` for more details\"},\"emergencyExit()\":{\"notice\":\"See note on `setEmergencyExit()`\"},\"estimatedAPR()\":{\"notice\":\"The ETH APR of owning stETH\"},\"estimatedTotalAssets()\":{\"notice\":\"View function to check the total assets managed by the strategy\"},\"harvest()\":{\"notice\":\"Harvests the Strategy, recognizing any profits or losses and adjusting the Strategy's position.\"},\"harvest(uint256)\":{\"notice\":\"Harvests the Strategy, recognizing any profits or losses and adjusting the Strategy's position.\"},\"initialize(address,address,address,address[],address,address,address,uint256)\":{\"notice\":\"Constructor of the `Strategy`\"},\"invest(uint256)\":{\"notice\":\"Invests `_amount` in stETH\"},\"isActive()\":{\"notice\":\"Provides an indication of whether this strategy is currently \\\"active\\\" in that it is managing an active position, or will manage a position in the future. This should correlate to `harvest()` activity, so that Harvest events can be tracked externally by indexing agents.\"},\"maxSingleTrade()\":{\"notice\":\"Maximum trade size within the strategy\"},\"poolManager()\":{\"notice\":\"Reference to the protocol's collateral `PoolManager`\"},\"rescueStuckEth()\":{\"notice\":\"Rescues stuck ETH from the strategy\"},\"revokeGuardian(address)\":{\"notice\":\"Revokes the guardian role and propagates the change to other contracts\"},\"setApr(uint256)\":{\"notice\":\"Changes the estimated APR of the strategy\"},\"setDebtThreshold(uint256)\":{\"notice\":\"Sets how far the Strategy can go into loss without a harvest and report being required.\"},\"setEmergencyExit()\":{\"notice\":\"Activates emergency exit. Once activated, the Strategy will exit its position upon the next harvest, depositing all funds into the Manager as quickly as is reasonable given on-chain conditions.\"},\"slippageProtectionOut()\":{\"notice\":\"Slippage parameter for the swaps on Curve: out of `DENOMINATOR`\"},\"stETH()\":{\"notice\":\"Reference to the stETH token\"},\"stableSwapSTETH()\":{\"notice\":\"Reference to the Curve ETH/stETH\"},\"stethBalance()\":{\"notice\":\"Returns the stETH balance of the strategy\"},\"sweep(address,address)\":{\"notice\":\"Removes tokens from this Strategy that are not the type of tokens managed by this Strategy. This may be used in case of accidentally sending the wrong kind of token to this Strategy. Tokens will be sent to `governance()`. This will fail if an attempt is made to sweep `want`, or any tokens that are protected by this Strategy. This may only be called by governance.\"},\"updateMaxSingleTrade(uint256)\":{\"notice\":\"Updates the size of a trade in the strategy\"},\"updateReferral(address)\":{\"notice\":\"Updates the referral code for Lido\"},\"updateSlippageProtectionOut(uint256)\":{\"notice\":\"Updates the maximum slippage protection parameter\"},\"want()\":{\"notice\":\"Reference to the ERC20 farmed by this strategy\"},\"wantBalance()\":{\"notice\":\"Returns the wETH balance of the strategy\"},\"wantBase()\":{\"notice\":\"Base of the ERC20 token farmed by this strategy\"},\"weth()\":{\"notice\":\"Reference to wETH, it should normally be equal to `want`\"},\"withdraw(uint256)\":{\"notice\":\"Withdraws `_amountNeeded` to `poolManager`.\"}},\"notice\":\"A strategy designed to getting yield on wETH by putting ETH in Lido or Curve for stETH and exiting for wETH\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/StETHStrategy/StETHStrategy.sol\":\"StETHStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":3000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/external/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"../interfaces/IAccessControl.sol\\\";\\n\\n/**\\n * @dev This contract is fully forked from OpenZeppelin `AccessControl`.\\n * The only difference is the removal of the ERC165 implementation as it's not\\n * needed in Angle.\\n *\\n * Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external override {\\n        require(account == _msgSender(), \\\"71\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ae1725def0cbad87005037679fcdf49459205b16034705beeac26559c9e3940\",\"license\":\"GPL-3.0\"},\"contracts/external/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IAccessControl.sol\\\";\\n\\n/**\\n * @dev This contract is fully forked from OpenZeppelin `AccessControlUpgradeable`.\\n * The only difference is the removal of the ERC165 implementation as it's not\\n * needed in Angle.\\n *\\n * Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, IAccessControl {\\n    function __AccessControl_init() internal initializer {\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {}\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external override {\\n        require(account == msg.sender, \\\"71\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x7f9bbb4d4ca9e2d1273ed75898d3c58a420c815141073442702dd4802ee05173\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n/// @title IAccessControl\\n/// @author Forked from OpenZeppelin\\n/// @notice Interface for `AccessControl` contracts\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xf4b6095d073552df8ee9bada21ee73732ad53ba5051274a52decd9d51a07f7c8\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n// Struct for the parameters associated to a strategy interacting with a collateral `PoolManager`\\n// contract\\nstruct StrategyParams {\\n    // Timestamp of last report made by this strategy\\n    // It is also used to check if a strategy has been initialized\\n    uint256 lastReport;\\n    // Total amount the strategy is expected to have\\n    uint256 totalStrategyDebt;\\n    // The share of the total assets in the `PoolManager` contract that the `strategy` can access to.\\n    uint256 debtRatio;\\n}\\n\\n/// @title IPoolManagerFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the collateral poolManager contracts handling each one type of collateral for\\n/// a given stablecoin\\n/// @dev Only the functions used in other contracts of the protocol are left here\\ninterface IPoolManagerFunctions {\\n    // ============================ Yield Farming ==================================\\n\\n    function creditAvailable() external view returns (uint256);\\n\\n    function debtOutstanding() external view returns (uint256);\\n\\n    function report(\\n        uint256 _gain,\\n        uint256 _loss,\\n        uint256 _debtPayment\\n    ) external;\\n\\n    // ============================= Getters =======================================\\n\\n    function getBalance() external view returns (uint256);\\n\\n    function getTotalAsset() external view returns (uint256);\\n}\\n\\n/// @title IPoolManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\n/// @dev Used in other contracts of the protocol\\ninterface IPoolManager is IPoolManagerFunctions {\\n    function stableMaster() external view returns (address);\\n\\n    function perpetualManager() external view returns (address);\\n\\n    function token() external view returns (address);\\n\\n    function totalDebt() external view returns (uint256);\\n\\n    function strategies(address _strategy) external view returns (StrategyParams memory);\\n}\\n\",\"keccak256\":\"0xc51d60159971c6a15c6cc1511eceb416927f702c2c39ab20cfcab27b152e07b3\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title IStrategy\\n/// @author Inspired by Yearn with slight changes from Angle Core Team\\n/// @notice Interface for yield farming strategies\\ninterface IStrategy is IAccessControl {\\n    function estimatedAPR() external view returns (uint256);\\n\\n    function poolManager() external view returns (address);\\n\\n    function want() external view returns (address);\\n\\n    function isActive() external view returns (bool);\\n\\n    function estimatedTotalAssets() external view returns (uint256);\\n\\n    function harvestTrigger(uint256 callCost) external view returns (bool);\\n\\n    function harvest() external;\\n\\n    function withdraw(uint256 _amountNeeded) external returns (uint256 amountFreed, uint256 _loss);\\n\\n    function setEmergencyExit() external;\\n\\n    function addGuardian(address _guardian) external;\\n\\n    function revokeGuardian(address _guardian) external;\\n}\\n\",\"keccak256\":\"0x13a586a42415bea2ccc785f2bfc1be33b52d7a21c359edc21381ac28f31aa21e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x2f029415098419837fd589c2bced66a1c75f8522d167f7879d0c9bf9d94777ea\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/external/curve/IStableSwapPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// this interface doesn't wok with 3Pool as it doesn't return anything on add_liquidity, remove_liquidity_one_coin\\n\\ninterface IStableSwapPool is IERC20 {\\n    function A() external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function calc_token_amount(uint256[3] memory amounts, bool deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount) external returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external payable;\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] memory min_amounts) external;\\n\\n    function remove_liquidity_imbalance(uint256[3] memory amounts, uint256 max_burn_amount) external;\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x39f94105fa4bf555a9b8713577ce3f44b711ea2f75398f99c703e1b10a0f9312\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/lido/ISteth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISteth is IERC20 {\\n    event Submitted(address sender, uint256 amount, address referral);\\n\\n    function submit(address) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0xb65a7f556ccecdfb0e9ea23ac9a8d27a5ab7b95f57c05daad5abbec2bf049d39\",\"license\":\"MIT\"},\"contracts/strategies/BaseStrategyEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../external/AccessControl.sol\\\";\\nimport \\\"../external/AccessControlUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"../interfaces/IPoolManager.sol\\\";\\n\\n/// @title BaseStrategyEvents\\n/// @author Angle Core Team\\n/// @notice Events used in the abstract `BaseStrategy` contract\\ncontract BaseStrategyEvents {\\n    // So indexers can keep track of this\\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\\n\\n    event UpdatedMinReportDelayed(uint256 delay);\\n\\n    event UpdatedMaxReportDelayed(uint256 delay);\\n\\n    event UpdatedDebtThreshold(uint256 debtThreshold);\\n\\n    event UpdatedRewards(address rewards);\\n\\n    event UpdatedIsRewardActivated(bool activated);\\n\\n    event UpdatedRewardAmountAndMinimumAmountMoved(uint256 _rewardAmount, uint256 _minimumAmountMoved);\\n\\n    event EmergencyExitActivated();\\n}\\n\",\"keccak256\":\"0xe7990f74c41ab47aa9ce79e6bcaf6e1af94e7573a13f77e67c28ee3e1e576707\",\"license\":\"GPL-3.0\"},\"contracts/strategies/BaseStrategyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"./BaseStrategyEvents.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/// @title BaseStrategyUpgradeable\\n/// @author Forked from https://github.com/yearn/yearn-managers/blob/master/contracts/BaseStrategy.sol\\n/// @notice `BaseStrategyUpgradeable` implements all of the required functionalities to interoperate\\n/// with the `PoolManager` Contract.\\n/// @dev This contract should be inherited and the abstract methods implemented to adapt the `Strategy`\\n/// to the particular needs it has to create a return.\\nabstract contract BaseStrategyUpgradeable is BaseStrategyEvents, AccessControlUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant BASE = 10**18;\\n    uint256 public constant SECONDSPERYEAR = 31556952;\\n\\n    /// @notice Role for `PoolManager` only\\n    bytes32 public constant POOLMANAGER_ROLE = keccak256(\\\"POOLMANAGER_ROLE\\\");\\n    /// @notice Role for guardians and governors\\n    bytes32 public constant GUARDIAN_ROLE = keccak256(\\\"GUARDIAN_ROLE\\\");\\n    /// @notice Role for keepers\\n    bytes32 public constant KEEPER_ROLE = keccak256(\\\"KEEPER_ROLE\\\");\\n\\n    // ======================== References to contracts ============================\\n\\n    /// @notice Reference to the protocol's collateral `PoolManager`\\n    IPoolManager public poolManager;\\n\\n    /// @notice Reference to the ERC20 farmed by this strategy\\n    IERC20 public want;\\n\\n    /// @notice Base of the ERC20 token farmed by this strategy\\n    uint256 public wantBase;\\n\\n    // ============================ Parameters =====================================\\n\\n    /// @notice Use this to adjust the threshold at which running a debt causes a\\n    /// harvest trigger. See `setDebtThreshold()` for more details\\n    uint256 public debtThreshold;\\n\\n    /// @notice See note on `setEmergencyExit()`\\n    bool public emergencyExit;\\n\\n    // ============================ Constructor ====================================\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    /// @notice Constructor of the `BaseStrategyUpgradeable`\\n    /// @param _poolManager Address of the `PoolManager` lending collateral to this strategy\\n    /// @param governor Governor address of the protocol\\n    /// @param guardian Address of the guardian\\n    function _initialize(\\n        address _poolManager,\\n        address governor,\\n        address guardian,\\n        address[] memory keepers\\n    ) internal initializer {\\n        poolManager = IPoolManager(_poolManager);\\n        want = IERC20(poolManager.token());\\n        wantBase = 10**(IERC20Metadata(address(want)).decimals());\\n        require(guardian != address(0) && governor != address(0) && governor != guardian, \\\"0\\\");\\n        // AccessControl\\n        // Governor is guardian so no need for a governor role\\n        _setupRole(GUARDIAN_ROLE, guardian);\\n        _setupRole(GUARDIAN_ROLE, governor);\\n        _setupRole(POOLMANAGER_ROLE, address(_poolManager));\\n        _setRoleAdmin(POOLMANAGER_ROLE, POOLMANAGER_ROLE);\\n        _setRoleAdmin(GUARDIAN_ROLE, POOLMANAGER_ROLE);\\n\\n        // Initializing roles first\\n        for (uint256 i = 0; i < keepers.length; i++) {\\n            require(keepers[i] != address(0), \\\"0\\\");\\n            _setupRole(KEEPER_ROLE, keepers[i]);\\n        }\\n        _setRoleAdmin(KEEPER_ROLE, GUARDIAN_ROLE);\\n\\n        debtThreshold = 100 * BASE;\\n        emergencyExit = false;\\n        // Give `PoolManager` unlimited access (might save gas)\\n        want.safeIncreaseAllowance(address(poolManager), type(uint256).max);\\n    }\\n\\n    // ========================== Core functions ===================================\\n\\n    /// @notice Harvests the Strategy, recognizing any profits or losses and adjusting\\n    /// the Strategy's position.\\n    function harvest() external {\\n        _report();\\n        // Check if free returns are left, and re-invest them\\n        _adjustPosition();\\n    }\\n\\n    /// @notice Harvests the Strategy, recognizing any profits or losses and adjusting\\n    /// the Strategy's position.\\n    /// @param borrowInit Approximate optimal borrows to have faster convergence on the NR method\\n    function harvest(uint256 borrowInit) external onlyRole(KEEPER_ROLE) {\\n        _report();\\n        // Check if free returns are left, and re-invest them, gives an hint on the borrow amount to the NR method\\n        // to maximise revenue\\n        _adjustPosition(borrowInit);\\n    }\\n\\n    /// @notice Withdraws `_amountNeeded` to `poolManager`.\\n    /// @param _amountNeeded How much `want` to withdraw.\\n    /// @return amountFreed How much `want` withdrawn.\\n    /// @return _loss Any realized losses\\n    /// @dev This may only be called by the `PoolManager`\\n    function withdraw(uint256 _amountNeeded)\\n        external\\n        onlyRole(POOLMANAGER_ROLE)\\n        returns (uint256 amountFreed, uint256 _loss)\\n    {\\n        // Liquidate as much as possible `want` (up to `_amountNeeded`)\\n        (amountFreed, _loss) = _liquidatePosition(_amountNeeded);\\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\\n        want.safeTransfer(msg.sender, amountFreed);\\n        // NOTE: Reinvest anything leftover on next `tend`/`harvest`\\n    }\\n\\n    // ============================ View functions =================================\\n\\n    /// @notice Provides an accurate estimate for the total amount of assets\\n    /// (principle + return) that this Strategy is currently managing,\\n    /// denominated in terms of `want` tokens.\\n    /// This total should be \\\"realizable\\\" e.g. the total value that could\\n    /// *actually* be obtained from this Strategy if it were to divest its\\n    /// entire position based on current on-chain conditions.\\n    /// @return The estimated total assets in this Strategy.\\n    /// @dev Care must be taken in using this function, since it relies on external\\n    /// systems, which could be manipulated by the attacker to give an inflated\\n    /// (or reduced) value produced by this function, based on current on-chain\\n    /// conditions (e.g. this function is possible to influence through\\n    /// flashloan attacks, oracle manipulations, or other DeFi attack\\n    /// mechanisms).\\n    function estimatedTotalAssets() public view virtual returns (uint256);\\n\\n    /// @notice Provides an indication of whether this strategy is currently \\\"active\\\"\\n    /// in that it is managing an active position, or will manage a position in\\n    /// the future. This should correlate to `harvest()` activity, so that Harvest\\n    /// events can be tracked externally by indexing agents.\\n    /// @return True if the strategy is actively managing a position.\\n    function isActive() public view returns (bool) {\\n        return estimatedTotalAssets() > 0;\\n    }\\n\\n    // ============================ Internal Functions =============================\\n\\n    /// @notice PrepareReturn the Strategy, recognizing any profits or losses\\n    /// @dev In the rare case the Strategy is in emergency shutdown, this will exit\\n    /// the Strategy's position.\\n    /// @dev  When `_report()` is called, the Strategy reports to the Manager (via\\n    /// `poolManager.report()`), so in some cases `harvest()` must be called in order\\n    /// to take in profits, to borrow newly available funds from the Manager, or\\n    /// otherwise adjust its position. In other cases `harvest()` must be\\n    /// called to report to the Manager on the Strategy's position, especially if\\n    /// any losses have occurred.\\n    /// @dev As keepers may directly profit from this function, there may be front-running problems with miners bots,\\n    /// we may have to put an access control logic for this function to only allow white-listed addresses to act\\n    /// as keepers for the protocol\\n    function _report() internal {\\n        uint256 profit = 0;\\n        uint256 loss = 0;\\n        uint256 debtOutstanding = poolManager.debtOutstanding();\\n        uint256 debtPayment = 0;\\n        if (emergencyExit) {\\n            // Free up as much capital as possible\\n            uint256 amountFreed = _liquidateAllPositions();\\n            if (amountFreed < debtOutstanding) {\\n                loss = debtOutstanding - amountFreed;\\n            } else if (amountFreed > debtOutstanding) {\\n                profit = amountFreed - debtOutstanding;\\n            }\\n            debtPayment = debtOutstanding - loss;\\n        } else {\\n            // Free up returns for Manager to pull\\n            (profit, loss, debtPayment) = _prepareReturn(debtOutstanding);\\n        }\\n        emit Harvested(profit, loss, debtPayment, debtOutstanding);\\n\\n        // Allows Manager to take up to the \\\"harvested\\\" balance of this contract,\\n        // which is the amount it has earned since the last time it reported to\\n        // the Manager.\\n        poolManager.report(profit, loss, debtPayment);\\n    }\\n\\n    /// @notice Performs any Strategy unwinding or other calls necessary to capture the\\n    /// \\\"free return\\\" this Strategy has generated since the last time its core\\n    /// position(s) were adjusted. Examples include unwrapping extra rewards.\\n    /// This call is only used during \\\"normal operation\\\" of a Strategy, and\\n    /// should be optimized to minimize losses as much as possible.\\n    ///\\n    /// This method returns any realized profits and/or realized losses\\n    /// incurred, and should return the total amounts of profits/losses/debt\\n    /// payments (in `want` tokens) for the Manager's accounting (e.g.\\n    /// `want.balanceOf(this) >= _debtPayment + _profit`).\\n    ///\\n    /// `_debtOutstanding` will be 0 if the Strategy is not past the configured\\n    /// debt limit, otherwise its value will be how far past the debt limit\\n    /// the Strategy is. The Strategy's debt limit is configured in the Manager.\\n    ///\\n    /// NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`.\\n    ///       It is okay for it to be less than `_debtOutstanding`, as that\\n    ///       should only used as a guide for how much is left to pay back.\\n    ///       Payments should be made to minimize loss from slippage, debt,\\n    ///       withdrawal fees, etc.\\n    ///\\n    /// See `poolManager.debtOutstanding()`.\\n    function _prepareReturn(uint256 _debtOutstanding)\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _debtPayment\\n        );\\n\\n    /// @notice Performs any adjustments to the core position(s) of this Strategy given\\n    /// what change the Manager made in the \\\"investable capital\\\" available to the\\n    /// Strategy. Note that all \\\"free capital\\\" in the Strategy after the report\\n    /// was made is available for reinvestment. Also note that this number\\n    /// could be 0, and you should handle that scenario accordingly.\\n    function _adjustPosition() internal virtual;\\n\\n    /// @notice same as _adjustPosition but with an initial parameters\\n    function _adjustPosition(uint256) internal virtual;\\n\\n    /// @notice Liquidates up to `_amountNeeded` of `want` of this strategy's positions,\\n    /// irregardless of slippage. Any excess will be re-invested with `_adjustPosition()`.\\n    /// This function should return the amount of `want` tokens made available by the\\n    /// liquidation. If there is a difference between them, `_loss` indicates whether the\\n    /// difference is due to a realized loss, or if there is some other sitution at play\\n    /// (e.g. locked funds) where the amount made available is less than what is needed.\\n    ///\\n    /// NOTE: The invariant `_liquidatedAmount + _loss <= _amountNeeded` should always be maintained\\n    function _liquidatePosition(uint256 _amountNeeded)\\n        internal\\n        virtual\\n        returns (uint256 _liquidatedAmount, uint256 _loss);\\n\\n    /// @notice Liquidates everything and returns the amount that got freed.\\n    /// This function is used during emergency exit instead of `_prepareReturn()` to\\n    /// liquidate all of the Strategy's positions back to the Manager.\\n    function _liquidateAllPositions() internal virtual returns (uint256 _amountFreed);\\n\\n    /// @notice Override this to add all tokens/tokenized positions this contract\\n    /// manages on a *persistent* basis (e.g. not just for swapping back to\\n    /// want ephemerally).\\n    ///\\n    /// NOTE: Do *not* include `want`, already included in `sweep` below.\\n    ///\\n    /// Example:\\n    /// ```\\n    ///    function _protectedTokens() internal override view returns (address[] memory) {\\n    ///      address[] memory protected = new address[](3);\\n    ///      protected[0] = tokenA;\\n    ///      protected[1] = tokenB;\\n    ///      protected[2] = tokenC;\\n    ///      return protected;\\n    ///    }\\n    /// ```\\n    function _protectedTokens() internal view virtual returns (address[] memory);\\n\\n    // ============================== Governance ===================================\\n\\n    /// @notice Activates emergency exit. Once activated, the Strategy will exit its\\n    /// position upon the next harvest, depositing all funds into the Manager as\\n    /// quickly as is reasonable given on-chain conditions.\\n    /// @dev This may only be called by the `PoolManager`, because when calling this the `PoolManager` should at the same\\n    /// time update the debt ratio\\n    /// @dev This function can only be called once by the `PoolManager` contract\\n    /// @dev See `poolManager.setEmergencyExit()` and `harvest()` for further details.\\n    function setEmergencyExit() external onlyRole(POOLMANAGER_ROLE) {\\n        emergencyExit = true;\\n        emit EmergencyExitActivated();\\n    }\\n\\n    /// @notice Sets how far the Strategy can go into loss without a harvest and report\\n    /// being required.\\n    /// @param _debtThreshold How big of a loss this Strategy may carry without\\n    /// @dev By default this is 0, meaning any losses would cause a harvest which\\n    /// will subsequently report the loss to the Manager for tracking.\\n    function setDebtThreshold(uint256 _debtThreshold) external onlyRole(GUARDIAN_ROLE) {\\n        debtThreshold = _debtThreshold;\\n        emit UpdatedDebtThreshold(_debtThreshold);\\n    }\\n\\n    /// @notice Removes tokens from this Strategy that are not the type of tokens\\n    /// managed by this Strategy. This may be used in case of accidentally\\n    /// sending the wrong kind of token to this Strategy.\\n    ///\\n    /// Tokens will be sent to `governance()`.\\n    ///\\n    /// This will fail if an attempt is made to sweep `want`, or any tokens\\n    /// that are protected by this Strategy.\\n    ///\\n    /// This may only be called by governance.\\n    /// @param _token The token to transfer out of this `PoolManager`.\\n    /// @param to Address to send the tokens to.\\n    /// @dev\\n    /// Implement `_protectedTokens()` to specify any additional tokens that\\n    /// should be protected from sweeping in addition to `want`.\\n    function sweep(address _token, address to) external onlyRole(GUARDIAN_ROLE) {\\n        require(_token != address(want), \\\"93\\\");\\n\\n        address[] memory __protectedTokens = _protectedTokens();\\n        for (uint256 i = 0; i < __protectedTokens.length; i++)\\n            // In the strategy we use so far, the only protectedToken is the want token\\n            // and this has been checked above\\n            require(_token != __protectedTokens[i], \\\"93\\\");\\n\\n        IERC20(_token).safeTransfer(to, IERC20(_token).balanceOf(address(this)));\\n    }\\n\\n    // ============================ Manager functions ==============================\\n\\n    /// @notice Adds a new guardian address and echoes the change to the contracts\\n    /// that interact with this collateral `PoolManager`\\n    /// @param _guardian New guardian address\\n    /// @dev This internal function has to be put in this file because Access Control is not defined\\n    /// in PoolManagerInternal\\n    function addGuardian(address _guardian) external virtual;\\n\\n    /// @notice Revokes the guardian role and propagates the change to other contracts\\n    /// @param guardian Old guardian address to revoke\\n    function revokeGuardian(address guardian) external virtual;\\n}\\n\",\"keccak256\":\"0x2af4e30a3ec77b64b0c15b554727af46dd931a6f09b9db292f8c5a511714873b\",\"license\":\"GPL-3.0\"},\"contracts/strategies/StETHStrategy/StETHStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"../../interfaces/external/curve/IStableSwapPool.sol\\\";\\nimport \\\"../../interfaces/external/lido/ISteth.sol\\\";\\nimport \\\"../../interfaces/external/IWETH9.sol\\\";\\nimport \\\"../BaseStrategyUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title StrategyStETHAcc\\n/// @author Forked from https://github.com/Grandthrax/yearn-steth-acc/blob/master/contracts/Strategy.sol\\n/// @notice A strategy designed to getting yield on wETH by putting ETH in Lido or Curve for stETH and exiting\\n/// for wETH\\ncontract StETHStrategy is BaseStrategyUpgradeable {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    /// @notice Current `apr` of the strategy: this apr needs to be manually filled by the strategist\\n    /// and updated when Lido's APR changes. It is put like that as there is no easy way to compute Lido's APR\\n    /// on-chain\\n    /// @notice Base used is `BASE_PARAMS`\\n    uint256 public apr;\\n\\n    /// @notice Reference to the Curve ETH/stETH\\n    IStableSwapPool public stableSwapSTETH;\\n    /// @notice Reference to wETH, it should normally be equal to `want`\\n    IWETH9 public weth;\\n    /// @notice Reference to the stETH token\\n    ISteth public stETH;\\n\\n    address private _referral = 0xdC4e6DFe07EFCa50a197DF15D9200883eF4Eb1c8; //stratms. for recycling and redepositing\\n    /// @notice Maximum trade size within the strategy\\n    uint256 public maxSingleTrade;\\n    /// @notice Parameter used for slippage protection\\n    uint256 public constant DENOMINATOR = 10_000;\\n    /// @notice Slippage parameter for the swaps on Curve: out of `DENOMINATOR`\\n    uint256 public slippageProtectionOut; // = 50; //out of 10000. 50 = 0.5%\\n\\n    /// @notice ID of ETH in the Curve pool\\n    int128 private constant _WETHID = 0;\\n    /// @notice ID of stETH in the Curve pool\\n    int128 private constant _STETHID = 1;\\n\\n    /// @notice Constructor of the `Strategy`\\n    /// @param _poolManager Address of the `PoolManager` lending to this strategy\\n    /// @param governor Address of the governance multisig with governor privilege\\n    /// @param guardian Address of the guardian\\n    /// @param keepers List of addresses of keepers\\n    /// @param _stableSwapSTETH Address of the stETH/ETH Curve pool\\n    /// @param _weth Address of wETH\\n    /// @param _stETH Address of the stETH token\\n    /// @param _apr Estimated apr on staked ETH\\n    function initialize(\\n        address _poolManager,\\n        address governor,\\n        address guardian,\\n        address[] memory keepers,\\n        address _stableSwapSTETH,\\n        address _weth,\\n        ISteth _stETH,\\n        uint256 _apr\\n    ) external {\\n        _initialize(_poolManager, governor, guardian, keepers);\\n        require(address(want) == _weth, \\\"20\\\");\\n        stableSwapSTETH = IStableSwapPool(_stableSwapSTETH);\\n        weth = IWETH9(_weth);\\n        stETH = ISteth(_stETH);\\n        apr = _apr;\\n        _stETH.approve(_stableSwapSTETH, type(uint256).max);\\n        maxSingleTrade = 10_000 * 1e18;\\n        slippageProtectionOut = 30;\\n    }\\n\\n    /// @notice This contract gets ETH and so it needs this function\\n    receive() external payable {}\\n\\n    // ========================== View Functions ===================================\\n\\n    /// @notice View function to check the total assets managed by the strategy\\n    /// @dev We are purposely treating stETH and ETH as being equivalent.\\n    /// This is for a few reasons. The main one is that we do not have a good way to value\\n    /// stETH at any current time without creating exploit routes.\\n    /// Currently you can mint eth for steth but can't burn steth for eth so need to sell.\\n    /// Once eth 2.0 is merged you will be able to burn 1-1 as well.\\n    /// The main downside here is that we will noramlly overvalue our position as we expect stETH\\n    /// to trade slightly below peg. That means we will earn profit on deposits and take losses on withdrawals.\\n    /// This may sound scary but it is the equivalent of using virtualprice in a curve lp.\\n    /// As we have seen from many exploits, virtual pricing is safer than touch pricing.\\n    function estimatedTotalAssets() public view override returns (uint256) {\\n        return stethBalance() + wantBalance();\\n    }\\n\\n    /// @notice Returns the wETH balance of the strategy\\n    function wantBalance() public view returns (uint256) {\\n        return want.balanceOf(address(this));\\n    }\\n\\n    /// @notice Returns the stETH balance of the strategy\\n    function stethBalance() public view returns (uint256) {\\n        return stETH.balanceOf(address(this));\\n    }\\n\\n    /// @notice The ETH APR of owning stETH\\n    function estimatedAPR() external view returns (uint256) {\\n        return apr;\\n    }\\n\\n    // ========================== Strategy Functions ===============================\\n\\n    /// @notice Frees up profit plus `_debtOutstanding`.\\n    /// @param _debtOutstanding Amount to withdraw\\n    /// @return _profit Profit freed by the call\\n    /// @return _loss Loss discovered by the call\\n    /// @return _debtPayment Amount freed to reimburse the debt: it is an amount made available for the `PoolManager`\\n    /// @dev If `_debtOutstanding` is more than we can free we get as much as possible.\\n    function _prepareReturn(uint256 _debtOutstanding)\\n        internal\\n        override\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _debtPayment\\n        )\\n    {\\n        uint256 wantBal = wantBalance();\\n        uint256 stethBal = stethBalance();\\n        uint256 totalAssets = wantBal + stethBal;\\n\\n        uint256 debt = poolManager.strategies(address(this)).totalStrategyDebt;\\n\\n        if (totalAssets >= debt) {\\n            _profit = totalAssets - debt;\\n\\n            uint256 toWithdraw = _profit + _debtOutstanding;\\n            // If more should be withdrawn than what's in the strategy: we divest from Curve\\n            if (toWithdraw > wantBal) {\\n                // We step our withdrawals. Adjust max single trade to withdraw more\\n                uint256 willWithdraw = Math.min(maxSingleTrade, toWithdraw - wantBal);\\n                uint256 withdrawn = _divest(willWithdraw);\\n                if (withdrawn < willWithdraw) {\\n                    _loss = willWithdraw - withdrawn;\\n                }\\n            }\\n            wantBal = wantBalance();\\n\\n            // Computing net off profit and loss\\n            if (_profit >= _loss) {\\n                _profit = _profit - _loss;\\n                _loss = 0;\\n            } else {\\n                _profit = 0;\\n                _loss = _loss - _profit;\\n            }\\n\\n            // profit + _debtOutstanding must be <= wantbalance. Prioritise profit first\\n            if (wantBal < _profit) {\\n                _profit = wantBal;\\n            } else if (wantBal < toWithdraw) {\\n                _debtPayment = wantBal - _profit;\\n            } else {\\n                _debtPayment = _debtOutstanding;\\n            }\\n        } else {\\n            _loss = debt - totalAssets;\\n        }\\n    }\\n\\n    /// @notice Liquidates everything and returns the amount that got freed.\\n    /// This function is used during emergency exit instead of `_prepareReturn()` to\\n    /// liquidate all of the Strategy's positions back to the Manager.\\n    function _liquidateAllPositions() internal override returns (uint256 _amountFreed) {\\n        _divest(stethBalance());\\n        _amountFreed = wantBalance();\\n    }\\n\\n    /// @notice Function called when harvesting to invest in stETH\\n    /// Function used in other contracts, in this strategy it is useless\\n    function _adjustPosition(uint256) internal override {\\n        _adjustPosition();\\n    }\\n\\n    /// @notice Function called when harvesting to invest in stETH\\n    function _adjustPosition() internal override {\\n        uint256 toInvest = wantBalance();\\n        if (toInvest > 0) {\\n            uint256 realInvest = Math.min(maxSingleTrade, toInvest);\\n            _invest(realInvest);\\n        }\\n    }\\n\\n    /// @notice Invests `_amount` wETH in stETH\\n    /// @param _amount Amount of wETH to put in stETH\\n    /// @return The amount of stETH received from the investment\\n    /// @dev This function chooses the optimal route between going to Lido directly or doing a swap on Curve\\n    /// @dev This function automatically wraps wETH to ETH\\n    function _invest(uint256 _amount) internal returns (uint256) {\\n        uint256 before = stethBalance();\\n        // Unwrapping the tokens\\n        weth.withdraw(_amount);\\n        // Test if we should buy from Curve instead of minting from Lido\\n        uint256 out = stableSwapSTETH.get_dy(_WETHID, _STETHID, _amount);\\n        if (out < _amount) {\\n            // If we get less than one stETH per wETH we use Lido\\n            stETH.submit{ value: _amount }(_referral);\\n        } else {\\n            // Otherwise, we do a Curve swap\\n            stableSwapSTETH.exchange{ value: _amount }(_WETHID, _STETHID, _amount, _amount);\\n        }\\n\\n        return stethBalance() - before;\\n    }\\n\\n    /// @notice Divests stETH on Curve and gets wETH back to the strategy in exchange\\n    /// @param _amount Amount of stETH to divest\\n    /// @dev Curve is the only place to convert stETH to ETH\\n    function _divest(uint256 _amount) internal returns (uint256) {\\n        uint256 before = wantBalance();\\n\\n        // Computing slippage protection for the swap\\n        uint256 slippageAllowance = (_amount * (DENOMINATOR - slippageProtectionOut)) / DENOMINATOR;\\n        // Curve swap\\n        stableSwapSTETH.exchange(_STETHID, _WETHID, _amount, slippageAllowance);\\n\\n        weth.deposit{ value: address(this).balance }();\\n\\n        return wantBalance() - before;\\n    }\\n\\n    /// @notice Attempts to withdraw `_amountNeeded` from the strategy and lets the user decide if they take the loss or not\\n    /// @param _amountNeeded Amount to withdraw from the strategy\\n    function _liquidatePosition(uint256 _amountNeeded)\\n        internal\\n        override\\n        returns (uint256 _liquidatedAmount, uint256 _loss)\\n    {\\n        uint256 wantBal = wantBalance();\\n        if (wantBal < _amountNeeded) {\\n            uint256 toWithdraw = _amountNeeded - wantBal;\\n            uint256 withdrawn = _divest(toWithdraw);\\n            if (withdrawn < toWithdraw) {\\n                _loss = toWithdraw - withdrawn;\\n            }\\n        }\\n\\n        _liquidatedAmount = _amountNeeded - _loss;\\n    }\\n\\n    // NOTE: Can override `tendTrigger` and `harvestTrigger` if necessary\\n\\n    // Override this to add all tokens/tokenized positions this contract manages\\n    // on a *persistent* basis (e.g. not just for swapping back to want ephemerally)\\n    // NOTE: Do *not* include `want`, already included in `sweep` below\\n    //\\n    // Example:\\n    //\\n    //    function _protectedTokens() internal override view returns (address[] memory) {\\n    //      address[] memory protected = new address[](3);\\n    //      protected[0] = tokenA;\\n    //      protected[1] = tokenB;\\n    //      protected[2] = tokenC;\\n    //      return protected;\\n    //    }\\n    function _protectedTokens() internal view override returns (address[] memory) {\\n        address[] memory protected = new address[](1);\\n        protected[0] = address(stETH);\\n\\n        return protected;\\n    }\\n\\n    // ============================ Governance =====================================\\n\\n    /// @notice Updates the referral code for Lido\\n    /// @param newReferral Address of the new referral\\n    function updateReferral(address newReferral) public onlyRole(GUARDIAN_ROLE) {\\n        _referral = newReferral;\\n    }\\n\\n    /// @notice Updates the size of a trade in the strategy\\n    /// @param _maxSingleTrade New `maxSingleTrade` value\\n    function updateMaxSingleTrade(uint256 _maxSingleTrade) public onlyRole(GUARDIAN_ROLE) {\\n        maxSingleTrade = _maxSingleTrade;\\n    }\\n\\n    /// @notice Changes the estimated APR of the strategy\\n    /// @param _apr New strategy APR\\n    function setApr(uint256 _apr) public onlyRole(GUARDIAN_ROLE) {\\n        apr = _apr;\\n    }\\n\\n    /// @notice Updates the maximum slippage protection parameter\\n    /// @param _slippageProtectionOut New slippage protection parameter\\n    function updateSlippageProtectionOut(uint256 _slippageProtectionOut) public onlyRole(GUARDIAN_ROLE) {\\n        slippageProtectionOut = _slippageProtectionOut;\\n    }\\n\\n    /// @notice Invests `_amount` in stETH\\n    /// @param _amount Amount to invest\\n    /// @dev This function allows to override the behavior that could be obtained through `harvest` calls\\n    function invest(uint256 _amount) external onlyRole(GUARDIAN_ROLE) {\\n        require(wantBalance() >= _amount);\\n        uint256 realInvest = Math.min(maxSingleTrade, _amount);\\n        _invest(realInvest);\\n    }\\n\\n    /// @notice Rescues stuck ETH from the strategy\\n    /// @dev This strategy should never have stuck eth, but let it just in case\\n    function rescueStuckEth() external onlyRole(GUARDIAN_ROLE) {\\n        weth.deposit{ value: address(this).balance }();\\n    }\\n\\n    // ========================== Manager functions ================================\\n\\n    /// @notice Adds a new guardian address and echoes the change to the contracts\\n    /// that interact with this collateral `PoolManager`\\n    /// @param _guardian New guardian address\\n    /// @dev This internal function has to be put in this file because `AccessControl` is not defined\\n    /// in `PoolManagerInternal`\\n    function addGuardian(address _guardian) external override onlyRole(POOLMANAGER_ROLE) {\\n        // Granting the new role\\n        // Access control for this contract\\n        _grantRole(GUARDIAN_ROLE, _guardian);\\n    }\\n\\n    /// @notice Revokes the guardian role and propagates the change to other contracts\\n    /// @param guardian Old guardian address to revoke\\n    function revokeGuardian(address guardian) external override onlyRole(POOLMANAGER_ROLE) {\\n        _revokeRole(GUARDIAN_ROLE, guardian);\\n    }\\n}\\n\",\"keccak256\":\"0x040dcc186e9e60b2df747e4536da60a07a0a8052463e2354ba3bd04844b4c010\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080604052603c80546001600160a01b03191673dc4e6dfe07efca50a197df15d9200883ef4eb1c81790553480156200003757600080fd5b50600054610100900460ff16620000555760005460ff16156200005f565b6200005f62000104565b620000c75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000ea576000805461ffff19166101011790555b8015620000fd576000805461ff00191690555b5062000131565b60006200011c306200012260201b6200115c1760201c565b15905090565b6001600160a01b03163b151590565b612c1680620001416000396000f3fe6080604052600436106102e05760003560e01c806357ded9c911610184578063b8dc491b116100d6578063dc4c90d31161008a578063ec342ad011610064578063ec342ad0146107f4578063efbb5cb014610810578063fcf2d0ad1461082557600080fd5b8063dc4c90d314610794578063ddc63262146107b4578063df426a5f146107d457600080fd5b8063c1fe3e48116100bb578063c1fe3e481461073e578063c90b65de1461075e578063d547741f1461077457600080fd5b8063b8dc491b14610708578063c1a1bb771461072857600080fd5b8063918f867411610138578063a526d83b11610112578063a526d83b146106b0578063af306e16146106d0578063af648c3d146106e857600080fd5b8063918f86741461066557806391d148541461067b578063a217fddf1461069b57600080fd5b80635a5cd45e116101695780635a5cd45e1461061b578063773f400e146106305780637b6466b21461065057600080fd5b806357ded9c9146105e557806359cee29c146105fb57600080fd5b80632e1a7d4d1161023d5780633aa06443116101f15780634641257d116101cb5780634641257d14610596578063510feb6e146105ab5780635641ec03146105cb57600080fd5b80633aa06443146105415780633b611e00146105615780633fc8cef31461057657600080fd5b806335f8e9a31161022257806335f8e9a3146104cd578063364bc15a146104ed57806336568abe1461052157600080fd5b80632e1a7d4d146104785780632f2ff15d146104ad57600080fd5b80631f1fcd5111610294578063248a9ca311610279578063248a9ca3146103f357806324ea54f4146104245780632afcf4801461045857600080fd5b80631f1fcd511461039657806322f3e2d4146103ce57600080fd5b80630f969b87116102c55780630f969b8714610349578063126f5c5e1461036b5780631d12f28b1461038057600080fd5b80630b6d1d17146102ec5780630c016dc01461031557600080fd5b366102e757005b600080fd5b3480156102f857600080fd5b5061030260355481565b6040519081526020015b60405180910390f35b34801561032157600080fd5b506103027f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe56281565b34801561035557600080fd5b50610369610364366004612624565b61083a565b005b34801561037757600080fd5b506103026108a1565b34801561038c57600080fd5b5061030260365481565b3480156103a257600080fd5b506034546103b6906001600160a01b031681565b6040516001600160a01b03909116815260200161030c565b3480156103da57600080fd5b506103e361092d565b604051901515815260200161030c565b3480156103ff57600080fd5b5061030261040e366004612624565b6000908152600160208190526040909120015490565b34801561043057600080fd5b506103027f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504181565b34801561046457600080fd5b50610369610473366004612624565b61093e565b34801561048457600080fd5b50610498610493366004612624565b61099c565b6040805192835260208301919091520161030c565b3480156104b957600080fd5b506103696104c8366004612662565b6109f5565b3480156104d957600080fd5b506103696104e83660046126d9565b610a21565b3480156104f957600080fd5b506103027ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab81565b34801561052d57600080fd5b5061036961053c366004612662565b610b89565b34801561054d57600080fd5b5061036961055c366004612624565b610bef565b34801561056d57600080fd5b50610369610c20565b34801561058257600080fd5b50603a546103b6906001600160a01b031681565b3480156105a257600080fd5b50610369610cb7565b3480156105b757600080fd5b506103696105c6366004612624565b610cc9565b3480156105d757600080fd5b506037546103e39060ff1681565b3480156105f157600080fd5b5061030260385481565b34801561060757600080fd5b50610369610616366004612624565b610cfa565b34801561062757600080fd5b50603854610302565b34801561063c57600080fd5b5061036961064b366004612801565b610d2b565b34801561065c57600080fd5b50610302610d91565b34801561067157600080fd5b5061030261271081565b34801561068757600080fd5b506103e3610696366004612662565b610ddb565b3480156106a757600080fd5b50610302600081565b3480156106bc57600080fd5b506103696106cb366004612801565b610e08565b3480156106dc57600080fd5b506103026301e1855881565b3480156106f457600080fd5b50610369610703366004612801565b610e5d565b34801561071457600080fd5b5061036961072336600461281e565b610eb2565b34801561073457600080fd5b50610302603d5481565b34801561074a57600080fd5b50603b546103b6906001600160a01b031681565b34801561076a57600080fd5b50610302603e5481565b34801561078057600080fd5b5061036961078f366004612662565b611079565b3480156107a057600080fd5b506033546103b6906001600160a01b031681565b3480156107c057600080fd5b506103696107cf366004612624565b6110a0565b3480156107e057600080fd5b506039546103b6906001600160a01b031681565b34801561080057600080fd5b50610302670de0b6b3a764000081565b34801561081c57600080fd5b506103026110dc565b34801561083157600080fd5b506103696110f8565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610865813361116b565b60368290556040518281527fa68ba126373d04c004c5748c300c9fca12bd444b3d4332e261f3bd2bac4a86009060200160405180910390a15050565b603b546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b0316906370a08231906024015b602060405180830381865afa158015610904573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610928919061284c565b905090565b6000806109386110dc565b11905090565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610969813361116b565b81610972610d91565b101561097d57600080fd5b600061098b603d54846111cf565b9050610996816111e7565b50505050565b6000807f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe5626109ca813361116b565b6109d384611448565b60345491945092506109ef906001600160a01b031633856114a4565b50915091565b60008281526001602081905260409091200154610a12813361116b565b610a1c838361154d565b505050565b610a2d888888886115b8565b6034546001600160a01b03848116911614610a8f5760405162461bcd60e51b815260206004820152600260248201527f323000000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b603980547fffffffffffffffffffffffff00000000000000000000000000000000000000009081166001600160a01b03878116918217909355603a80548316878516179055603b805490921692851692831790915560388390556040517f095ea7b30000000000000000000000000000000000000000000000000000000081526004810191909152600019602482015263095ea7b3906044016020604051808303816000875af1158015610b47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6b9190612865565b505069021e19e0c9bab2400000603d555050601e603e555050505050565b6001600160a01b0381163314610be15760405162461bcd60e51b815260206004820152600260248201527f37310000000000000000000000000000000000000000000000000000000000006044820152606401610a86565b610beb8282611b0c565b5050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610c1a813361116b565b50603d55565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610c4b813361116b565b603a60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b158015610c9b57600080fd5b505af1158015610caf573d6000803e3d6000fd5b505050505050565b610cbf611b73565b610cc7611d30565b565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610cf4813361116b565b50603e55565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610d25813361116b565b50603855565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610d56813361116b565b50603c80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6034546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b0316906370a08231906024016108e7565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b7f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe562610e33813361116b565b610beb7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50418361154d565b7f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe562610e88813361116b565b610beb7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504183611b0c565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610edd813361116b565b6034546001600160a01b0384811691161415610f3b5760405162461bcd60e51b815260206004820152600260248201527f39330000000000000000000000000000000000000000000000000000000000006044820152606401610a86565b6000610f45611d5e565b905060005b8151811015610fe057818181518110610f6557610f65612887565b60200260200101516001600160a01b0316856001600160a01b03161415610fce5760405162461bcd60e51b815260206004820152600260248201527f39330000000000000000000000000000000000000000000000000000000000006044820152606401610a86565b80610fd8816128b3565b915050610f4a565b506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526109969084906001600160a01b038716906370a0823190602401602060405180830381865afa158015611044573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611068919061284c565b6001600160a01b03871691906114a4565b60008281526001602081905260409091200154611096813361116b565b610a1c8383611b0c565b7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab6110cb813361116b565b6110d3611b73565b610beb82611dc1565b60006110e6610d91565b6110ee6108a1565b61092891906128ce565b7f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe562611123813361116b565b6037805460ff191660011790556040517f17fa25a1c2ac074f71f0cf4f6af525c06fab7d83eff5ffcf6df5277f2919ae2490600090a150565b6001600160a01b03163b151590565b6111758282610ddb565b610beb5761118d816001600160a01b03166014611dc9565b611198836020611dc9565b6040516020016111a9929190612912565b60408051601f198184030181529082905262461bcd60e51b8252610a8691600401612993565b60008183106111de57816111e0565b825b9392505050565b6000806111f26108a1565b603a546040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018690529192506001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561125257600080fd5b505af1158015611266573d6000803e3d6000fd5b50506039546040517f5e0d443f000000000000000000000000000000000000000000000000000000008152600060048201819052600160248301526044820188905293506001600160a01b039091169150635e0d443f90606401602060405180830381865afa1580156112dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611301919061284c565b90508381101561139e57603b54603c546040517fa1903eab0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015291169063a1903eab90869060240160206040518083038185885af1158015611373573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611398919061284c565b5061142d565b6039546040517f3df02124000000000000000000000000000000000000000000000000000000008152600060048201526001602482015260448101869052606481018690526001600160a01b0390911690633df021249086906084016000604051808303818588803b15801561141357600080fd5b505af1158015611427573d6000803e3d6000fd5b50505050505b816114366108a1565b61144091906129c6565b949350505050565b6000806000611455610d91565b90508381101561149257600061146b82866129c6565b9050600061147882611ff2565b90508181101561148f5761148c81836129c6565b93505b50505b61149c82856129c6565b925050915091565b6040516001600160a01b038316602482015260448101829052610a1c9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612127565b6115578282610ddb565b610beb5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b600054610100900460ff166115d35760005460ff16156115d7565b303b155b6116495760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610a86565b600054610100900460ff1615801561168857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b603380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038716908117909155604080517ffc0c546a000000000000000000000000000000000000000000000000000000008152905163fc0c546a916004808201926020929091908290030181865afa158015611712573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173691906129dd565b603480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169182179055604080517f313ce567000000000000000000000000000000000000000000000000000000008152905163313ce567916004808201926020929091908290030181865afa1580156117c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e591906129fa565b6117f090600a612b01565b6035556001600160a01b0383161580159061181357506001600160a01b03841615155b80156118315750826001600160a01b0316846001600160a01b031614155b61187d5760405162461bcd60e51b815260206004820152600160248201527f30000000000000000000000000000000000000000000000000000000000000006044820152606401610a86565b6118a77f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50418461220c565b6118d17f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50418561220c565b6118fb7f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe5628661220c565b6119257f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe56280612216565b61196f7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50417f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe562612216565b60005b8251811015611a4c5760006001600160a01b031683828151811061199857611998612887565b60200260200101516001600160a01b031614156119f75760405162461bcd60e51b815260206004820152600160248201527f30000000000000000000000000000000000000000000000000000000000000006044820152606401610a86565b611a3a7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab848381518110611a2d57611a2d612887565b602002602001015161220c565b80611a44816128b3565b915050611972565b50611a977ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041612216565b611aaa670de0b6b3a76400006064612b10565b6036556037805460ff19169055603354603454611ad6916001600160a01b03918216911660001961226d565b8015611b0557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050505050565b611b168282610ddb565b15610beb5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000806000603360009054906101000a90046001600160a01b03166001600160a01b031663bf3759b56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bef919061284c565b60375490915060009060ff1615611c4c576000611c0a612351565b905082811015611c2557611c1e81846129c6565b9350611c3a565b82811115611c3a57611c3783826129c6565b94505b611c4484846129c6565b915050611c5d565b611c558261236c565b919550935090505b6040805185815260208101859052908101829052606081018390527f4c0f499ffe6befa0ca7c826b0916cf87bea98de658013e76938489368d60d5099060800160405180910390a16033546040517fa1d9bafc0000000000000000000000000000000000000000000000000000000081526004810186905260248101859052604481018390526001600160a01b039091169063a1d9bafc90606401600060405180830381600087803b158015611d1257600080fd5b505af1158015611d26573d6000803e3d6000fd5b5050505050505050565b6000611d3a610d91565b90508015611d5b576000611d50603d54836111cf565b9050610a1c816111e7565b50565b60408051600180825281830190925260609160009190602080830190803683375050603b5482519293506001600160a01b031691839150600090611da457611da4612887565b6001600160a01b0390921660209283029190910190910152919050565b611d5b611d30565b60606000611dd8836002612b10565b611de39060026128ce565b67ffffffffffffffff811115611dfb57611dfb612692565b6040519080825280601f01601f191660200182016040528015611e25576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611e5c57611e5c612887565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611ebf57611ebf612887565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611efb846002612b10565b611f069060016128ce565b90505b6001811115611fa3577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611f4757611f47612887565b1a60f81b828281518110611f5d57611f5d612887565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611f9c81612b2f565b9050611f09565b5083156111e05760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a86565b600080611ffd610d91565b90506000612710603e5461271061201491906129c6565b61201e9086612b10565b6120289190612b46565b6039546040517f3df02124000000000000000000000000000000000000000000000000000000008152600160048201526000602482015260448101879052606481018390529192506001600160a01b031690633df0212490608401600060405180830381600087803b15801561209d57600080fd5b505af11580156120b1573d6000803e3d6000fd5b50505050603a60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561210557600080fd5b505af1158015612119573d6000803e3d6000fd5b505050505081611436610d91565b600061217c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125109092919063ffffffff16565b805190915015610a1c578080602001905181019061219a9190612865565b610a1c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610a86565b610beb828261154d565b60008281526001602081905260409091200154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a4600091825260016020819052604090922090910155565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa1580156122d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122fb919061284c565b61230591906128ce565b6040516001600160a01b0385166024820152604481018290529091506109969085907f095ea7b300000000000000000000000000000000000000000000000000000000906064016114e9565b600061236361235e6108a1565b611ff2565b50610928610d91565b60008060008061237a610d91565b905060006123866108a1565b9050600061239482846128ce565b6033546040517f39ebf8230000000000000000000000000000000000000000000000000000000081523060048201529192506000916001600160a01b03909116906339ebf82390602401606060405180830381865afa1580156123fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241f9190612b68565b6020015190508082106124f85761243681836129c6565b9650600061244489896128ce565b90508481111561248e576000612467603d54878461246291906129c6565b6111cf565b9050600061247482611ff2565b90508181101561248b5761248881836129c6565b98505b50505b612496610d91565b94508688106124b4576124a987896129c6565b9750600096506124c5565b600097506124c288886129c6565b96505b878510156124d5578497506124f2565b808510156124ee576124e788866129c6565b95506124f2565b8895505b50612505565b61250282826129c6565b95505b505050509193909250565b60606114408484600085856001600160a01b0385163b6125725760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a86565b600080866001600160a01b0316858760405161258e9190612bc4565b60006040518083038185875af1925050503d80600081146125cb576040519150601f19603f3d011682016040523d82523d6000602084013e6125d0565b606091505b50915091506125e08282866125eb565b979650505050505050565b606083156125fa5750816111e0565b82511561260a5782518084602001fd5b8160405162461bcd60e51b8152600401610a869190612993565b60006020828403121561263657600080fd5b5035919050565b6001600160a01b0381168114611d5b57600080fd5b803561265d8161263d565b919050565b6000806040838503121561267557600080fd5b8235915060208301356126878161263d565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156126d1576126d1612692565b604052919050565b600080600080600080600080610100898b0312156126f657600080fd5b88356127018161263d565b97506020898101356127128161263d565b975060408a01356127228161263d565b965060608a013567ffffffffffffffff8082111561273f57600080fd5b818c0191508c601f83011261275357600080fd5b81358181111561276557612765612692565b8060051b91506127768483016126a8565b818152918301840191848101908f84111561279057600080fd5b938501935b838510156127ba57843592506127aa8361263d565b8282529385019390850190612795565b809a505050505050506127cf60808a01612652565b93506127dd60a08a01612652565b92506127eb60c08a01612652565b915060e089013590509295985092959890939650565b60006020828403121561281357600080fd5b81356111e08161263d565b6000806040838503121561283157600080fd5b823561283c8161263d565b915060208301356126878161263d565b60006020828403121561285e57600080fd5b5051919050565b60006020828403121561287757600080fd5b815180151581146111e057600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156128c7576128c761289d565b5060010190565b600082198211156128e1576128e161289d565b500190565b60005b838110156129015781810151838201526020016128e9565b838111156109965750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161294a8160178501602088016128e6565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516129878160288401602088016128e6565b01602801949350505050565b60208152600082518060208401526129b28160408501602087016128e6565b601f01601f19169190910160400192915050565b6000828210156129d8576129d861289d565b500390565b6000602082840312156129ef57600080fd5b81516111e08161263d565b600060208284031215612a0c57600080fd5b815160ff811681146111e057600080fd5b600181815b80851115612a58578160001904821115612a3e57612a3e61289d565b80851615612a4b57918102915b93841c9390800290612a22565b509250929050565b600082612a6f57506001610e02565b81612a7c57506000610e02565b8160018114612a925760028114612a9c57612ab8565b6001915050610e02565b60ff841115612aad57612aad61289d565b50506001821b610e02565b5060208310610133831016604e8410600b8410161715612adb575081810a610e02565b612ae58383612a1d565b8060001904821115612af957612af961289d565b029392505050565b60006111e060ff841683612a60565b6000816000190483118215151615612b2a57612b2a61289d565b500290565b600081612b3e57612b3e61289d565b506000190190565b600082612b6357634e487b7160e01b600052601260045260246000fd5b500490565b600060608284031215612b7a57600080fd5b6040516060810181811067ffffffffffffffff82111715612b9d57612b9d612692565b80604052508251815260208301516020820152604083015160408201528091505092915050565b60008251612bd68184602087016128e6565b919091019291505056fea2646970667358221220948a6925be32fe23fce020c4b248f512e5b83131b5b62797e43a54ed8c9d762464736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106102e05760003560e01c806357ded9c911610184578063b8dc491b116100d6578063dc4c90d31161008a578063ec342ad011610064578063ec342ad0146107f4578063efbb5cb014610810578063fcf2d0ad1461082557600080fd5b8063dc4c90d314610794578063ddc63262146107b4578063df426a5f146107d457600080fd5b8063c1fe3e48116100bb578063c1fe3e481461073e578063c90b65de1461075e578063d547741f1461077457600080fd5b8063b8dc491b14610708578063c1a1bb771461072857600080fd5b8063918f867411610138578063a526d83b11610112578063a526d83b146106b0578063af306e16146106d0578063af648c3d146106e857600080fd5b8063918f86741461066557806391d148541461067b578063a217fddf1461069b57600080fd5b80635a5cd45e116101695780635a5cd45e1461061b578063773f400e146106305780637b6466b21461065057600080fd5b806357ded9c9146105e557806359cee29c146105fb57600080fd5b80632e1a7d4d1161023d5780633aa06443116101f15780634641257d116101cb5780634641257d14610596578063510feb6e146105ab5780635641ec03146105cb57600080fd5b80633aa06443146105415780633b611e00146105615780633fc8cef31461057657600080fd5b806335f8e9a31161022257806335f8e9a3146104cd578063364bc15a146104ed57806336568abe1461052157600080fd5b80632e1a7d4d146104785780632f2ff15d146104ad57600080fd5b80631f1fcd5111610294578063248a9ca311610279578063248a9ca3146103f357806324ea54f4146104245780632afcf4801461045857600080fd5b80631f1fcd511461039657806322f3e2d4146103ce57600080fd5b80630f969b87116102c55780630f969b8714610349578063126f5c5e1461036b5780631d12f28b1461038057600080fd5b80630b6d1d17146102ec5780630c016dc01461031557600080fd5b366102e757005b600080fd5b3480156102f857600080fd5b5061030260355481565b6040519081526020015b60405180910390f35b34801561032157600080fd5b506103027f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe56281565b34801561035557600080fd5b50610369610364366004612624565b61083a565b005b34801561037757600080fd5b506103026108a1565b34801561038c57600080fd5b5061030260365481565b3480156103a257600080fd5b506034546103b6906001600160a01b031681565b6040516001600160a01b03909116815260200161030c565b3480156103da57600080fd5b506103e361092d565b604051901515815260200161030c565b3480156103ff57600080fd5b5061030261040e366004612624565b6000908152600160208190526040909120015490565b34801561043057600080fd5b506103027f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504181565b34801561046457600080fd5b50610369610473366004612624565b61093e565b34801561048457600080fd5b50610498610493366004612624565b61099c565b6040805192835260208301919091520161030c565b3480156104b957600080fd5b506103696104c8366004612662565b6109f5565b3480156104d957600080fd5b506103696104e83660046126d9565b610a21565b3480156104f957600080fd5b506103027ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab81565b34801561052d57600080fd5b5061036961053c366004612662565b610b89565b34801561054d57600080fd5b5061036961055c366004612624565b610bef565b34801561056d57600080fd5b50610369610c20565b34801561058257600080fd5b50603a546103b6906001600160a01b031681565b3480156105a257600080fd5b50610369610cb7565b3480156105b757600080fd5b506103696105c6366004612624565b610cc9565b3480156105d757600080fd5b506037546103e39060ff1681565b3480156105f157600080fd5b5061030260385481565b34801561060757600080fd5b50610369610616366004612624565b610cfa565b34801561062757600080fd5b50603854610302565b34801561063c57600080fd5b5061036961064b366004612801565b610d2b565b34801561065c57600080fd5b50610302610d91565b34801561067157600080fd5b5061030261271081565b34801561068757600080fd5b506103e3610696366004612662565b610ddb565b3480156106a757600080fd5b50610302600081565b3480156106bc57600080fd5b506103696106cb366004612801565b610e08565b3480156106dc57600080fd5b506103026301e1855881565b3480156106f457600080fd5b50610369610703366004612801565b610e5d565b34801561071457600080fd5b5061036961072336600461281e565b610eb2565b34801561073457600080fd5b50610302603d5481565b34801561074a57600080fd5b50603b546103b6906001600160a01b031681565b34801561076a57600080fd5b50610302603e5481565b34801561078057600080fd5b5061036961078f366004612662565b611079565b3480156107a057600080fd5b506033546103b6906001600160a01b031681565b3480156107c057600080fd5b506103696107cf366004612624565b6110a0565b3480156107e057600080fd5b506039546103b6906001600160a01b031681565b34801561080057600080fd5b50610302670de0b6b3a764000081565b34801561081c57600080fd5b506103026110dc565b34801561083157600080fd5b506103696110f8565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610865813361116b565b60368290556040518281527fa68ba126373d04c004c5748c300c9fca12bd444b3d4332e261f3bd2bac4a86009060200160405180910390a15050565b603b546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b0316906370a08231906024015b602060405180830381865afa158015610904573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610928919061284c565b905090565b6000806109386110dc565b11905090565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610969813361116b565b81610972610d91565b101561097d57600080fd5b600061098b603d54846111cf565b9050610996816111e7565b50505050565b6000807f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe5626109ca813361116b565b6109d384611448565b60345491945092506109ef906001600160a01b031633856114a4565b50915091565b60008281526001602081905260409091200154610a12813361116b565b610a1c838361154d565b505050565b610a2d888888886115b8565b6034546001600160a01b03848116911614610a8f5760405162461bcd60e51b815260206004820152600260248201527f323000000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b603980547fffffffffffffffffffffffff00000000000000000000000000000000000000009081166001600160a01b03878116918217909355603a80548316878516179055603b805490921692851692831790915560388390556040517f095ea7b30000000000000000000000000000000000000000000000000000000081526004810191909152600019602482015263095ea7b3906044016020604051808303816000875af1158015610b47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6b9190612865565b505069021e19e0c9bab2400000603d555050601e603e555050505050565b6001600160a01b0381163314610be15760405162461bcd60e51b815260206004820152600260248201527f37310000000000000000000000000000000000000000000000000000000000006044820152606401610a86565b610beb8282611b0c565b5050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610c1a813361116b565b50603d55565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610c4b813361116b565b603a60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b158015610c9b57600080fd5b505af1158015610caf573d6000803e3d6000fd5b505050505050565b610cbf611b73565b610cc7611d30565b565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610cf4813361116b565b50603e55565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610d25813361116b565b50603855565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610d56813361116b565b50603c80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6034546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b0316906370a08231906024016108e7565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b7f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe562610e33813361116b565b610beb7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50418361154d565b7f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe562610e88813361116b565b610beb7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504183611b0c565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610edd813361116b565b6034546001600160a01b0384811691161415610f3b5760405162461bcd60e51b815260206004820152600260248201527f39330000000000000000000000000000000000000000000000000000000000006044820152606401610a86565b6000610f45611d5e565b905060005b8151811015610fe057818181518110610f6557610f65612887565b60200260200101516001600160a01b0316856001600160a01b03161415610fce5760405162461bcd60e51b815260206004820152600260248201527f39330000000000000000000000000000000000000000000000000000000000006044820152606401610a86565b80610fd8816128b3565b915050610f4a565b506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526109969084906001600160a01b038716906370a0823190602401602060405180830381865afa158015611044573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611068919061284c565b6001600160a01b03871691906114a4565b60008281526001602081905260409091200154611096813361116b565b610a1c8383611b0c565b7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab6110cb813361116b565b6110d3611b73565b610beb82611dc1565b60006110e6610d91565b6110ee6108a1565b61092891906128ce565b7f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe562611123813361116b565b6037805460ff191660011790556040517f17fa25a1c2ac074f71f0cf4f6af525c06fab7d83eff5ffcf6df5277f2919ae2490600090a150565b6001600160a01b03163b151590565b6111758282610ddb565b610beb5761118d816001600160a01b03166014611dc9565b611198836020611dc9565b6040516020016111a9929190612912565b60408051601f198184030181529082905262461bcd60e51b8252610a8691600401612993565b60008183106111de57816111e0565b825b9392505050565b6000806111f26108a1565b603a546040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018690529192506001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561125257600080fd5b505af1158015611266573d6000803e3d6000fd5b50506039546040517f5e0d443f000000000000000000000000000000000000000000000000000000008152600060048201819052600160248301526044820188905293506001600160a01b039091169150635e0d443f90606401602060405180830381865afa1580156112dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611301919061284c565b90508381101561139e57603b54603c546040517fa1903eab0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015291169063a1903eab90869060240160206040518083038185885af1158015611373573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611398919061284c565b5061142d565b6039546040517f3df02124000000000000000000000000000000000000000000000000000000008152600060048201526001602482015260448101869052606481018690526001600160a01b0390911690633df021249086906084016000604051808303818588803b15801561141357600080fd5b505af1158015611427573d6000803e3d6000fd5b50505050505b816114366108a1565b61144091906129c6565b949350505050565b6000806000611455610d91565b90508381101561149257600061146b82866129c6565b9050600061147882611ff2565b90508181101561148f5761148c81836129c6565b93505b50505b61149c82856129c6565b925050915091565b6040516001600160a01b038316602482015260448101829052610a1c9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612127565b6115578282610ddb565b610beb5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b600054610100900460ff166115d35760005460ff16156115d7565b303b155b6116495760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610a86565b600054610100900460ff1615801561168857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b603380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038716908117909155604080517ffc0c546a000000000000000000000000000000000000000000000000000000008152905163fc0c546a916004808201926020929091908290030181865afa158015611712573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173691906129dd565b603480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169182179055604080517f313ce567000000000000000000000000000000000000000000000000000000008152905163313ce567916004808201926020929091908290030181865afa1580156117c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e591906129fa565b6117f090600a612b01565b6035556001600160a01b0383161580159061181357506001600160a01b03841615155b80156118315750826001600160a01b0316846001600160a01b031614155b61187d5760405162461bcd60e51b815260206004820152600160248201527f30000000000000000000000000000000000000000000000000000000000000006044820152606401610a86565b6118a77f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50418461220c565b6118d17f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50418561220c565b6118fb7f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe5628661220c565b6119257f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe56280612216565b61196f7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50417f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe562612216565b60005b8251811015611a4c5760006001600160a01b031683828151811061199857611998612887565b60200260200101516001600160a01b031614156119f75760405162461bcd60e51b815260206004820152600160248201527f30000000000000000000000000000000000000000000000000000000000000006044820152606401610a86565b611a3a7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab848381518110611a2d57611a2d612887565b602002602001015161220c565b80611a44816128b3565b915050611972565b50611a977ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041612216565b611aaa670de0b6b3a76400006064612b10565b6036556037805460ff19169055603354603454611ad6916001600160a01b03918216911660001961226d565b8015611b0557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050505050565b611b168282610ddb565b15610beb5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000806000603360009054906101000a90046001600160a01b03166001600160a01b031663bf3759b56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bef919061284c565b60375490915060009060ff1615611c4c576000611c0a612351565b905082811015611c2557611c1e81846129c6565b9350611c3a565b82811115611c3a57611c3783826129c6565b94505b611c4484846129c6565b915050611c5d565b611c558261236c565b919550935090505b6040805185815260208101859052908101829052606081018390527f4c0f499ffe6befa0ca7c826b0916cf87bea98de658013e76938489368d60d5099060800160405180910390a16033546040517fa1d9bafc0000000000000000000000000000000000000000000000000000000081526004810186905260248101859052604481018390526001600160a01b039091169063a1d9bafc90606401600060405180830381600087803b158015611d1257600080fd5b505af1158015611d26573d6000803e3d6000fd5b5050505050505050565b6000611d3a610d91565b90508015611d5b576000611d50603d54836111cf565b9050610a1c816111e7565b50565b60408051600180825281830190925260609160009190602080830190803683375050603b5482519293506001600160a01b031691839150600090611da457611da4612887565b6001600160a01b0390921660209283029190910190910152919050565b611d5b611d30565b60606000611dd8836002612b10565b611de39060026128ce565b67ffffffffffffffff811115611dfb57611dfb612692565b6040519080825280601f01601f191660200182016040528015611e25576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611e5c57611e5c612887565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611ebf57611ebf612887565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611efb846002612b10565b611f069060016128ce565b90505b6001811115611fa3577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611f4757611f47612887565b1a60f81b828281518110611f5d57611f5d612887565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611f9c81612b2f565b9050611f09565b5083156111e05760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a86565b600080611ffd610d91565b90506000612710603e5461271061201491906129c6565b61201e9086612b10565b6120289190612b46565b6039546040517f3df02124000000000000000000000000000000000000000000000000000000008152600160048201526000602482015260448101879052606481018390529192506001600160a01b031690633df0212490608401600060405180830381600087803b15801561209d57600080fd5b505af11580156120b1573d6000803e3d6000fd5b50505050603a60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561210557600080fd5b505af1158015612119573d6000803e3d6000fd5b505050505081611436610d91565b600061217c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125109092919063ffffffff16565b805190915015610a1c578080602001905181019061219a9190612865565b610a1c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610a86565b610beb828261154d565b60008281526001602081905260409091200154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a4600091825260016020819052604090922090910155565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa1580156122d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122fb919061284c565b61230591906128ce565b6040516001600160a01b0385166024820152604481018290529091506109969085907f095ea7b300000000000000000000000000000000000000000000000000000000906064016114e9565b600061236361235e6108a1565b611ff2565b50610928610d91565b60008060008061237a610d91565b905060006123866108a1565b9050600061239482846128ce565b6033546040517f39ebf8230000000000000000000000000000000000000000000000000000000081523060048201529192506000916001600160a01b03909116906339ebf82390602401606060405180830381865afa1580156123fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241f9190612b68565b6020015190508082106124f85761243681836129c6565b9650600061244489896128ce565b90508481111561248e576000612467603d54878461246291906129c6565b6111cf565b9050600061247482611ff2565b90508181101561248b5761248881836129c6565b98505b50505b612496610d91565b94508688106124b4576124a987896129c6565b9750600096506124c5565b600097506124c288886129c6565b96505b878510156124d5578497506124f2565b808510156124ee576124e788866129c6565b95506124f2565b8895505b50612505565b61250282826129c6565b95505b505050509193909250565b60606114408484600085856001600160a01b0385163b6125725760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a86565b600080866001600160a01b0316858760405161258e9190612bc4565b60006040518083038185875af1925050503d80600081146125cb576040519150601f19603f3d011682016040523d82523d6000602084013e6125d0565b606091505b50915091506125e08282866125eb565b979650505050505050565b606083156125fa5750816111e0565b82511561260a5782518084602001fd5b8160405162461bcd60e51b8152600401610a869190612993565b60006020828403121561263657600080fd5b5035919050565b6001600160a01b0381168114611d5b57600080fd5b803561265d8161263d565b919050565b6000806040838503121561267557600080fd5b8235915060208301356126878161263d565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156126d1576126d1612692565b604052919050565b600080600080600080600080610100898b0312156126f657600080fd5b88356127018161263d565b97506020898101356127128161263d565b975060408a01356127228161263d565b965060608a013567ffffffffffffffff8082111561273f57600080fd5b818c0191508c601f83011261275357600080fd5b81358181111561276557612765612692565b8060051b91506127768483016126a8565b818152918301840191848101908f84111561279057600080fd5b938501935b838510156127ba57843592506127aa8361263d565b8282529385019390850190612795565b809a505050505050506127cf60808a01612652565b93506127dd60a08a01612652565b92506127eb60c08a01612652565b915060e089013590509295985092959890939650565b60006020828403121561281357600080fd5b81356111e08161263d565b6000806040838503121561283157600080fd5b823561283c8161263d565b915060208301356126878161263d565b60006020828403121561285e57600080fd5b5051919050565b60006020828403121561287757600080fd5b815180151581146111e057600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156128c7576128c761289d565b5060010190565b600082198211156128e1576128e161289d565b500190565b60005b838110156129015781810151838201526020016128e9565b838111156109965750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161294a8160178501602088016128e6565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516129878160288401602088016128e6565b01602801949350505050565b60208152600082518060208401526129b28160408501602087016128e6565b601f01601f19169190910160400192915050565b6000828210156129d8576129d861289d565b500390565b6000602082840312156129ef57600080fd5b81516111e08161263d565b600060208284031215612a0c57600080fd5b815160ff811681146111e057600080fd5b600181815b80851115612a58578160001904821115612a3e57612a3e61289d565b80851615612a4b57918102915b93841c9390800290612a22565b509250929050565b600082612a6f57506001610e02565b81612a7c57506000610e02565b8160018114612a925760028114612a9c57612ab8565b6001915050610e02565b60ff841115612aad57612aad61289d565b50506001821b610e02565b5060208310610133831016604e8410600b8410161715612adb575081810a610e02565b612ae58383612a1d565b8060001904821115612af957612af961289d565b029392505050565b60006111e060ff841683612a60565b6000816000190483118215151615612b2a57612b2a61289d565b500290565b600081612b3e57612b3e61289d565b506000190190565b600082612b6357634e487b7160e01b600052601260045260246000fd5b500490565b600060608284031215612b7a57600080fd5b6040516060810181811067ffffffffffffffff82111715612b9d57612b9d612692565b80604052508251815260208301516020820152604083015160408201528091505092915050565b60008251612bd68184602087016128e6565b919091019291505056fea2646970667358221220948a6925be32fe23fce020c4b248f512e5b83131b5b62797e43a54ed8c9d762464736f6c634300080c0033",
  "devdoc": {
    "author": "Forked from https://github.com/Grandthrax/yearn-steth-acc/blob/master/contracts/Strategy.sol",
    "kind": "dev",
    "methods": {
      "addGuardian(address)": {
        "details": "This internal function has to be put in this file because `AccessControl` is not defined in `PoolManagerInternal`",
        "params": {
          "_guardian": "New guardian address"
        }
      },
      "estimatedTotalAssets()": {
        "details": "We are purposely treating stETH and ETH as being equivalent. This is for a few reasons. The main one is that we do not have a good way to value stETH at any current time without creating exploit routes. Currently you can mint eth for steth but can't burn steth for eth so need to sell. Once eth 2.0 is merged you will be able to burn 1-1 as well. The main downside here is that we will noramlly overvalue our position as we expect stETH to trade slightly below peg. That means we will earn profit on deposits and take losses on withdrawals. This may sound scary but it is the equivalent of using virtualprice in a curve lp. As we have seen from many exploits, virtual pricing is safer than touch pricing."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "harvest(uint256)": {
        "params": {
          "borrowInit": "Approximate optimal borrows to have faster convergence on the NR method"
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,address,address[],address,address,address,uint256)": {
        "params": {
          "_apr": "Estimated apr on staked ETH",
          "_poolManager": "Address of the `PoolManager` lending to this strategy",
          "_stETH": "Address of the stETH token",
          "_stableSwapSTETH": "Address of the stETH/ETH Curve pool",
          "_weth": "Address of wETH",
          "governor": "Address of the governance multisig with governor privilege",
          "guardian": "Address of the guardian",
          "keepers": "List of addresses of keepers"
        }
      },
      "invest(uint256)": {
        "details": "This function allows to override the behavior that could be obtained through `harvest` calls",
        "params": {
          "_amount": "Amount to invest"
        }
      },
      "isActive()": {
        "returns": {
          "_0": "True if the strategy is actively managing a position."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "rescueStuckEth()": {
        "details": "This strategy should never have stuck eth, but let it just in case"
      },
      "revokeGuardian(address)": {
        "params": {
          "guardian": "Old guardian address to revoke"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setApr(uint256)": {
        "params": {
          "_apr": "New strategy APR"
        }
      },
      "setDebtThreshold(uint256)": {
        "details": "By default this is 0, meaning any losses would cause a harvest which will subsequently report the loss to the Manager for tracking.",
        "params": {
          "_debtThreshold": "How big of a loss this Strategy may carry without"
        }
      },
      "setEmergencyExit()": {
        "details": "This may only be called by the `PoolManager`, because when calling this the `PoolManager` should at the same time update the debt ratioThis function can only be called once by the `PoolManager` contractSee `poolManager.setEmergencyExit()` and `harvest()` for further details."
      },
      "sweep(address,address)": {
        "details": "Implement `_protectedTokens()` to specify any additional tokens that should be protected from sweeping in addition to `want`.",
        "params": {
          "_token": "The token to transfer out of this `PoolManager`.",
          "to": "Address to send the tokens to."
        }
      },
      "updateMaxSingleTrade(uint256)": {
        "params": {
          "_maxSingleTrade": "New `maxSingleTrade` value"
        }
      },
      "updateReferral(address)": {
        "params": {
          "newReferral": "Address of the new referral"
        }
      },
      "updateSlippageProtectionOut(uint256)": {
        "params": {
          "_slippageProtectionOut": "New slippage protection parameter"
        }
      },
      "withdraw(uint256)": {
        "details": "This may only be called by the `PoolManager`",
        "params": {
          "_amountNeeded": "How much `want` to withdraw."
        },
        "returns": {
          "_loss": "Any realized losses",
          "amountFreed": "How much `want` withdrawn."
        }
      }
    },
    "title": "StrategyStETHAcc",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DENOMINATOR()": {
        "notice": "Parameter used for slippage protection"
      },
      "GUARDIAN_ROLE()": {
        "notice": "Role for guardians and governors"
      },
      "KEEPER_ROLE()": {
        "notice": "Role for keepers"
      },
      "POOLMANAGER_ROLE()": {
        "notice": "Role for `PoolManager` only"
      },
      "addGuardian(address)": {
        "notice": "Adds a new guardian address and echoes the change to the contracts that interact with this collateral `PoolManager`"
      },
      "apr()": {
        "notice": "Current `apr` of the strategy: this apr needs to be manually filled by the strategist and updated when Lido's APR changes. It is put like that as there is no easy way to compute Lido's APR on-chainBase used is `BASE_PARAMS`"
      },
      "debtThreshold()": {
        "notice": "Use this to adjust the threshold at which running a debt causes a harvest trigger. See `setDebtThreshold()` for more details"
      },
      "emergencyExit()": {
        "notice": "See note on `setEmergencyExit()`"
      },
      "estimatedAPR()": {
        "notice": "The ETH APR of owning stETH"
      },
      "estimatedTotalAssets()": {
        "notice": "View function to check the total assets managed by the strategy"
      },
      "harvest()": {
        "notice": "Harvests the Strategy, recognizing any profits or losses and adjusting the Strategy's position."
      },
      "harvest(uint256)": {
        "notice": "Harvests the Strategy, recognizing any profits or losses and adjusting the Strategy's position."
      },
      "initialize(address,address,address,address[],address,address,address,uint256)": {
        "notice": "Constructor of the `Strategy`"
      },
      "invest(uint256)": {
        "notice": "Invests `_amount` in stETH"
      },
      "isActive()": {
        "notice": "Provides an indication of whether this strategy is currently \"active\" in that it is managing an active position, or will manage a position in the future. This should correlate to `harvest()` activity, so that Harvest events can be tracked externally by indexing agents."
      },
      "maxSingleTrade()": {
        "notice": "Maximum trade size within the strategy"
      },
      "poolManager()": {
        "notice": "Reference to the protocol's collateral `PoolManager`"
      },
      "rescueStuckEth()": {
        "notice": "Rescues stuck ETH from the strategy"
      },
      "revokeGuardian(address)": {
        "notice": "Revokes the guardian role and propagates the change to other contracts"
      },
      "setApr(uint256)": {
        "notice": "Changes the estimated APR of the strategy"
      },
      "setDebtThreshold(uint256)": {
        "notice": "Sets how far the Strategy can go into loss without a harvest and report being required."
      },
      "setEmergencyExit()": {
        "notice": "Activates emergency exit. Once activated, the Strategy will exit its position upon the next harvest, depositing all funds into the Manager as quickly as is reasonable given on-chain conditions."
      },
      "slippageProtectionOut()": {
        "notice": "Slippage parameter for the swaps on Curve: out of `DENOMINATOR`"
      },
      "stETH()": {
        "notice": "Reference to the stETH token"
      },
      "stableSwapSTETH()": {
        "notice": "Reference to the Curve ETH/stETH"
      },
      "stethBalance()": {
        "notice": "Returns the stETH balance of the strategy"
      },
      "sweep(address,address)": {
        "notice": "Removes tokens from this Strategy that are not the type of tokens managed by this Strategy. This may be used in case of accidentally sending the wrong kind of token to this Strategy. Tokens will be sent to `governance()`. This will fail if an attempt is made to sweep `want`, or any tokens that are protected by this Strategy. This may only be called by governance."
      },
      "updateMaxSingleTrade(uint256)": {
        "notice": "Updates the size of a trade in the strategy"
      },
      "updateReferral(address)": {
        "notice": "Updates the referral code for Lido"
      },
      "updateSlippageProtectionOut(uint256)": {
        "notice": "Updates the maximum slippage protection parameter"
      },
      "want()": {
        "notice": "Reference to the ERC20 farmed by this strategy"
      },
      "wantBalance()": {
        "notice": "Returns the wETH balance of the strategy"
      },
      "wantBase()": {
        "notice": "Base of the ERC20 token farmed by this strategy"
      },
      "weth()": {
        "notice": "Reference to wETH, it should normally be equal to `want`"
      },
      "withdraw(uint256)": {
        "notice": "Withdraws `_amountNeeded` to `poolManager`."
      }
    },
    "notice": "A strategy designed to getting yield on wETH by putting ETH in Lido or Curve for stETH and exiting for wETH",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 52,
        "contract": "contracts/strategies/StETHStrategy/StETHStrategy.sol:StETHStrategy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 55,
        "contract": "contracts/strategies/StETHStrategy/StETHStrategy.sol:StETHStrategy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3409,
        "contract": "contracts/strategies/StETHStrategy/StETHStrategy.sol:StETHStrategy",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)3404_storage)"
      },
      {
        "astId": 3695,
        "contract": "contracts/strategies/StETHStrategy/StETHStrategy.sol:StETHStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14870,
        "contract": "contracts/strategies/StETHStrategy/StETHStrategy.sol:StETHStrategy",
        "label": "poolManager",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(IPoolManager)3973"
      },
      {
        "astId": 14874,
        "contract": "contracts/strategies/StETHStrategy/StETHStrategy.sol:StETHStrategy",
        "label": "want",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(IERC20)2114"
      },
      {
        "astId": 14877,
        "contract": "contracts/strategies/StETHStrategy/StETHStrategy.sol:StETHStrategy",
        "label": "wantBase",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 14880,
        "contract": "contracts/strategies/StETHStrategy/StETHStrategy.sol:StETHStrategy",
        "label": "debtThreshold",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 14883,
        "contract": "contracts/strategies/StETHStrategy/StETHStrategy.sol:StETHStrategy",
        "label": "emergencyExit",
        "offset": 0,
        "slot": "55",
        "type": "t_bool"
      },
      {
        "astId": 15386,
        "contract": "contracts/strategies/StETHStrategy/StETHStrategy.sol:StETHStrategy",
        "label": "apr",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 15390,
        "contract": "contracts/strategies/StETHStrategy/StETHStrategy.sol:StETHStrategy",
        "label": "stableSwapSTETH",
        "offset": 0,
        "slot": "57",
        "type": "t_contract(IStableSwapPool)5747"
      },
      {
        "astId": 15394,
        "contract": "contracts/strategies/StETHStrategy/StETHStrategy.sol:StETHStrategy",
        "label": "weth",
        "offset": 0,
        "slot": "58",
        "type": "t_contract(IWETH9)4054"
      },
      {
        "astId": 15398,
        "contract": "contracts/strategies/StETHStrategy/StETHStrategy.sol:StETHStrategy",
        "label": "stETH",
        "offset": 0,
        "slot": "59",
        "type": "t_contract(ISteth)5768"
      },
      {
        "astId": 15401,
        "contract": "contracts/strategies/StETHStrategy/StETHStrategy.sol:StETHStrategy",
        "label": "_referral",
        "offset": 0,
        "slot": "60",
        "type": "t_address"
      },
      {
        "astId": 15404,
        "contract": "contracts/strategies/StETHStrategy/StETHStrategy.sol:StETHStrategy",
        "label": "maxSingleTrade",
        "offset": 0,
        "slot": "61",
        "type": "t_uint256"
      },
      {
        "astId": 15411,
        "contract": "contracts/strategies/StETHStrategy/StETHStrategy.sol:StETHStrategy",
        "label": "slippageProtectionOut",
        "offset": 0,
        "slot": "62",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2114": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolManager)3973": {
        "encoding": "inplace",
        "label": "contract IPoolManager",
        "numberOfBytes": "20"
      },
      "t_contract(IStableSwapPool)5747": {
        "encoding": "inplace",
        "label": "contract IStableSwapPool",
        "numberOfBytes": "20"
      },
      "t_contract(ISteth)5768": {
        "encoding": "inplace",
        "label": "contract ISteth",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH9)4054": {
        "encoding": "inplace",
        "label": "contract IWETH9",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)3404_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)3404_storage"
      },
      "t_struct(RoleData)3404_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 3401,
            "contract": "contracts/strategies/StETHStrategy/StETHStrategy.sol:StETHStrategy",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 3403,
            "contract": "contracts/strategies/StETHStrategy/StETHStrategy.sol:StETHStrategy",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}