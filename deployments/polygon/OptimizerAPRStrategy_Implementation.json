{
  "address": "0xe880fe143dc62aab47aba54e2165ee982b5bce3e",
  "abi": [
    {
      "inputs": [],
      "name": "FailedWithdrawal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectDistribution",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectListLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidShares",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LenderAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NonExistentLender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UndockedLender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "AddLender",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EmergencyExitActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loss",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtPayment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtOutstanding",
          "type": "uint256"
        }
      ],
      "name": "Harvested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "RemoveLender",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtThreshold",
          "type": "uint256"
        }
      ],
      "name": "UpdatedDebtThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "activated",
          "type": "bool"
        }
      ],
      "name": "UpdatedIsRewardActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delay",
          "type": "uint256"
        }
      ],
      "name": "UpdatedMaxReportDelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delay",
          "type": "uint256"
        }
      ],
      "name": "UpdatedMinReportDelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_rewardAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minimumAmountMoved",
          "type": "uint256"
        }
      ],
      "name": "UpdatedRewardAmountAndMinimumAmountMoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewards",
          "type": "address"
        }
      ],
      "name": "UpdatedRewards",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GUARDIAN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "KEEPER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOLMANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECONDS_PER_YEAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_guardian",
          "type": "address"
        }
      ],
      "name": "addGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IGenericLender",
          "name": "newLender",
          "type": "address"
        }
      ],
      "name": "addLender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyExit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimatedAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "shares",
          "type": "uint64[]"
        }
      ],
      "name": "estimatedAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "weightedAPR",
          "type": "uint256"
        },
        {
          "internalType": "int256[]",
          "name": "lenderAdjustedAmounts",
          "type": "int256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimatedTotalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nav",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "forceRemoveLender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "borrowInit",
          "type": "uint256"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "governor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "keepers",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendStatuses",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "assets",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rate",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "add",
              "type": "address"
            }
          ],
          "internalType": "struct LendStatus[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lenders",
      "outputs": [
        {
          "internalType": "contract IGenericLender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lentTotalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numLenders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolManager",
      "outputs": [
        {
          "internalType": "contract IPoolManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "revokeGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "safeRemoveLender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtThreshold",
          "type": "uint256"
        }
      ],
      "name": "setDebtThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setEmergencyExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wantBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountNeeded",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountFreed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loss",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa07a64f5a2d7b0e5c657ef1b3e674b8b0068acd04a32a68825bdb771b3dbf5fd",
  "receipt": {
    "to": null,
    "from": "0xfda462548ce04282f4b6d6619823a7c64fdc0185",
    "contractAddress": "0xe880fe143dc62aab47aba54e2165ee982b5bce3e",
    "transactionIndex": "0x5",
    "gasUsed": "0x44c46e",
    "logsBloom": "0x
    "blockHash": "0x7322b741d8c6e921c237c3abb487870528de2f7a9bb88d807ed31af6629e6643",
    "transactionHash": "0xecc6178bdcfc9889b89f33fc9a404b1f849b5da05dd37e25b40d643f3e7a5565",
    "logs": [
      {
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fda462548ce04282f4b6d6619823a7c64fdc0185",
          "0x0000000000000000000000009ead03f7136fc6b4bdb0780b00a1c14ae5a8b6d0"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000c8788af452f3546000000000000000000000000000000000000000000000001f8e94d9e89ea2e930000000000000000000000000000000000000000000002d445ad7623142720b3000000000000000000000000000000000000000000000001ec61c4ef44baf94d0000000000000000000000000000000000000000000002d45234fed2595655f9",
        "blockNumber": "0x2547ef6",
        "transactionHash": "0xecc6178bdcfc9889b89f33fc9a404b1f849b5da05dd37e25b40d643f3e7a5565",
        "transactionIndex": "0x5",
        "blockHash": "0x7322b741d8c6e921c237c3abb487870528de2f7a9bb88d807ed31af6629e6643",
        "logIndex": "0xc",
        "removed": false
      }
    ],
    "blockNumber": "0x2547ef6",
    "cumulativeGasUsed": "0x4eadd0",
    "status": "0x1"
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0d3705635a12f691c993e4b380cb5060",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FailedWithdrawal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectDistribution\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectListLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShares\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LenderAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonExistentLender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UndockedLender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"AddLender\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyExitActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtOutstanding\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"RemoveLender\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtThreshold\",\"type\":\"uint256\"}],\"name\":\"UpdatedDebtThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"name\":\"UpdatedIsRewardActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxReportDelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinReportDelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minimumAmountMoved\",\"type\":\"uint256\"}],\"name\":\"UpdatedRewardAmountAndMinimumAmountMoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"}],\"name\":\"UpdatedRewards\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KEEPER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOLMANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"addGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGenericLender\",\"name\":\"newLender\",\"type\":\"address\"}],\"name\":\"addLender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"shares\",\"type\":\"uint64[]\"}],\"name\":\"estimatedAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weightedAPR\",\"type\":\"uint256\"},{\"internalType\":\"int256[]\",\"name\":\"lenderAdjustedAmounts\",\"type\":\"int256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedTotalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nav\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"forceRemoveLender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowInit\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"keepers\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendStatuses\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"internalType\":\"struct LendStatus[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lenders\",\"outputs\":[{\"internalType\":\"contract IGenericLender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lentTotalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numLenders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"revokeGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"safeRemoveLender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtThreshold\",\"type\":\"uint256\"}],\"name\":\"setDebtThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountNeeded\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountFreed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Angle Labs, Inc.\",\"details\":\"This strategy works by taking plugins designed for standard lending platforms and automatically chooses to invest its funds in the best platforms to generate yield. The allocation is greedy and may be sub-optimal so there is an additional option to manually set positions\",\"kind\":\"dev\",\"methods\":{\"addGuardian(address)\":{\"details\":\"This internal function has to be put in this file because `AccessControl` is not defined in `PoolManagerInternal`\",\"params\":{\"_guardian\":\"New guardian address\"}},\"addLender(address)\":{\"details\":\"Governor, guardian or `PoolManager` only\",\"params\":{\"newLender\":\"The adapter to the added lending platform\"}},\"estimatedAPR()\":{\"details\":\"It's computed by doing: `sum(nav * apr) / totalNav`\"},\"estimatedAPR(uint64[])\":{\"params\":{\"shares\":\"List of shares (in bps of the nav) that should be allocated to each lender\"}},\"forceRemoveLender(address)\":{\"params\":{\"lender\":\"The address of the adapter to the lending platform to remove\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"harvest(bytes)\":{\"details\":\"Since this function is permissionless, strategy implementations should be made to remain safe regardless of the data that is passed in the call\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,address,address[])\":{\"params\":{\"_poolManager\":\"Address of the `PoolManager` lending to this strategy\",\"governor\":\"Address with governor privilege\",\"guardian\":\"Address of the guardian\"}},\"isActive()\":{\"returns\":{\"_0\":\"True if the strategy is actively managing a position.\"}},\"lendStatuses()\":{\"returns\":{\"_0\":\"Returns the status of all lenders attached the strategy\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeGuardian(address)\":{\"params\":{\"guardian\":\"Old guardian address to revoke\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeRemoveLender(address)\":{\"params\":{\"lender\":\"The address of the adapter to the lending platform to remove\"}},\"setDebtThreshold(uint256)\":{\"details\":\"By default this is 0, meaning any losses would cause a harvest which will subsequently report the loss to the Manager for tracking.\",\"params\":{\"_debtThreshold\":\"How big of a loss this Strategy may carry without\"}},\"setEmergencyExit()\":{\"details\":\"This may only be called by the `PoolManager`, because when calling this the `PoolManager` should at the same time update the debt ratioThis function can only be called once by the `PoolManager` contractSee `poolManager.setEmergencyExit()` and `harvest()` for further details.\"},\"setWithdrawalThreshold(uint256)\":{\"details\":\"governor, guardian or `PoolManager` only\",\"params\":{\"_threshold\":\"New withdrawal threshold\"}},\"sweep(address,address)\":{\"details\":\"Implement `_protectedTokens()` to specify any additional tokens that should be protected from sweeping in addition to `want`.\",\"params\":{\"_token\":\"The token to transfer out of this `PoolManager`.\",\"to\":\"Address to send the tokens to.\"}},\"withdraw(uint256)\":{\"details\":\"This may only be called by the `PoolManager`\",\"params\":{\"_amountNeeded\":\"How much `want` to withdraw.\"},\"returns\":{\"_loss\":\"Any realized losses\",\"amountFreed\":\"How much `want` withdrawn.\"}}},\"title\":\"OptimizerAPRStrategy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"GUARDIAN_ROLE()\":{\"notice\":\"Role for guardians and governors - keccak256(\\\"GUARDIAN_ROLE\\\")\"},\"KEEPER_ROLE()\":{\"notice\":\"Role for keepers - keccak256(\\\"KEEPER_ROLE\\\")\"},\"POOLMANAGER_ROLE()\":{\"notice\":\"Role for `PoolManager` only - keccak256(\\\"POOLMANAGER_ROLE\\\")\"},\"addGuardian(address)\":{\"notice\":\"Adds a new guardian address and echoes the change to the contracts that interact with this collateral `PoolManager`\"},\"addLender(address)\":{\"notice\":\"Add lenders for the strategy to choose between\"},\"debtThreshold()\":{\"notice\":\"Use this to adjust the threshold at which running a debt causes a harvest trigger. See `setDebtThreshold()` for more details\"},\"emergencyExit()\":{\"notice\":\"See note on `setEmergencyExit()`\"},\"estimatedAPR()\":{\"notice\":\"Returns the weighted apr of all lenders\"},\"estimatedAPR(uint64[])\":{\"notice\":\"Returns the weighted apr in an hypothetical world where the strategy splits its nav in respect to shares\"},\"estimatedTotalAssets()\":{\"notice\":\"View function to check the total assets managed by the strategy\"},\"forceRemoveLender(address)\":{\"notice\":\"Removes a lending platform even if total withdrawal is impossible\"},\"harvest()\":{\"notice\":\"Harvests the Strategy, recognizing any profits or losses and adjusting the Strategy's position.\"},\"harvest(bytes)\":{\"notice\":\"Same as the function above with a `data` parameter to help adjust the position\"},\"harvest(uint256)\":{\"notice\":\"Same as above with a `borrowInit` parameter to help in case of the convergence of the `adjustPosition` method\"},\"initialize(address,address,address,address[])\":{\"notice\":\"Constructor of the `Strategy`\"},\"isActive()\":{\"notice\":\"Provides an indication of whether this strategy is currently \\\"active\\\" in that it is managing an active position, or will manage a position in the future. This should correlate to `harvest()` activity, so that Harvest events can be tracked externally by indexing agents.\"},\"lendStatuses()\":{\"notice\":\"View function to check the current state of the strategy\"},\"lentTotalAssets()\":{\"notice\":\"View function to check the total assets lent\"},\"numLenders()\":{\"notice\":\"View function to check the number of lending platforms\"},\"poolManager()\":{\"notice\":\"Reference to the protocol's collateral `PoolManager`\"},\"revokeGuardian(address)\":{\"notice\":\"Revokes the guardian role and propagates the change to other contracts\"},\"safeRemoveLender(address)\":{\"notice\":\"Removes a lending platform and fails if total withdrawal is impossible\"},\"setDebtThreshold(uint256)\":{\"notice\":\"Sets how far the Strategy can go into loss without a harvest and report being required.\"},\"setEmergencyExit()\":{\"notice\":\"Activates emergency exit. Once activated, the Strategy will exit its position upon the next harvest, depositing all funds into the Manager as quickly as is reasonable given on-chain conditions.\"},\"setWithdrawalThreshold(uint256)\":{\"notice\":\"Changes the withdrawal threshold\"},\"sweep(address,address)\":{\"notice\":\"Removes tokens from this Strategy that are not the type of tokens managed by this Strategy. This may be used in case of accidentally sending the wrong kind of token to this Strategy. Tokens will be sent to `governance()`. This will fail if an attempt is made to sweep `want`, or any tokens that are protected by this Strategy. This may only be called by governance.\"},\"want()\":{\"notice\":\"Reference to the ERC20 farmed by this strategy\"},\"wantBase()\":{\"notice\":\"Base of the ERC20 token farmed by this strategy\"},\"withdraw(uint256)\":{\"notice\":\"Withdraws `_amountNeeded` to `poolManager`.\"}},\"notice\":\"A lender optimisation strategy for any ERC20 asset, leveraging multiple lenders at once\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/OptimizerAPR/OptimizerAPRStrategy.sol\":\"OptimizerAPRStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/external/AccessControlAngle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"../interfaces/IAccessControlAngle.sol\\\";\\n\\n/**\\n * @dev This contract is fully forked from OpenZeppelin `AccessControl`.\\n * The only difference is the removal of the ERC165 implementation as it's not\\n * needed in Angle.\\n *\\n * Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlAngle is Context, IAccessControlAngle {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external override {\\n        require(account == _msgSender(), \\\"71\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef4a7c307f5ce747b7223a71056a460c72c01129fdcef464aa7b160746a0a719\",\"license\":\"GPL-3.0\"},\"contracts/external/AccessControlAngleUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IAccessControlAngle.sol\\\";\\n\\n/**\\n * @dev This contract is fully forked from OpenZeppelin `AccessControlUpgradeable`.\\n * The only difference is the removal of the ERC165 implementation as it's not\\n * needed in Angle.\\n *\\n * Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlAngleUpgradeable is Initializable, IAccessControlAngle {\\n    // solhint-disable-next-line\\n    function __AccessControl_init() internal initializer {\\n        __AccessControl_init_unchained();\\n    }\\n\\n    // solhint-disable-next-line\\n    function __AccessControl_init_unchained() internal initializer {}\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external override {\\n        require(account == msg.sender, \\\"71\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9d8d018a41e16eba7a41b73d986f175e52a773819dbebde0623f93c23c365207\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAccessControlAngle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n/// @title IAccessControl\\n/// @author Forked from OpenZeppelin\\n/// @notice Interface for `AccessControl` contracts\\ninterface IAccessControlAngle {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x8d34c4bcd7eb669fe972901727c5467541591a67a4d05e5b609c0b1642478a3a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGenericLender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"./IAccessControlAngle.sol\\\";\\n\\n/// @title IGenericLender\\n/// @author Yearn with slight modifications from Angle Core Team\\n/// @dev Interface for the `GenericLender` contract, the base interface for contracts interacting\\n/// with lending and yield farming platforms\\ninterface IGenericLender is IAccessControlAngle {\\n    /// @notice Name of the lender on which funds are invested\\n    function lenderName() external view returns (string memory);\\n\\n    /// @notice Helper function to get the current total of assets managed by the lender.\\n    function nav() external view returns (uint256);\\n\\n    /// @notice Reference to the `Strategy` contract the lender interacts with\\n    function strategy() external view returns (address);\\n\\n    /// @notice Returns an estimation of the current Annual Percentage Rate on the lender\\n    function apr() external view returns (uint256);\\n\\n    /// @notice Returns an estimation of the current Annual Percentage Rate weighted by the assets under\\n    /// management of the lender\\n    function weightedApr() external view returns (uint256);\\n\\n    /// @notice Withdraws a given amount from lender\\n    /// @param amount The amount the caller wants to withdraw\\n    /// @return Amount actually withdrawn\\n    function withdraw(uint256 amount) external returns (uint256);\\n\\n    /// @notice Withdraws as much as possible in case of emergency and sends it to the `PoolManager`\\n    /// @param amount Amount to withdraw\\n    /// @dev Does not check if any error occurs or if the amount withdrawn is correct\\n    function emergencyWithdraw(uint256 amount) external;\\n\\n    /// @notice Deposits the current balance of the contract to the lending platform\\n    function deposit() external;\\n\\n    /// @notice Withdraws as much as possible from the lending platform\\n    /// @return Whether everything was withdrawn or not\\n    function withdrawAll() external returns (bool);\\n\\n    /// @notice Check if assets are currently managed by the lender\\n    /// @dev We're considering that the strategy has no assets if it has less than 10 of the\\n    /// underlying asset in total to avoid the case where there is dust remaining on the lending market\\n    /// and we cannot withdraw everything\\n    function hasAssets() external view returns (bool);\\n\\n    /// @notice Returns an estimation of the current Annual Percentage Rate after a new deposit\\n    /// of `amount`\\n    /// @param amount Amount to add to the lending platform, and that we want to take into account\\n    /// in the apr computation\\n    function aprAfterDeposit(int256 amount) external view returns (uint256);\\n\\n    /// @notice\\n    /// Removes tokens from this Strategy that are not the type of tokens\\n    /// managed by this Strategy. This may be used in case of accidentally\\n    /// sending the wrong kind of token to this Strategy.\\n    ///\\n    /// Tokens will be sent to `governance()`.\\n    ///\\n    /// This will fail if an attempt is made to sweep `want`, or any tokens\\n    /// that are protected by this Strategy.\\n    ///\\n    /// This may only be called by governance.\\n    /// @param _token The token to transfer out of this poolManager.\\n    /// @param to Address to send the tokens to.\\n    /// @dev\\n    /// Implement `_protectedTokens()` to specify any additional tokens that\\n    /// should be protected from sweeping in addition to `want`.\\n    function sweep(address _token, address to) external;\\n\\n    /// @notice Returns the current balance invested on the lender and related staking contracts\\n    function underlyingBalanceStored() external view returns (uint256 balance);\\n}\\n\",\"keccak256\":\"0xcbddd3da79f6edd333933e33c51e3b97aec4d56489984963223addb85f73ec44\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n// Struct for the parameters associated with a strategy interacting with a collateral `PoolManager`\\n// contract\\nstruct StrategyParams {\\n    // Timestamp of last report made by this strategy\\n    // It is also used to check if a strategy has been initialized\\n    uint256 lastReport;\\n    // Total amount the strategy is expected to have\\n    uint256 totalStrategyDebt;\\n    // The share of the total assets in the `PoolManager` contract that the `strategy` can access to.\\n    uint256 debtRatio;\\n}\\n\\n/// @title IPoolManagerFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the collateral poolManager contracts handling each one type of collateral for\\n/// a given stablecoin\\n/// @dev Only the functions used in other contracts of the protocol are left here\\ninterface IPoolManagerFunctions {\\n    // ============================ Yield Farming ==================================\\n\\n    function creditAvailable() external view returns (uint256);\\n\\n    function debtOutstanding() external view returns (uint256);\\n\\n    function report(\\n        uint256 _gain,\\n        uint256 _loss,\\n        uint256 _debtPayment\\n    ) external;\\n\\n    // ============================= Getters =======================================\\n\\n    function getBalance() external view returns (uint256);\\n\\n    function getTotalAsset() external view returns (uint256);\\n}\\n\\n/// @title IPoolManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additional getters for public variables and mappings\\n/// @dev Used in other contracts of the protocol\\ninterface IPoolManager is IPoolManagerFunctions {\\n    function stableMaster() external view returns (address);\\n\\n    function perpetualManager() external view returns (address);\\n\\n    function token() external view returns (address);\\n\\n    function totalDebt() external view returns (uint256);\\n\\n    function strategies(address _strategy) external view returns (StrategyParams memory);\\n}\\n\",\"keccak256\":\"0x71b9368f8d68ffa38a45d7f02c4d0eced4319d8d53e2c534f5bcc1e9ca2a0d74\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"./IAccessControlAngle.sol\\\";\\n\\nstruct LendStatus {\\n    string name;\\n    uint256 assets;\\n    uint256 rate;\\n    address add;\\n}\\n\\n/// @title IStrategy\\n/// @author Inspired by Yearn with slight changes\\n/// @notice Interface for yield farming strategies\\ninterface IStrategy is IAccessControlAngle {\\n    function estimatedAPR() external view returns (uint256);\\n\\n    function poolManager() external view returns (address);\\n\\n    function want() external view returns (address);\\n\\n    function isActive() external view returns (bool);\\n\\n    function estimatedTotalAssets() external view returns (uint256);\\n\\n    function harvestTrigger(uint256 callCost) external view returns (bool);\\n\\n    function harvest() external;\\n\\n    function withdraw(uint256 _amountNeeded) external returns (uint256 amountFreed, uint256 _loss);\\n\\n    function setEmergencyExit() external;\\n\\n    function addGuardian(address _guardian) external;\\n\\n    function revokeGuardian(address _guardian) external;\\n}\\n\",\"keccak256\":\"0x0676c9594b963b16ec6ee5be640c978f6d337595f0d5f18be7f4701cde942223\",\"license\":\"GPL-3.0\"},\"contracts/strategies/BaseStrategyEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../external/AccessControlAngle.sol\\\";\\nimport \\\"../external/AccessControlAngleUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"../interfaces/IPoolManager.sol\\\";\\n\\nimport \\\"../utils/Errors.sol\\\";\\n\\n/// @title BaseStrategyEvents\\n/// @author Angle Core Team\\n/// @notice Events used in the abstract `BaseStrategy` contract\\ncontract BaseStrategyEvents {\\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\\n\\n    event UpdatedMinReportDelayed(uint256 delay);\\n\\n    event UpdatedMaxReportDelayed(uint256 delay);\\n\\n    event UpdatedDebtThreshold(uint256 debtThreshold);\\n\\n    event UpdatedRewards(address rewards);\\n\\n    event UpdatedIsRewardActivated(bool activated);\\n\\n    event UpdatedRewardAmountAndMinimumAmountMoved(uint256 _rewardAmount, uint256 _minimumAmountMoved);\\n\\n    event EmergencyExitActivated();\\n}\\n\",\"keccak256\":\"0xbcefeb25090e6774e50dbc9694c7df5052ca6f157f08f2be238f164853e64aa2\",\"license\":\"GPL-3.0\"},\"contracts/strategies/BaseStrategyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n                  *                                                  \\u2588                              \\n                *****                                               \\u2593\\u2593\\u2593                             \\n                  *                                               \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                         \\n                                   *            ///.           \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                       \\n                                 *****        ////////            \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                          \\n                                   *       /////////////            \\u2593\\u2593\\u2593                             \\n                     \\u2593\\u2593                  //////////////////          \\u2588         \\u2593\\u2593                   \\n                   \\u2593\\u2593  \\u2593\\u2593             ///////////////////////                \\u2593\\u2593   \\u2593\\u2593                \\n                \\u2593\\u2593       \\u2593\\u2593        ////////////////////////////           \\u2593\\u2593        \\u2593\\u2593              \\n              \\u2593\\u2593            \\u2593\\u2593    /////////\\u2593\\u2593\\u2593///////\\u2593\\u2593\\u2593/////////       \\u2593\\u2593             \\u2593\\u2593            \\n           \\u2593\\u2593                 ,////////////////////////////////////// \\u2593\\u2593                 \\u2593\\u2593         \\n        \\u2593\\u2593                  //////////////////////////////////////////                     \\u2593\\u2593      \\n      \\u2593\\u2593                  //////////////////////\\u2593\\u2593\\u2593\\u2593/////////////////////                          \\n                       ,////////////////////////////////////////////////////                        \\n                    .//////////////////////////////////////////////////////////                     \\n                     .//////////////////////////\\u2588\\u2588.,//////////////////////////\\u2588                     \\n                       .//////////////////////\\u2588\\u2588\\u2588\\u2588..,./////////////////////\\u2588\\u2588                       \\n                        ...////////////////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588.....,.////////////////\\u2588\\u2588\\u2588                        \\n                          ,.,////////////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588 ........,///////////\\u2588\\u2588\\u2588\\u2588                          \\n                            .,.,//////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588      ,.......///////\\u2588\\u2588\\u2588\\u2588                            \\n                               ,..//\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588           ........./\\u2588\\u2588\\u2588\\u2588                               \\n                                 ..,\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                .....,\\u2588\\u2588\\u2588                                 \\n                                    .\\u2588\\u2588                     ,.,\\u2588                                    \\n                                                                                                    \\n                                                                                                    \\n                                                                                                    \\n               \\u2593\\u2593            \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593        \\u2593\\u2593               \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\n             \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593               \\u2593\\u2593               \\u2593\\u2593   \\u2593\\u2593\\u2593\\u2593         \\n           \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593        \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593        \\u2593\\u2593               \\u2593\\u2593\\u2593\\u2593\\u2593             \\n          \\u2593\\u2593\\u2593        \\u2593\\u2593      \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593        \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\n*/\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"./BaseStrategyEvents.sol\\\";\\n\\n/// @title BaseStrategyUpgradeable\\n/// @author Forked from https://github.com/yearn/yearn-managers/blob/master/contracts/BaseStrategy.sol\\n/// @notice `BaseStrategyUpgradeable` implements all of the required functionalities to interoperate\\n/// with the `PoolManager` Contract.\\n/// @dev This contract should be inherited and the abstract methods implemented to adapt the `Strategy`\\n/// to the particular needs it has to create a return.\\nabstract contract BaseStrategyUpgradeable is BaseStrategyEvents, AccessControlAngleUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant BASE = 10**18;\\n    uint256 public constant SECONDS_PER_YEAR = 31556952;\\n\\n    /// @notice Role for `PoolManager` only - keccak256(\\\"POOLMANAGER_ROLE\\\")\\n    bytes32 public constant POOLMANAGER_ROLE = 0x5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe562;\\n    /// @notice Role for guardians and governors - keccak256(\\\"GUARDIAN_ROLE\\\")\\n    bytes32 public constant GUARDIAN_ROLE = 0x55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041;\\n    /// @notice Role for keepers - keccak256(\\\"KEEPER_ROLE\\\")\\n    bytes32 public constant KEEPER_ROLE = 0xfc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab;\\n\\n    // ================================= REFERENCES ================================\\n\\n    /// @notice See note on `setEmergencyExit()`\\n    bool public emergencyExit;\\n\\n    /// @notice Reference to the protocol's collateral `PoolManager`\\n    IPoolManager public poolManager;\\n\\n    /// @notice Reference to the ERC20 farmed by this strategy\\n    IERC20 public want;\\n\\n    /// @notice Base of the ERC20 token farmed by this strategy\\n    uint256 public wantBase;\\n\\n    // ================================= PARAMETERS ================================\\n\\n    /// @notice Use this to adjust the threshold at which running a debt causes a\\n    /// harvest trigger. See `setDebtThreshold()` for more details\\n    uint256 public debtThreshold;\\n\\n    uint256[46] private __gapBaseStrategy;\\n\\n    // ================================ CONSTRUCTOR ================================\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    /// @notice Constructor of the `BaseStrategyUpgradeable`\\n    /// @param _poolManager Address of the `PoolManager` lending collateral to this strategy\\n    /// @param governor Governor address of the protocol\\n    /// @param guardian Address of the guardian\\n    function _initialize(\\n        address _poolManager,\\n        address governor,\\n        address guardian,\\n        address[] memory keepers\\n    ) internal initializer {\\n        poolManager = IPoolManager(_poolManager);\\n        want = IERC20(poolManager.token());\\n        wantBase = 10**(IERC20Metadata(address(want)).decimals());\\n        if (guardian == address(0) || governor == address(0) || governor == guardian) revert ZeroAddress();\\n        // AccessControl\\n        // Governor is guardian so no need for a governor role\\n        _setupRole(GUARDIAN_ROLE, guardian);\\n        _setupRole(GUARDIAN_ROLE, governor);\\n        _setupRole(POOLMANAGER_ROLE, address(_poolManager));\\n        _setRoleAdmin(POOLMANAGER_ROLE, POOLMANAGER_ROLE);\\n        _setRoleAdmin(GUARDIAN_ROLE, POOLMANAGER_ROLE);\\n\\n        // Initializing roles first\\n        uint256 keepersLength = keepers.length;\\n        for (uint256 i; i < keepersLength; ++i) {\\n            if (keepers[i] == address(0)) revert ZeroAddress();\\n            _setupRole(KEEPER_ROLE, keepers[i]);\\n        }\\n        _setRoleAdmin(KEEPER_ROLE, GUARDIAN_ROLE);\\n\\n        debtThreshold = 100 * BASE;\\n        emergencyExit = false;\\n        // Give `PoolManager` unlimited access (might save gas)\\n        want.safeIncreaseAllowance(address(poolManager), type(uint256).max);\\n    }\\n\\n    // =============================== CORE FUNCTIONS ==============================\\n\\n    /// @notice Harvests the Strategy, recognizing any profits or losses and adjusting\\n    /// the Strategy's position.\\n    function harvest() external {\\n        _report();\\n        // Check if free returns are left, and re-invest them\\n        _adjustPosition();\\n    }\\n\\n    /// @notice Same as the function above with a `data` parameter to help adjust the position\\n    /// @dev Since this function is permissionless, strategy implementations should be made\\n    /// to remain safe regardless of the data that is passed in the call\\n    function harvest(bytes memory data) external virtual {\\n        _report();\\n        _adjustPosition(data);\\n    }\\n\\n    /// @notice Same as above with a `borrowInit` parameter to help in case of the convergence of the `adjustPosition`\\n    /// method\\n    function harvest(uint256 borrowInit) external onlyRole(KEEPER_ROLE) {\\n        _report();\\n        _adjustPosition(borrowInit);\\n    }\\n\\n    /// @notice Withdraws `_amountNeeded` to `poolManager`.\\n    /// @param _amountNeeded How much `want` to withdraw.\\n    /// @return amountFreed How much `want` withdrawn.\\n    /// @return _loss Any realized losses\\n    /// @dev This may only be called by the `PoolManager`\\n    function withdraw(uint256 _amountNeeded)\\n        external\\n        onlyRole(POOLMANAGER_ROLE)\\n        returns (uint256 amountFreed, uint256 _loss)\\n    {\\n        // Liquidate as much as possible `want` (up to `_amountNeeded`)\\n        (amountFreed, _loss) = _liquidatePosition(_amountNeeded);\\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\\n        want.safeTransfer(msg.sender, amountFreed);\\n        // NOTE: Reinvest anything leftover on next `tend`/`harvest`\\n    }\\n\\n    // =============================== VIEW FUNCTIONS ==============================\\n\\n    /// @notice Provides an accurate estimate for the total amount of assets\\n    /// (principle + return) that this Strategy is currently managing,\\n    /// denominated in terms of `want` tokens.\\n    /// This total should be \\\"realizable\\\" e.g. the total value that could\\n    /// *actually* be obtained from this Strategy if it were to divest its\\n    /// entire position based on current on-chain conditions.\\n    /// @return The estimated total assets in this Strategy.\\n    /// @dev Care must be taken in using this function, since it relies on external\\n    /// systems, which could be manipulated by the attacker to give an inflated\\n    /// (or reduced) value produced by this function, based on current on-chain\\n    /// conditions (e.g. this function is possible to influence through\\n    /// flashloan attacks, oracle manipulations, or other DeFi attack\\n    /// mechanisms).\\n    function estimatedTotalAssets() public view virtual returns (uint256);\\n\\n    /// @notice Provides an indication of whether this strategy is currently \\\"active\\\"\\n    /// in that it is managing an active position, or will manage a position in\\n    /// the future. This should correlate to `harvest()` activity, so that Harvest\\n    /// events can be tracked externally by indexing agents.\\n    /// @return True if the strategy is actively managing a position.\\n    function isActive() public view returns (bool) {\\n        return estimatedTotalAssets() != 0;\\n    }\\n\\n    // ============================= INTERNAL FUNCTIONS ============================\\n\\n    /// @notice Prepares the Strategy to return, recognizing any profits or losses\\n    /// @dev In the rare case the Strategy is in emergency shutdown, this will exit\\n    /// the Strategy's position.\\n    /// @dev  When `_report()` is called, the Strategy reports to the Manager (via\\n    /// `poolManager.report()`), so in some cases `harvest()` must be called in order\\n    /// to take in profits, to borrow newly available funds from the Manager, or\\n    /// otherwise adjust its position. In other cases `harvest()` must be\\n    /// called to report to the Manager on the Strategy's position, especially if\\n    /// any losses have occurred.\\n    /// @dev As keepers may directly profit from this function, there may be front-running problems with miners bots,\\n    /// we may have to put an access control logic for this function to only allow white-listed addresses to act\\n    /// as keepers for the protocol\\n    function _report() internal {\\n        uint256 profit;\\n        uint256 loss;\\n        uint256 debtOutstanding = poolManager.debtOutstanding();\\n        uint256 debtPayment;\\n        if (emergencyExit) {\\n            // Free up as much capital as possible\\n            uint256 amountFreed = _liquidateAllPositions();\\n            if (amountFreed < debtOutstanding) {\\n                loss = debtOutstanding - amountFreed;\\n            } else if (amountFreed > debtOutstanding) {\\n                profit = amountFreed - debtOutstanding;\\n            }\\n            debtPayment = debtOutstanding - loss;\\n        } else {\\n            // Free up returns for Manager to pull\\n            (profit, loss, debtPayment) = _prepareReturn(debtOutstanding);\\n        }\\n        emit Harvested(profit, loss, debtPayment, debtOutstanding);\\n\\n        // Allows Manager to take up to the \\\"harvested\\\" balance of this contract,\\n        // which is the amount it has earned since the last time it reported to\\n        // the Manager.\\n        poolManager.report(profit, loss, debtPayment);\\n    }\\n\\n    /// @notice Performs any Strategy unwinding or other calls necessary to capture the\\n    /// \\\"free return\\\" this Strategy has generated since the last time its core\\n    /// position(s) were adjusted. Examples include unwrapping extra rewards.\\n    /// This call is only used during \\\"normal operation\\\" of a Strategy, and\\n    /// should be optimized to minimize losses as much as possible.\\n    ///\\n    /// This method returns any realized profits and/or realized losses\\n    /// incurred, and should return the total amounts of profits/losses/debt\\n    /// payments (in `want` tokens) for the Manager's accounting (e.g.\\n    /// `want.balanceOf(this) >= _debtPayment + _profit`).\\n    ///\\n    /// `_debtOutstanding` will be 0 if the Strategy is not past the configured\\n    /// debt limit, otherwise its value will be how far past the debt limit\\n    /// the Strategy is. The Strategy's debt limit is configured in the Manager.\\n    ///\\n    /// NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`.\\n    ///       It is okay for it to be less than `_debtOutstanding`, as that\\n    ///       should only used as a guide for how much is left to pay back.\\n    ///       Payments should be made to minimize loss from slippage, debt,\\n    ///       withdrawal fees, etc.\\n    ///\\n    /// See `poolManager.debtOutstanding()`.\\n    function _prepareReturn(uint256 _debtOutstanding)\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _debtPayment\\n        );\\n\\n    /// @notice Performs any adjustments to the core position(s) of this Strategy given\\n    /// what change the Manager made in the \\\"investable capital\\\" available to the\\n    /// Strategy. Note that all \\\"free capital\\\" in the Strategy after the report\\n    /// was made is available for reinvestment. Also note that this number\\n    /// could be 0, and you should handle that scenario accordingly.\\n    function _adjustPosition() internal virtual;\\n\\n    /// @notice same as _adjustPosition but with an initial parameter\\n    function _adjustPosition(uint256) internal virtual;\\n\\n    /// @notice same as _adjustPosition but with permissionless parameters\\n    function _adjustPosition(bytes memory) internal virtual {\\n        _adjustPosition();\\n    }\\n\\n    /// @notice Liquidates up to `_amountNeeded` of `want` of this strategy's positions,\\n    /// irregardless of slippage. Any excess will be re-invested with `_adjustPosition()`.\\n    /// This function should return the amount of `want` tokens made available by the\\n    /// liquidation. If there is a difference between them, `_loss` indicates whether the\\n    /// difference is due to a realized loss, or if there is some other situation at play\\n    /// (e.g. locked funds) where the amount made available is less than what is needed.\\n    ///\\n    /// NOTE: The invariant `_liquidatedAmount + _loss <= _amountNeeded` should always be maintained\\n    function _liquidatePosition(uint256 _amountNeeded)\\n        internal\\n        virtual\\n        returns (uint256 _liquidatedAmount, uint256 _loss);\\n\\n    /// @notice Liquidates everything and returns the amount that got freed.\\n    /// This function is used during emergency exit instead of `_prepareReturn()` to\\n    /// liquidate all of the Strategy's positions back to the Manager.\\n    function _liquidateAllPositions() internal virtual returns (uint256 _amountFreed);\\n\\n    /// @notice Override this to add all tokens/tokenized positions this contract\\n    /// manages on a *persistent* basis (e.g. not just for swapping back to\\n    /// want ephemerally).\\n    ///\\n    /// NOTE: Do *not* include `want`, already included in `sweep` below.\\n    ///\\n    /// Example:\\n    /// ```\\n    ///    function _protectedTokens() internal override view returns (address[] memory) {\\n    ///      address[] memory protected = new address[](3);\\n    ///      protected[0] = tokenA;\\n    ///      protected[1] = tokenB;\\n    ///      protected[2] = tokenC;\\n    ///      return protected;\\n    ///    }\\n    /// ```\\n    function _protectedTokens() internal view virtual returns (address[] memory);\\n\\n    // ================================= GOVERNANCE ================================\\n\\n    /// @notice Activates emergency exit. Once activated, the Strategy will exit its\\n    /// position upon the next harvest, depositing all funds into the Manager as\\n    /// quickly as is reasonable given on-chain conditions.\\n    /// @dev This may only be called by the `PoolManager`, because when calling this the `PoolManager` should at the same\\n    /// time update the debt ratio\\n    /// @dev This function can only be called once by the `PoolManager` contract\\n    /// @dev See `poolManager.setEmergencyExit()` and `harvest()` for further details.\\n    function setEmergencyExit() external onlyRole(POOLMANAGER_ROLE) {\\n        emergencyExit = true;\\n        emit EmergencyExitActivated();\\n    }\\n\\n    /// @notice Sets how far the Strategy can go into loss without a harvest and report\\n    /// being required.\\n    /// @param _debtThreshold How big of a loss this Strategy may carry without\\n    /// @dev By default this is 0, meaning any losses would cause a harvest which\\n    /// will subsequently report the loss to the Manager for tracking.\\n    function setDebtThreshold(uint256 _debtThreshold) external onlyRole(GUARDIAN_ROLE) {\\n        debtThreshold = _debtThreshold;\\n        emit UpdatedDebtThreshold(_debtThreshold);\\n    }\\n\\n    /// @notice Removes tokens from this Strategy that are not the type of tokens\\n    /// managed by this Strategy. This may be used in case of accidentally\\n    /// sending the wrong kind of token to this Strategy.\\n    ///\\n    /// Tokens will be sent to `governance()`.\\n    ///\\n    /// This will fail if an attempt is made to sweep `want`, or any tokens\\n    /// that are protected by this Strategy.\\n    ///\\n    /// This may only be called by governance.\\n    /// @param _token The token to transfer out of this `PoolManager`.\\n    /// @param to Address to send the tokens to.\\n    /// @dev\\n    /// Implement `_protectedTokens()` to specify any additional tokens that\\n    /// should be protected from sweeping in addition to `want`.\\n    function sweep(address _token, address to) external onlyRole(GUARDIAN_ROLE) {\\n        if (_token == address(want)) revert InvalidToken();\\n\\n        address[] memory __protectedTokens = _protectedTokens();\\n        uint256 protectedTokensLength = __protectedTokens.length;\\n        for (uint256 i; i < protectedTokensLength; ++i)\\n            // In the strategy we use so far, the only protectedToken is the want token\\n            // and this has been checked above\\n            if (_token == __protectedTokens[i]) revert InvalidToken();\\n\\n        IERC20(_token).safeTransfer(to, IERC20(_token).balanceOf(address(this)));\\n    }\\n\\n    // ============================= MANAGER FUNCTIONS =============================\\n\\n    /// @notice Adds a new guardian address and echoes the change to the contracts\\n    /// that interact with this collateral `PoolManager`\\n    /// @param _guardian New guardian address\\n    /// @dev This internal function has to be put in this file because Access Control is not defined\\n    /// in PoolManagerInternal\\n    function addGuardian(address _guardian) external virtual;\\n\\n    /// @notice Revokes the guardian role and propagates the change to other contracts\\n    /// @param guardian Old guardian address to revoke\\n    function revokeGuardian(address guardian) external virtual;\\n}\\n\",\"keccak256\":\"0x5e4df3040b02a882c1ce43fd090503a45916c4c9bd240751b3adec2a7bae9d4c\",\"license\":\"GPL-3.0\"},\"contracts/strategies/OptimizerAPR/OptimizerAPRStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"../BaseStrategyUpgradeable.sol\\\";\\n\\nimport \\\"../../interfaces/IGenericLender.sol\\\";\\n\\n/// @title OptimizerAPRStrategy\\n/// @author Angle Labs, Inc.\\n/// @notice A lender optimisation strategy for any ERC20 asset, leveraging multiple lenders at once\\n/// @dev This strategy works by taking plugins designed for standard lending platforms and automatically\\n/// chooses to invest its funds in the best platforms to generate yield.\\n/// The allocation is greedy and may be sub-optimal so there is an additional option to manually set positions\\ncontract OptimizerAPRStrategy is BaseStrategyUpgradeable {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    // ================================= CONSTANTS =================================\\n\\n    uint64 internal constant _BPS = 10000;\\n\\n    // ============================ CONTRACTS REFERENCES ===========================\\n\\n    IGenericLender[] public lenders;\\n\\n    // ================================= PARAMETERS ================================\\n\\n    uint256 public withdrawalThreshold;\\n\\n    // =================================== EVENTS ==================================\\n\\n    event AddLender(address indexed lender);\\n    event RemoveLender(address indexed lender);\\n\\n    /// @notice Constructor of the `Strategy`\\n    /// @param _poolManager Address of the `PoolManager` lending to this strategy\\n    /// @param governor Address with governor privilege\\n    /// @param guardian Address of the guardian\\n    function initialize(\\n        address _poolManager,\\n        address governor,\\n        address guardian,\\n        address[] memory keepers\\n    ) external {\\n        _initialize(_poolManager, governor, guardian, keepers);\\n        withdrawalThreshold = 1000 * wantBase;\\n    }\\n\\n    // ============================= INTERNAL FUNCTIONS ============================\\n\\n    /// @notice Frees up profit plus `_debtOutstanding`.\\n    /// @param _debtOutstanding Amount to withdraw\\n    /// @return _profit Profit freed by the call\\n    /// @return _loss Loss discovered by the call\\n    /// @return _debtPayment Amount freed to reimburse the debt\\n    /// @dev If `_debtOutstanding` is more than we can free we get as much as possible.\\n    function _prepareReturn(uint256 _debtOutstanding)\\n        internal\\n        override\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _debtPayment\\n        )\\n    {\\n        _debtPayment = _debtOutstanding;\\n\\n        uint256 lentAssets = lentTotalAssets();\\n\\n        uint256 looseAssets = want.balanceOf(address(this));\\n\\n        uint256 total = looseAssets + lentAssets;\\n\\n        if (lentAssets == 0) {\\n            // No position to harvest or profit to report\\n            if (_debtPayment > looseAssets) {\\n                // We can only return looseAssets\\n                _debtPayment = looseAssets;\\n            }\\n\\n            return (_profit, _loss, _debtPayment);\\n        }\\n\\n        uint256 debt = poolManager.strategies(address(this)).totalStrategyDebt;\\n\\n        if (total > debt) {\\n            _profit = total - debt;\\n\\n            uint256 amountToFree = _profit + _debtPayment;\\n            // We need to add outstanding to our profit\\n            // don't need to do logic if there is nothing to free\\n            if (amountToFree != 0 && looseAssets < amountToFree) {\\n                // Withdraw what we can withdraw\\n                _withdrawSome(amountToFree - looseAssets);\\n                uint256 newLoose = want.balanceOf(address(this));\\n\\n                // If we dont have enough money adjust _debtOutstanding and only change profit if needed\\n                if (newLoose < amountToFree) {\\n                    if (_profit > newLoose) {\\n                        _profit = newLoose;\\n                        _debtPayment = 0;\\n                    } else {\\n                        _debtPayment = Math.min(newLoose - _profit, _debtPayment);\\n                    }\\n                }\\n            }\\n        } else {\\n            // Serious loss should never happen but if it does lets record it accurately\\n            _loss = debt - total;\\n\\n            uint256 amountToFree = _loss + _debtPayment;\\n            if (amountToFree != 0 && looseAssets < amountToFree) {\\n                // Withdraw what we can withdraw\\n\\n                _withdrawSome(amountToFree - looseAssets);\\n                uint256 newLoose = want.balanceOf(address(this));\\n\\n                // If we dont have enough money adjust `_debtOutstanding` and only change profit if needed\\n                if (newLoose < amountToFree) {\\n                    if (_loss > newLoose) {\\n                        _loss = newLoose;\\n                        _debtPayment = 0;\\n                    } else {\\n                        _debtPayment = Math.min(newLoose - _loss, _debtPayment);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Estimates highest and lowest apr lenders among a `lendersList`\\n    /// @param lendersList List of all the lender contracts associated to this strategy\\n    /// @return _lowest The index of the lender in the `lendersList` with lowest apr\\n    /// @return _highest The index of the lender with highest apr\\n    /// @return _investmentStrategy Whether we should invest from the lowest to the highest yielding strategy or simply invest loose assets\\n    /// @return _totalApr The APR computed according to (greedy) heuristics that will determine whether positions should be adjusted\\n    /// according to the solution proposed by the caller or according to the greedy method\\n    /// @dev `lendersList` is kept as a parameter to avoid multiplying reads in storage to the `lenders` array\\n    function _estimateGreedyAdjustPosition(IGenericLender[] memory lendersList)\\n        internal\\n        view\\n        returns (\\n            uint256 _lowest,\\n            uint256 _highest,\\n            bool _investmentStrategy,\\n            uint256 _totalApr\\n        )\\n    {\\n        // All loose assets are to be invested\\n        uint256 looseAssets = want.balanceOf(address(this));\\n\\n        // Simple greedy algo:\\n        //  - Get the lowest apr strat\\n        //  - Cycle through and see who could take its funds to improve the overall highest APR\\n        uint256 lowestNav;\\n        uint256 highestApr;\\n        uint256 highestLenderNav;\\n        uint256 totalNav = looseAssets;\\n        uint256[] memory weightedAprs = new uint256[](lendersList.length);\\n        uint256 lendersListLength = lendersList.length;\\n        {\\n            uint256 lowestApr = type(uint256).max;\\n            for (uint256 i; i < lendersListLength; ++i) {\\n                uint256 aprAfterDeposit = lendersList[i].aprAfterDeposit(int256(looseAssets));\\n                uint256 nav = lendersList[i].nav();\\n                totalNav += nav;\\n                if (aprAfterDeposit > highestApr) {\\n                    highestApr = aprAfterDeposit;\\n                    highestLenderNav = nav;\\n                    _highest = i;\\n                }\\n                // Checking strategies that have assets\\n                if (nav > 10 * wantBase) {\\n                    uint256 apr = lendersList[i].apr();\\n                    weightedAprs[i] = apr * nav;\\n                    if (apr < lowestApr) {\\n                        lowestApr = apr;\\n                        lowestNav = nav;\\n                        _lowest = i;\\n                    }\\n                }\\n            }\\n        }\\n\\n        // Comparing if we are better off removing from the lowest APR yielding strategy to invest in the highest or just invest\\n        // the loose assets in the highest yielding strategy\\n        if (totalNav > 0) {\\n            // Case where only loose assets are invested\\n            uint256 weightedApr1;\\n            // Case where funds are divested from the strategy with the lowest APR to be invested in the one with the highest APR\\n            uint256 weightedApr2;\\n            for (uint256 i; i < lendersListLength; ++i) {\\n                if (i == _highest) {\\n                    weightedApr1 += (highestLenderNav + looseAssets) * highestApr;\\n                    if (lowestNav != 0 && lendersListLength > 1)\\n                        weightedApr2 +=\\n                            (highestLenderNav + looseAssets + lowestNav) *\\n                            lendersList[_highest].aprAfterDeposit(int256(lowestNav + looseAssets));\\n                } else if (i == _lowest) {\\n                    weightedApr1 += weightedAprs[i];\\n                    // In the second case funds are divested so the lowest strat does not contribute to the highest APR case\\n                } else {\\n                    weightedApr1 += weightedAprs[i];\\n                    weightedApr2 += weightedAprs[i];\\n                }\\n            }\\n            if (weightedApr2 > weightedApr1 && lendersList.length > 1) {\\n                _investmentStrategy = true;\\n                _totalApr = weightedApr2 / totalNav;\\n            } else _totalApr = weightedApr1 / totalNav;\\n        }\\n    }\\n\\n    /// @inheritdoc BaseStrategyUpgradeable\\n    function _adjustPosition(bytes memory data) internal override {\\n        // Emergency exit is dealt with at beginning of harvest\\n        if (emergencyExit) return;\\n\\n        // Storing the `lenders` array in a cache variable\\n        IGenericLender[] memory lendersList = lenders;\\n        uint256 lendersListLength = lendersList.length;\\n        // We just keep all money in `want` if we dont have any lenders\\n        if (lendersListLength == 0) return;\\n\\n        uint64[] memory lenderSharesHint = abi.decode(data, (uint64[]));\\n\\n        uint256 estimatedAprHint;\\n        int256[] memory lenderAdjustedAmounts;\\n        if (lenderSharesHint.length != 0) (estimatedAprHint, lenderAdjustedAmounts) = estimatedAPR(lenderSharesHint);\\n        (uint256 lowest, uint256 highest, bool _investmentStrategy, uint256 _totalApr) = _estimateGreedyAdjustPosition(\\n            lendersList\\n        );\\n\\n        // The hint was successful --> we find a better allocation than the current one\\n        if (_totalApr < estimatedAprHint) {\\n            uint256 deltaWithdraw;\\n            for (uint256 i; i < lendersListLength; ++i) {\\n                if (lenderAdjustedAmounts[i] < 0) {\\n                    deltaWithdraw +=\\n                        uint256(-lenderAdjustedAmounts[i]) -\\n                        lendersList[i].withdraw(uint256(-lenderAdjustedAmounts[i]));\\n                }\\n            }\\n\\n            // If the strategy didn't succeed to withdraw the intended funds -> revert and force the greedy path\\n            if (deltaWithdraw > withdrawalThreshold) revert IncorrectDistribution();\\n\\n            for (uint256 i; i < lendersListLength; ++i) {\\n                // As `deltaWithdraw` is inferior to `withdrawalThreshold` (a dust)\\n                // It is not critical to compensate on an arbitrary lender as it will only slightly impact global APR\\n                if (lenderAdjustedAmounts[i] > int256(deltaWithdraw)) {\\n                    lenderAdjustedAmounts[i] -= int256(deltaWithdraw);\\n                    deltaWithdraw = 0;\\n                    want.safeTransfer(address(lendersList[i]), uint256(lenderAdjustedAmounts[i]));\\n                    lendersList[i].deposit();\\n                } else if (lenderAdjustedAmounts[i] > 0) deltaWithdraw -= uint256(lenderAdjustedAmounts[i]);\\n            }\\n        } else {\\n            if (_investmentStrategy) {\\n                lendersList[lowest].withdrawAll();\\n            }\\n\\n            uint256 bal = want.balanceOf(address(this));\\n            if (bal != 0) {\\n                want.safeTransfer(address(lendersList[highest]), bal);\\n                lendersList[highest].deposit();\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc BaseStrategyUpgradeable\\n    function _adjustPosition() internal override {\\n        _adjustPosition(abi.encode(new uint64[](0)));\\n    }\\n\\n    /// @inheritdoc BaseStrategyUpgradeable\\n    function _adjustPosition(uint256) internal override {\\n        _adjustPosition(abi.encode(new uint64[](0)));\\n    }\\n\\n    /// @notice Withdraws a given amount from lenders\\n    /// @param _amount The amount to withdraw\\n    /// @dev Cycle through withdrawing from worst rate first\\n    function _withdrawSome(uint256 _amount) internal returns (uint256 amountWithdrawn) {\\n        IGenericLender[] memory lendersList = lenders;\\n        uint256 lendersListLength = lendersList.length;\\n        if (lendersListLength == 0) {\\n            return 0;\\n        }\\n\\n        // Don't withdraw dust\\n        uint256 _withdrawalThreshold = withdrawalThreshold;\\n        if (_amount < _withdrawalThreshold) {\\n            return 0;\\n        }\\n\\n        amountWithdrawn;\\n        // In most situations this will only run once. Only big withdrawals will be a gas guzzler\\n        uint256 j;\\n        while (amountWithdrawn < _amount - _withdrawalThreshold) {\\n            uint256 lowestApr = type(uint256).max;\\n            uint256 lowest;\\n            for (uint256 i; i < lendersListLength; ++i) {\\n                if (lendersList[i].hasAssets()) {\\n                    uint256 apr = lendersList[i].apr();\\n                    if (apr < lowestApr) {\\n                        lowestApr = apr;\\n                        lowest = i;\\n                    }\\n                }\\n            }\\n            if (!lendersList[lowest].hasAssets()) {\\n                return amountWithdrawn;\\n            }\\n            uint256 amountWithdrawnFromStrat = lendersList[lowest].withdraw(_amount - amountWithdrawn);\\n            // To avoid staying on the same strat if we can't withdraw anythin from it\\n            amountWithdrawn += amountWithdrawnFromStrat;\\n            ++j;\\n            // not best solution because it would be better to move to the 2nd lowestAPR instead of quiting\\n            if (amountWithdrawnFromStrat == 0) {\\n                return amountWithdrawn;\\n            }\\n            // To avoid want infinite loop\\n            if (j >= 6) {\\n                return amountWithdrawn;\\n            }\\n        }\\n    }\\n\\n    /// @notice Liquidates up to `_amountNeeded` of `want` of this strategy's positions,\\n    /// irregardless of slippage. Any excess will be re-invested with `_adjustPosition()`.\\n    /// This function should return the amount of `want` tokens made available by the\\n    /// liquidation. If there is a difference between them, `_loss` indicates whether the\\n    /// difference is due to a realized loss, or if there is some other sitution at play\\n    /// (e.g. locked funds) where the amount made available is less than what is needed.\\n    ///\\n    /// NOTE: The invariant `_liquidatedAmount + _loss <= _amountNeeded` should always be maintained\\n    function _liquidatePosition(uint256 _amountNeeded) internal override returns (uint256 _amountFreed, uint256 _loss) {\\n        uint256 _balance = want.balanceOf(address(this));\\n\\n        if (_balance >= _amountNeeded) {\\n            //if we don't set reserve here withdrawer will be sent our full balance\\n            return (_amountNeeded, 0);\\n        } else {\\n            uint256 received = _withdrawSome(_amountNeeded - _balance) + (_balance);\\n            if (received >= _amountNeeded) {\\n                return (_amountNeeded, 0);\\n            } else {\\n                return (received, 0);\\n            }\\n        }\\n    }\\n\\n    /// @notice Liquidates everything and returns the amount that got freed.\\n    /// This function is used during emergency exit instead of `_prepareReturn()` to\\n    /// liquidate all of the Strategy's positions back to the Manager.\\n    function _liquidateAllPositions() internal override returns (uint256 _amountFreed) {\\n        (_amountFreed, ) = _liquidatePosition(estimatedTotalAssets());\\n    }\\n\\n    // =============================== VIEW FUNCTIONS ==============================\\n\\n    /// @notice View function to check the current state of the strategy\\n    /// @return Returns the status of all lenders attached the strategy\\n    function lendStatuses() external view returns (LendStatus[] memory) {\\n        uint256 lendersLength = lenders.length;\\n        LendStatus[] memory statuses = new LendStatus[](lendersLength);\\n        for (uint256 i; i < lendersLength; ++i) {\\n            LendStatus memory s;\\n            s.name = lenders[i].lenderName();\\n            s.add = address(lenders[i]);\\n            s.assets = lenders[i].nav();\\n            s.rate = lenders[i].apr();\\n            statuses[i] = s;\\n        }\\n        return statuses;\\n    }\\n\\n    /// @notice View function to check the total assets lent\\n    function lentTotalAssets() public view returns (uint256) {\\n        uint256 nav;\\n        uint256 lendersLength = lenders.length;\\n        for (uint256 i; i < lendersLength; ++i) {\\n            nav += lenders[i].nav();\\n        }\\n        return nav;\\n    }\\n\\n    /// @notice View function to check the total assets managed by the strategy\\n    function estimatedTotalAssets() public view override returns (uint256 nav) {\\n        nav = lentTotalAssets() + want.balanceOf(address(this));\\n    }\\n\\n    /// @notice View function to check the number of lending platforms\\n    function numLenders() external view returns (uint256) {\\n        return lenders.length;\\n    }\\n\\n    /// @notice Returns the weighted apr of all lenders\\n    /// @dev It's computed by doing: `sum(nav * apr) / totalNav`\\n    function estimatedAPR() external view returns (uint256) {\\n        uint256 bal = estimatedTotalAssets();\\n        if (bal == 0) {\\n            return 0;\\n        }\\n\\n        uint256 weightedAPR;\\n        uint256 lendersLength = lenders.length;\\n        for (uint256 i; i < lendersLength; ++i) {\\n            weightedAPR += lenders[i].weightedApr();\\n        }\\n\\n        return weightedAPR / bal;\\n    }\\n\\n    /// @notice Returns the weighted apr in an hypothetical world where the strategy splits its nav\\n    /// in respect to shares\\n    /// @param shares List of shares (in bps of the nav) that should be allocated to each lender\\n    function estimatedAPR(uint64[] memory shares)\\n        public\\n        view\\n        returns (uint256 weightedAPR, int256[] memory lenderAdjustedAmounts)\\n    {\\n        uint256 lenderLength = lenders.length;\\n        lenderAdjustedAmounts = new int256[](lenderLength);\\n        if (lenderLength != shares.length) revert IncorrectListLength();\\n\\n        uint256 bal = estimatedTotalAssets();\\n        if (bal == 0) return (weightedAPR, lenderAdjustedAmounts);\\n\\n        uint256 share;\\n        for (uint256 i; i < lenderLength; ++i) {\\n            share += shares[i];\\n            uint256 futureDeposit = (bal * shares[i]) / _BPS;\\n            // It won't overflow for `decimals <= 18`, as it would mean gigantic amounts\\n            int256 adjustedAmount = int256(futureDeposit) - int256(lenders[i].nav());\\n            lenderAdjustedAmounts[i] = adjustedAmount;\\n            weightedAPR += futureDeposit * lenders[i].aprAfterDeposit(adjustedAmount);\\n        }\\n        if (share != 10000) revert InvalidShares();\\n\\n        weightedAPR /= bal;\\n    }\\n\\n    /// @notice Prevents governance from withdrawing `want` tokens\\n    function _protectedTokens() internal view override returns (address[] memory) {\\n        address[] memory protected = new address[](1);\\n        protected[0] = address(want);\\n        return protected;\\n    }\\n\\n    // ================================= GOVERNANCE ================================\\n\\n    /// @notice Changes the withdrawal threshold\\n    /// @param _threshold New withdrawal threshold\\n    /// @dev governor, guardian or `PoolManager` only\\n    function setWithdrawalThreshold(uint256 _threshold) external onlyRole(GUARDIAN_ROLE) {\\n        withdrawalThreshold = _threshold;\\n    }\\n\\n    /// @notice Add lenders for the strategy to choose between\\n    /// @param newLender The adapter to the added lending platform\\n    /// @dev Governor, guardian or `PoolManager` only\\n    function addLender(IGenericLender newLender) external onlyRole(GUARDIAN_ROLE) {\\n        if (newLender.strategy() != address(this)) revert UndockedLender();\\n        uint256 lendersLength = lenders.length;\\n        for (uint256 i; i < lendersLength; ++i) {\\n            if (address(newLender) == address(lenders[i])) revert LenderAlreadyAdded();\\n        }\\n        lenders.push(newLender);\\n\\n        emit AddLender(address(newLender));\\n    }\\n\\n    /// @notice Removes a lending platform and fails if total withdrawal is impossible\\n    /// @param lender The address of the adapter to the lending platform to remove\\n    function safeRemoveLender(address lender) external onlyRole(KEEPER_ROLE) {\\n        _removeLender(lender, false);\\n    }\\n\\n    /// @notice Removes a lending platform even if total withdrawal is impossible\\n    /// @param lender The address of the adapter to the lending platform to remove\\n    function forceRemoveLender(address lender) external onlyRole(GUARDIAN_ROLE) {\\n        _removeLender(lender, true);\\n    }\\n\\n    /// @notice Internal function to handle lending platform removal\\n    /// @param lender The address of the adapter for the lending platform to remove\\n    /// @param force Whether it is required that all the funds are withdrawn prior to removal\\n    function _removeLender(address lender, bool force) internal {\\n        IGenericLender[] memory lendersList = lenders;\\n        uint256 lendersListLength = lendersList.length;\\n        for (uint256 i; i < lendersListLength; ++i) {\\n            if (lender == address(lendersList[i])) {\\n                bool allWithdrawn = lendersList[i].withdrawAll();\\n\\n                if (!force && !allWithdrawn) revert FailedWithdrawal();\\n\\n                // Put the last index here\\n                // then remove last index\\n                if (i != lendersListLength - 1) {\\n                    lenders[i] = lendersList[lendersListLength - 1];\\n                }\\n\\n                // Pop shortens array by 1 thereby deleting the last index\\n                lenders.pop();\\n\\n                // If balance to spend we might as well put it into the best lender\\n                if (want.balanceOf(address(this)) != 0) {\\n                    _adjustPosition();\\n                }\\n\\n                emit RemoveLender(lender);\\n\\n                return;\\n            }\\n        }\\n        revert NonExistentLender();\\n    }\\n\\n    // ============================= MANAGER FUNCTIONS =============================\\n\\n    /// @notice Adds a new guardian address and echoes the change to the contracts\\n    /// that interact with this collateral `PoolManager`\\n    /// @param _guardian New guardian address\\n    /// @dev This internal function has to be put in this file because `AccessControl` is not defined\\n    /// in `PoolManagerInternal`\\n    function addGuardian(address _guardian) external override onlyRole(POOLMANAGER_ROLE) {\\n        // Granting the new role\\n        // Access control for this contract\\n        _grantRole(GUARDIAN_ROLE, _guardian);\\n        // Propagating the new role to underyling lenders\\n        uint256 lendersLength = lenders.length;\\n        for (uint256 i; i < lendersLength; ++i) {\\n            lenders[i].grantRole(GUARDIAN_ROLE, _guardian);\\n        }\\n    }\\n\\n    /// @notice Revokes the guardian role and propagates the change to other contracts\\n    /// @param guardian Old guardian address to revoke\\n    function revokeGuardian(address guardian) external override onlyRole(POOLMANAGER_ROLE) {\\n        _revokeRole(GUARDIAN_ROLE, guardian);\\n        uint256 lendersLength = lenders.length;\\n        for (uint256 i; i < lendersLength; ++i) {\\n            lenders[i].revokeRole(GUARDIAN_ROLE, guardian);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc8d580d60cff417dc0656ad79ec3750dfde5c85de930ca48e85973e7534c2cf6\",\"license\":\"GPL-3.0\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nerror ErrorSwap();\\nerror FailedToMint();\\nerror FailedToRecoverETH();\\nerror FailedToRedeem();\\nerror FailedWithdrawal();\\nerror IncompatibleLengths();\\nerror IncorrectDistribution();\\nerror IncorrectListLength();\\nerror InvalidOracleValue();\\nerror InvalidSender();\\nerror InvalidSetOfParameters();\\nerror InvalidShares();\\nerror InvalidToken();\\nerror InvalidWithdrawCheck();\\nerror LenderAlreadyAdded();\\nerror NoLockedLiquidity();\\nerror NonExistentLender();\\nerror PoolNotIncentivized();\\nerror ProtectedToken();\\nerror TooHighParameterValue();\\nerror TooSmallAmount();\\nerror TooSmallAmountOut();\\nerror TooSmallStakingPeriod();\\nerror UndockedLender();\\nerror WrongCToken();\\nerror ZeroAddress();\\n\",\"keccak256\":\"0xfa9b61c467cdf0c762bd8e9d8f5eba220a05f1b2056e60567c5677977b2ac80c\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60808060405234620000d3576000549060ff8260081c169081600014620000c857303b155b156200006f57501590816200005c575b506200004b575b60405161508c9081620000d98239f35b61ff0019600054166000556200003b565b61ffff1916610101176000553862000034565b62461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b60ff83161562000024565b600080fdfe6101006040908082526004918236101561001857600080fd5b600092833560e01c9283630b6d1d1714612087575082630c016dc01461202e5782630e6e15f014611ff35782630f969b8714611f855782631d12f28b14611f485782631f1fcd5114611ef557826322f3e2d414611eb1578263248a9ca314611e6857826324ea54f414611e0f5782632e1a7d4d14611d9c5782632f2ff15d14611ca5578263364bc15a14611c4c57826336568abe14611b8e5782634641257d14611b575782634786b0cb14611b165782635641ec0314611ad45782635a5cd45e14611a99578263708ba9bd1461199a57826376ee75d8146119515782637985fd51146119145782638baf2957146118cb57826391d1485414611859578263929eea21146117d557826393084b34146115db578263a217fddf146115a2578263a526d83b1461148b578263af648c3d146112eb578263b8dc491b14611120578263bb927c46146110e3578263ce5c7f611461104c578263d547741f14610ff2578263dc4c90d314610f9c578263ddc6326214610f50578263e6a69ab814610f13578263e6bfbfd8146106a3578263ec342ad014610662578263efbb5cb014610620578263fcc5f59a1461026157505063fcf2d0ad146101d557600080fd5b3461025e57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261025e5761020c336125d8565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0060335416176033557f17fa25a1c2ac074f71f0cf4f6af525c06fab7d83eff5ffcf6df5277f2919ae248180a180f35b80fd5b83903461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c5760655461029d816121c8565b916102aa85519384612187565b8183527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06102d7836121c8565b01845b818110610605575050835b8281106103a557505050825191602080840190808552835180925285850181878460051b880101950193965b83881061031e5786860387f35b90919293948380827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08a60019503018652885190610364825160808084528301906122a3565b918381015184830152868101518783015273ffffffffffffffffffffffffffffffffffffffff60608092015116910152970193019701969093929193610311565b6103ad6146e9565b6103b6826121e0565b905488517f8b2021760000000000000000000000000000000000000000000000000000000081528881878173ffffffffffffffffffffffffffffffffffffffff8096600398891b1c165afa9081156105fb578991610576575b5083528061041c856121e0565b905490841b1c16606084015280610432856121e0565b905490841b1c1691895180937fc1590cd7000000000000000000000000000000000000000000000000000000008252818860209687935afa90811561056c579187939185938c91610534575b508387015261048c876121e0565b9054911b1c168a51928380927f57ded9c90000000000000000000000000000000000000000000000000000000082525afa91821561052a5788926104f6575b5050878201526104f191906104e0828761324f565b526104eb818661324f565b50613222565b6102e5565b90809250813d8311610523575b61050d8183612187565b8101031261051f57516104f1896104cb565b8680fd5b503d610503565b89513d8a823e3d90fd5b929450509181813d8311610565575b61054d8183612187565b81010312610561579183918793518d61047e565b8980fd5b503d610543565b8b513d8c823e3d90fd5b90503d808a833e6105878183612187565b81019060209081818403126105f75780519067ffffffffffffffff82116105f357019082601f830112156105f757908b92918151926105d16105c885612246565b95519586612187565b8385528184840101116105f3576105ed92918482019101612280565b8a61040f565b8b80fd5b8a80fd5b8a513d8b823e3d90fd5b6020906106106146e9565b828288010152016102da565b5080fd5b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c5760209061065b6147eb565b9051908152f35b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c5760209051670de0b6b3a76400008152f35b915034610f0f5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f0f576106dc6120e9565b6106e46120c1565b916044359173ffffffffffffffffffffffffffffffffffffffff9182841691828503610f0b576064359267ffffffffffffffff8411610bcc5736602385011215610bcc578388013596610736886121c8565b9061074385519283612187565b8882526020958683016024809b60051b83010191368311610dea578b01905b828210610eef575050508a549760ff93848a60081c1680600014610ee657303b155b15610e655789898f928f90159d8e610e37575b506033547fffffffffffffffffffffff0000000000000000000000000000000000000000ff74ffffffffffffffffffffffffffffffffffffffff008c60081b1691161790816033558b51809481937ffc0c546a00000000000000000000000000000000000000000000000000000000835260081c165afa908115610e2d578b8f928c928591610e00575b5016807fffffffffffffffffffffffff000000000000000000000000000000000000000060345416176034558a51928380927f313ce5670000000000000000000000000000000000000000000000000000000082525afa918215610df557908792610db7575b5016604d8111610d8c57600a0a6035558015908115610d81575b8115610d75575b50610d4d578b949392916108be6108c392612c34565b612c34565b7f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe5629182855260019384885288878720911690818752885281878720541615610ce7575b50908291859387965284885284868520015492807fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9481868880a480868887200155857f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50419786898098528383838320015489898480a42001558151908d5b828110610be157505050507ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab808c5283875283868d200154918c80a4828920015568056bc75e2d63100000603655603354927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00841660335580603454169360081c168151917fdd62ed3e000000000000000000000000000000000000000000000000000000008352308884015281878401528383604481885afa928315610bd7578993610ba4575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8301809311610b7957517f095ea7b3000000000000000000000000000000000000000000000000000000009381019390935273ffffffffffffffffffffffffffffffffffffffff168583019081526020810191909152610b049290610aff9083906040015b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101845283612187565b612e2b565b610b4e575b603554916103e89280840293840403610b2457505060665580f35b601184917f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff8354168355610b09565b868960118a7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b9092508381813d8311610bd0575b610bbc8183612187565b81010312610bcc57519138610a4c565b8880fd5b503d610bb2565b81513d8b823e3d90fd5b90919293945089610bf2828661324f565b511615610cbf57808e8b610c09610c4e948861324f565b51167ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab808352898d528b83208284528d52858c8420541615610c59575b505050613222565b908694939291610984565b808352898d528b83208284528d528b83208a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a48e3880610c46565b8c88517fd92e233d000000000000000000000000000000000000000000000000000000008152fd5b8386528488528686208187528852868620857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790553390847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8880a438610906565b8a86517fd92e233d000000000000000000000000000000000000000000000000000000008152fd5b905088831614386108a8565b838a161591506108a1565b8b8e60118f7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8092508a8092503d8311610dee575b610dd08183612187565b81010312610dea57518581168103610dea57859038610887565b8d80fd5b503d610dc6565b8951903d90823e3d90fd5b610e209150833d8511610e26575b610e188183612187565b810190613263565b38610821565b503d610e0e565b89513d84823e3d90fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661010117845538610797565b60848d602e8e8c8c51937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b858b1615610784565b81358a81168103610f07578152908801908801610762565b8e80fd5b8780fd5b8280fd5b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c57602090516301e185588152f35b833461025e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261025e57610f8933612769565b610f9161303b565b610f99614255565b80f35b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c5760209073ffffffffffffffffffffffffffffffffffffffff60335460081c169051908152f35b915034610f0f57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f0f57610f99913561104760016110346120c1565b93838752816020528620015433906128fa565b612d10565b915034610f0f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f0f578282359267ffffffffffffffff841161061c573660238501121561061c57830135926110b46110ab85612246565b93519384612187565b838352366024858301011161061c5783610f999460246020930183860137830101526110de61303b565b6136f8565b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c576020906065549051908152f35b915034610f0f57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f0f576111586120e9565b6111606120c1565b9061116a336122e6565b73ffffffffffffffffffffffffffffffffffffffff908180603454169116918183146112c35784519061119c8261214f565b60018252602092838301843682378351156112975752815191885b83811061124e57505050508351947f70a0823100000000000000000000000000000000000000000000000000000000865230908601528085602481855afa9384156112455750859361120f575b50610f999350612db2565b90925083813d831161123e575b6112268183612187565b8101031261123a57610f9992519138611204565b8380fd5b503d61121c565b513d87823e3d90fd5b82611259828461324f565b5116861461126f5761126a90613222565b6111b7565b8888517fc1ab6dc1000000000000000000000000000000000000000000000000000000008152fd5b60248a60328b7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8585517fc1ab6dc1000000000000000000000000000000000000000000000000000000008152fd5b90915034610f0f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f0f576113256120e9565b9161132f336125d8565b837f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504180825260016020528282209373ffffffffffffffffffffffffffffffffffffffff8096169485845260205260ff8484205416611425575b60655495835b878110611399578480f35b816113a3826121e0565b90549060031b1c16803b156114215785809160448951809481937fd547741f0000000000000000000000000000000000000000000000000000000083528a8a8401528d60248401525af18015611417579061140392916114085750613222565b61138e565b6114119061210c565b386104eb565b87513d88823e3d90fd5b8580fd5b81835260016020528383208584526020528383207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541690553385837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b8680a4611388565b90915034610f0f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f0f57906114c66120e9565b906114d0336125d8565b6114d982612c34565b8360655493819373ffffffffffffffffffffffffffffffffffffffff809116945b868110611505578380f35b8161150f826121e0565b90549060031b1c16803b1561159e5784809160448851809481937f2f2ff15d0000000000000000000000000000000000000000000000000000000083527f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50418a8401528c60248401525af18015611594579061158f92916114085750613222565b6114fa565b86513d87823e3d90fd5b8480fd5b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c5751908152602090f35b83823461061c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c57823573ffffffffffffffffffffffffffffffffffffffff918282169283830361159e57611638336122e6565b81517fa8c62e760000000000000000000000000000000000000000000000000000000081526020818881885afa9081156117cb5786916117ad575b5081309116036117855760655491855b838110611737575050506801000000000000000081101561170b57906116b28260016116e494016065556121e0565b90919082549060031b9173ffffffffffffffffffffffffffffffffffffffff9283811b93849216901b16911916179055565b7f1e7b117a6591133f0b36fc2c24d59f8465d806fdcad63aa33246b45fd62c89ff8280a280f35b6024846041877f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b82611741826121e0565b90549060031b1c16861461175d5761175890613222565b611683565b8782517f7cc7731c000000000000000000000000000000000000000000000000000000008152fd5b8582517feeacc72d000000000000000000000000000000000000000000000000000000008152fd5b6117c5915060203d8111610e2657610e188183612187565b87611673565b83513d88823e3d90fd5b90915034610f0f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f0f5735606554811015610f0f5773ffffffffffffffffffffffffffffffffffffffff906065602094527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c70154169051908152f35b90915034610f0f57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f0f578160209360ff926118996120c1565b903582526001865273ffffffffffffffffffffffffffffffffffffffff83832091168252855220541690519015158152f35b833461025e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261025e57610f996119066120e9565b61190f33612769565b614edd565b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c576020906066549051908152f35b833461025e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261025e57610f9961198c6120e9565b611995336122e6565b614c3a565b833461025e57602091827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c57803567ffffffffffffffff9182821161123a573660238301121561123a578101356119f6816121c8565b92611a0387519485612187565b81845260248685019260051b8401019236841161142157959695602401915b838310611a7b5750505050611a369061497e565b9190835194848695860192865281860152835180925280606086019401925b828110611a6457505050500390f35b835185528695509381019392810192600101611a55565b8297969735828116810361051f578152959695918701918701611a22565b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c5760209061065b614894565b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c5760209060ff6033541690519015158152f35b83903461061c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c57611b50336122e6565b3560665580f35b833461025e57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261025e57610f9161303b565b83903461061c57827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c57611bc66120c1565b903373ffffffffffffffffffffffffffffffffffffffff831603611bef5790610f999135612d10565b60649060208551917f08c379a0000000000000000000000000000000000000000000000000000000008352820152600260248201527f37310000000000000000000000000000000000000000000000000000000000006044820152fd5b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c57602090517ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab8152f35b90915034610f0f57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f0f573590611ce06120c1565b908284526001602052611cfa6001828620015433906128fa565b828452600160205273ffffffffffffffffffffffffffffffffffffffff81852092169182855260205260ff818520541615611d33578380f35b8284526001602052808420828552602052832060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8480a43880808380f35b833461025e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261025e5750611de090611dda336125d8565b35614625565b611e03823373ffffffffffffffffffffffffffffffffffffffff60345416612db2565b82519182526020820152f35b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c57602090517f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50418152f35b90915034610f0f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f0f57816020936001923581528285522001549051908152f35b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c57602090611eec6147eb565b15159051908152f35b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c5760209073ffffffffffffffffffffffffffffffffffffffff603454169051908152f35b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c576020906036549051908152f35b90915034610f0f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f0f577fa68ba126373d04c004c5748c300c9fca12bd444b3d4332e261f3bd2bac4a8600916020913590611fe7336122e6565b8160365551908152a180f35b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c5760209061065b61471f565b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c57602090517f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe5628152f35b84903461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c576020906035548152f35b6024359073ffffffffffffffffffffffffffffffffffffffff821682036120e457565b600080fd5b6004359073ffffffffffffffffffffffffffffffffffffffff821682036120e457565b67ffffffffffffffff811161212057604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761212057604052565b6080810190811067ffffffffffffffff82111761212057604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761212057604052565b67ffffffffffffffff81116121205760051b60200190565b6065548110156122175760656000527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c70190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b67ffffffffffffffff811161212057601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b8381106122935750506000910152565b8181015183820152602001612283565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6020936122df81518092818752878088019101612280565b0116010190565b73ffffffffffffffffffffffffffffffffffffffff1660008181527fe8fad4b49f5ba25b2c682cfec2ac50a7a40bbd1e12ab51733ec3e9c2f6f1c5db6020908152604080832054909391927f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50419290916001919060ff161561236957505050505050565b61237290612aae565b9285519161237f8361216b565b604283528583019360603686378351156125ab576030855383518210156125ab5790607860218501536041915b8183116124e05750505061248457604861248093869361244a9361243b98519889937f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008a860152612406815180928c603789019101612280565b8401917f206973206d697373696e6720726f6c6520000000000000000000000000000000603784015251809386840190612280565b01036028810187520185612187565b519283927f08c379a0000000000000000000000000000000000000000000000000000000008452600484015260248301906122a3565b0390fd5b6064848651907f08c379a000000000000000000000000000000000000000000000000000000000825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f8116601081101561257e577f3031323334353637383961626364656600000000000000000000000000000000901a61251d8587612a9d565b5360041c928015612551577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0191906123ac565b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526032600452fd5b807f4e487b7100000000000000000000000000000000000000000000000000000000602492526032600452fd5b73ffffffffffffffffffffffffffffffffffffffff1660008181527f015260285f12fe1d77221203cd7e5aa67b79d47399b4bedd98b8730e56d911bf6020908152604080832054909391927f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe5629290916001919060ff161561265b57505050505050565b61266490612aae565b928551916126718361216b565b604283528583019360603686378351156125ab576030855383518210156125ab5790607860218501536041915b8183116126f85750505061248457604861248093869361244a9361243b98519889937f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008a860152612406815180928c603789019101612280565b909192600f8116601081101561257e577f3031323334353637383961626364656600000000000000000000000000000000901a6127358587612a9d565b5360041c928015612551577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01919061269e565b73ffffffffffffffffffffffffffffffffffffffff1660008181527f10c15aae13326e9b33c92ffbb94efb7492c500f0cca324caca9bd1aca194ed186020908152604080832054909391927ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab9290916001919060ff16156127ec57505050505050565b6127f590612aae565b928551916128028361216b565b604283528583019360603686378351156125ab576030855383518210156125ab5790607860218501536041915b8183116128895750505061248457604861248093869361244a9361243b98519889937f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008a860152612406815180928c603789019101612280565b909192600f8116601081101561257e577f3031323334353637383961626364656600000000000000000000000000000000901a6128c68587612a9d565b5360041c928015612551577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01919061282f565b60009080825260019160209280845260409473ffffffffffffffffffffffffffffffffffffffff868420911690818452855260ff86842054161561294057505050505050565b61294990612aae565b928551916129568361216b565b604283528583019360603686378351156125ab576030855383518210156125ab5790607860218501536041915b8183116129dd5750505061248457604861248093869361244a9361243b98519889937f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008a860152612406815180928c603789019101612280565b909192600f8116601081101561257e577f3031323334353637383961626364656600000000000000000000000000000000901a612a1a8587612a9d565b5360041c928015612551577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019190612983565b81810292918115918404141715612a6157565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b91908201809211612a6157565b908151811015612217570160200190565b604051906060820182811067ffffffffffffffff82111761212057604052602a82526020820160403682378251156122175760309053815160019081101561221757607860218401536029905b808211612b69575050612b0b5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015612c06577f3031323334353637383961626364656600000000000000000000000000000000901a612ba58486612a9d565b5360041c918015612bd8577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190612afb565b602460007f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b602460007f4e487b710000000000000000000000000000000000000000000000000000000081526032600452fd5b73ffffffffffffffffffffffffffffffffffffffff1660008181527fe8fad4b49f5ba25b2c682cfec2ac50a7a40bbd1e12ab51733ec3e9c2f6f1c5db60205260408120549091907f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50419060ff1615612caa57505050565b8083526001602052604083208284526020526040832060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4565b90600091808352600160205273ffffffffffffffffffffffffffffffffffffffff6040842092169182845260205260ff604084205416612d4f57505050565b808352600160205260408320828452602052604083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff90921660248301526044820192909252612e1191610aff8260648101610ad3565b565b908160209103126120e4575180151581036120e45790565b604051612eb59173ffffffffffffffffffffffffffffffffffffffff16612e518261214f565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af13d15612f5e573d91612e9983612246565b92612ea76040519485612187565b83523d60008785013e612f62565b80519081612ec257505050565b8280612ed2938301019101612e13565b15612eda5750565b608490604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b6060915b91929015612fdd5750815115612f76575090565b3b15612f7f5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015612ff05750805190602001fd5b612480906040519182917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260248301906122a3565b91908203918211612a6157565b600080603354916040918251937fbf3759b500000000000000000000000000000000000000000000000000000000855273ffffffffffffffffffffffffffffffffffffffff90602086600481858560081c165afa9586156132185784966131e4575b5060ff16156131a8576130b66130b16147eb565b614625565b508580821015613185576130cb92935061302e565b905b7f4c0f499ffe6befa0ca7c826b0916cf87bea98de658013e76938489368d60d50960806130fa848861302e565b965b86519086825285602083015288888301526060820152a160335460081c16803b156120e45760009283606492865197889586947fa1d9bafc0000000000000000000000000000000000000000000000000000000086526004860152602485015260448401525af190811561317b57506131725750565b612e119061210c565b513d6000823e3d90fd5b90818111613195575b50506130cd565b6131a092945061302e565b91843861318e565b849250608091506131d97f4c0f499ffe6befa0ca7c826b0916cf87bea98de658013e76938489368d60d5099561328f565b9691939093946130fc565b9095506020813d8211613210575b816131ff60209383612187565b8101031261123a57519460ff61309d565b3d91506131f2565b85513d86823e3d90fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114612a615760010190565b80518210156122175760209160051b010190565b908160209103126120e4575173ffffffffffffffffffffffffffffffffffffffff811681036120e45790565b906000809182849261329f61471f565b9573ffffffffffffffffffffffffffffffffffffffff908160345416906040938451998a927f70a08231000000000000000000000000000000000000000000000000000000009485855230600486015284602460209687935afa9b8c156135d357889c613600575b50613312828d612a90565b91156135dd5750602460608660335460081c168851928380927f39ebf8230000000000000000000000000000000000000000000000000000000082523060048301525afa9081156135d3579084918991613544575b500151918282111561347057509061337e9161302e565b98613389888b612a90565b9384151580613467575b6133a1575b50505050505050565b6133b46133af84938761302e565b6142f4565b506034541692602486518095819382523060048301525afa93841561345e5750849361342e575b505081106133ee575b8080808080613398565b9192828692961160001461340857505092905b38806133e4565b909491856134159161302e565b91508082101561342757505b90613401565b9050613421565b9080929350813d8311613457575b6134468183612187565b81010312610f0f57519038806133db565b503d61343c565b513d86823e3d90fd5b50848210613393565b9a995061347c9161302e565b97613487888a612a90565b938415158061353b575b61349e5750505050505050565b6134ac6133af84938761302e565b506034541692602486518095819382523060048301525afa93841561345e5750849361350b575b505081106134e5578080808080613398565b919282859295116000146134fe575050919038806133e4565b909391846134159161302e565b9080929350813d8311613534575b6135238183612187565b81010312610f0f57519038806134d3565b503d613519565b50848210613491565b9150506060813d82116135cb575b8161355f60609383612187565b81010312610f0b578651906060820182811067ffffffffffffffff82111761359e57885280518252808501518286015287015187820152839038613367565b60248a7f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b3d9150613552565b87513d8a823e3d90fd5b955050505050508592939450949094116135f8575b50829190565b9150386135f2565b909b508381813d8311613628575b6136188183612187565b81010312610f0b57519a38613307565b503d61360e565b60405190606554808352826020918282019060656000527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c7936000905b82821061368257505050612e1192500383612187565b855473ffffffffffffffffffffffffffffffffffffffff168452600195860195889550938101939091019061366c565b7f80000000000000000000000000000000000000000000000000000000000000008114612a615760000390565b81810392916000138015828513169184121617612a6157565b60ff60335416613c735761370a61362f565b8060c052518060a05215613c735780518101906020818184019303126120e457602081015167ffffffffffffffff918282116120e457019180603f840112156120e45760208301519161375c836121c8565b9361376a6040519586612187565b8385526040602086019460051b8201019283116120e457604001925b8284106142035750505050600090606060e05280516141f0575b506000906000608052600090816024602073ffffffffffffffffffffffffffffffffffffffff60345416604051928380927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa9081156141e357608051916141ab575b50608051908182908260c05151917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061385d613847856121c8565b946138556040519687612187565b8086526121c8565b0136602085013760c05151937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60805190603554915b878110613f1b5750505085613d37575b5050505050505010600014613b6e575050600090815b60a0518110156139d75760006138d18260e05161324f565b51126138e6575b6138e190613222565b6138b9565b9160006138fe6138f88560e05161324f565b516136b2565b602073ffffffffffffffffffffffffffffffffffffffff6139218760c05161324f565b511660246139346138f88960e05161324f565b60405195869384927f2e1a7d4d00000000000000000000000000000000000000000000000000000000845260048401525af19182156139cb57600092613995575b509161398761398d926138e19461302e565b90612a90565b9290506138d8565b90916020823d6020116139c3575b816139b060209383612187565b8101031261025e57505190613987613975565b3d91506139a3565b6040513d6000823e3d90fd5b50906066548111613b44576000905b60a051821015613b4057806139fd8360e05161324f565b511315613afe57613a1a90613a148360e05161324f565b516136df565b613a268260e05161324f565b52600090613a7c73ffffffffffffffffffffffffffffffffffffffff6034541673ffffffffffffffffffffffffffffffffffffffff613a678460c05161324f565b5116613a758460e05161324f565b5191612db2565b73ffffffffffffffffffffffffffffffffffffffff613a9d8260c05161324f565b5116803b15610f0f578280916004604051809481937fd0e30db00000000000000000000000000000000000000000000000000000000083525af18015613af35790613aed92916114085750613222565b906139e6565b6040513d85823e3d90fd5b906000613b0d8260e05161324f565b5113613b1d575b613aed90613222565b90613b38613aed91613b318460e05161324f565b519061302e565b919050613b14565b5050565b60046040517f5c3810af000000000000000000000000000000000000000000000000000000008152fd5b613ca8575b5073ffffffffffffffffffffffffffffffffffffffff603454166040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152602081602481855afa9081156139cb57600091613c76575b5080613bdb575050565b613c0a9173ffffffffffffffffffffffffffffffffffffffff613c0260805160c05161324f565b511690612db2565b73ffffffffffffffffffffffffffffffffffffffff613c2d60805160c05161324f565b5116803b156120e457600080916004604051809481937fd0e30db00000000000000000000000000000000000000000000000000000000083525af180156139cb57613172575b50565b906020823d602011613ca0575b81613c9060209383612187565b8101031261025e57505138613bd1565b3d9150613c83565b602073ffffffffffffffffffffffffffffffffffffffff613ccd60009360c05161324f565b51166004604051809481937f853828b60000000000000000000000000000000000000000000000000000000083525af180156139cb5715613b7357613d299060203d602011613d30575b613d218183612187565b810190612e13565b5038613b73565b503d613d17565b94965088958695869590915b818710613d97575050505050505080851180613d8a575b15613d79575050613d6d9060019361421c565b388080808080806138a3565b613d859291945061421c565b613d6d565b50600160c0515111613d5a565b909192939495966080518814600014613ed057613dc19061398783613dbc8988612a90565b612a4e565b9684151580613ec6575b613de4575b613dd990613222565b959493929190613d43565b9a613df885613df38887612a90565b612a90565b73ffffffffffffffffffffffffffffffffffffffff613e1b60805160c05161324f565b5116906020613e2a8989612a90565b6024604051809581937fa7d385e200000000000000000000000000000000000000000000000000000000835260048301525afa918215613ebb578b92613e85575b5091613987613e7d92613dd994612a4e565b9b9050613dd0565b9091506020813d602011613eb3575b81613ea160209383612187565b810103126105f7575190613987613e6b565b3d9150613e94565b6040513d8d823e3d90fd5b5060018311613dcb565b878d03613ef557613eef613dd991613ee88a8a61324f565b5190612a90565b97613222565b613f15889c613ee8613f0e613dd994613ee88d8d61324f565b9a8a61324f565b9b613222565b602498602073ffffffffffffffffffffffffffffffffffffffff613f418460c05161324f565b51166040519b8c80927fa7d385e20000000000000000000000000000000000000000000000000000000082528b60048301525afa998a1561419e578e9a614169575b50600490602073ffffffffffffffffffffffffffffffffffffffff613faa8560c05161324f565b5116604051938480927fc1590cd70000000000000000000000000000000000000000000000000000000082525afa9182156140e9578f92614133575b5081613ff191612a90565b998b8111614123575b50600a8481020484036140f65783600a028111614021575b5061401c90613222565b613893565b6004602073ffffffffffffffffffffffffffffffffffffffff6140468560c05161324f565b5116604051928380927f57ded9c90000000000000000000000000000000000000000000000000000000082525afa9081156140e9578f916140b7575b5061408d8282612a4e565b614097848b61324f565b528381106140a6575b50614012565b925094509c5061401c8d90386140a0565b90506020813d6020116140e1575b816140d260209383612187565b81010312610f07575138614082565b3d91506140c5565b8f604051903d90823e3d90fd5b60248e7f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b60808390529a5093508338613ffa565b9091506020813d602011614161575b8161414f60209383612187565b81010312610f07575190613ff1613fe6565b3d9150614142565b9099506020813d602011614196575b8161418560209383612187565b81010312610dea5751986004613f83565b3d9150614178565b8e604051903d90823e3d90fd5b90506020813d6020116141db575b816141c660209383612187565b810103126141d557513861380c565b60805180fd5b3d91506141b9565b6040513d608051823e3d90fd5b6141fa915061497e565b60e052386137a0565b835182811681036120e457815260209384019301613786565b8115614226570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6040516020908181019067ffffffffffffffff928183108484111761212057929082604052600081526040519360408501918180870152518092526060850193926000905b8382106142db575050505050906110de81612e1193037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282612187565b845181168652948201949382019360019091019061429a565b6000806142ff61362f565b92835192831561461d57606654948583106146145781959395935b614324818561302e565b87101561460b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff968397845b8881106144c457505073ffffffffffffffffffffffffffffffffffffffff978861437b828661324f565b51166040998a51928380937f5be9b2d3000000000000000000000000000000000000000000000000000000008252602094859160049788915afa9081156144ba57899161449d575b501561448e57602483926143d88e938a61324f565b511694896143e6888d61302e565b935196879485937f2e1a7d4d0000000000000000000000000000000000000000000000000000000085528401525af1998a156112455750859961445a575b50506144338861443992612a90565b95613222565b96156144505760068710156144505795939561431a565b5050505091505090565b9080929950813d8311614487575b6144728183612187565b8101031261123a575196614433614439614424565b503d614468565b50505050965050505050505090565b6144b49150843d8611613d3057613d218183612187565b386143c3565b8d513d8b823e3d90fd5b73ffffffffffffffffffffffffffffffffffffffff806144e4838861324f565b5116906040918251918280927f5be9b2d3000000000000000000000000000000000000000000000000000000008252602093849160049687915afa908115614601578b916145e4575b50614545575b5050505061454090613222565b614351565b8190614551868b61324f565b51168451938480927f57ded9c90000000000000000000000000000000000000000000000000000000082525afa9283156145db575088926145ad575b505082811061459f575b808080614533565b915098506145408990614597565b90809250813d83116145d4575b6145c48183612187565b8101031261051f5751388061458d565b503d6145ba565b513d8a823e3d90fd5b6145fb9150833d8511613d3057613d218183612187565b3861452d565b85513d8d823e3d90fd5b50505050505090565b50935050505090565b935050505090565b6024602073ffffffffffffffffffffffffffffffffffffffff60345416604051928380927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa9081156139cb576000916146b8575b50818110614692575090600090565b80613df36133af6146a3938561302e565b8181106146b1575090600090565b9160009150565b906020823d82116146e1575b816146d160209383612187565b8101031261025e57505138614683565b3d91506146c4565b604051906080820182811067ffffffffffffffff8211176121205760405260006060838181528260208201528260408201520152565b600060655481905b80821061473357505090565b909161473e836121e0565b9054906040918251917fc1590cd70000000000000000000000000000000000000000000000000000000083528260048173ffffffffffffffffffffffffffffffffffffffff602095869560031b1c165afa92831561317b57506000926147ba575b50506147ae906147b492612a90565b92613222565b90614727565b81819392933d83116147e4575b6147d18183612187565b8101031261025e575051816147ae61479f565b503d6147c7565b6024906147f661471f565b602073ffffffffffffffffffffffffffffffffffffffff60345416604051948580927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa9283156139cb57600093614861575b509161485e9192612a90565b90565b6020813d821161488c575b8161487960209383612187565b8101031261123a5751925061485e614852565b3d915061486c565b61489c6147eb565b908115614978576000916065549280935b8085106148c0575061485e92935061421c565b906148ca856121e0565b9054906040918251917f116ac4a30000000000000000000000000000000000000000000000000000000083528260048173ffffffffffffffffffffffffffffffffffffffff602095869560031b1c165afa92831561317b5750600092614947575b505061493a9061494092612a90565b94613222565b93906148ad565b81819392933d8311614971575b61495e8183612187565b8101031261025e5750518161493a61492b565b503d614954565b60009150565b600090600091606554614990816121c8565b926040916149a083519586612187565b8085527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06149cd826121c8565b016020903682880137859683518303614c11576149e86147eb565b968715614c0357509291908380935b838510614a4257505050505061271003614a19575090614a169161421c565b91565b600490517f6edcc523000000000000000000000000000000000000000000000000000000008152fd5b9091929396612710614a80614a6d67ffffffffffffffff9889614a658d8861324f565b511690612a90565b97614a788b8661324f565b51168b612a4e565b04614a8a896121e0565b9190548951927fc1590cd70000000000000000000000000000000000000000000000000000000084526004938881868173ffffffffffffffffffffffffffffffffffffffff8097600397881b1c165afa908115614bf957918f8a94928f948b91614bae575b50846024949392614b0e614b06614b14948b6136df565b97889261324f565b526121e0565b9054911b1c16948c5195869384927fa7d385e20000000000000000000000000000000000000000000000000000000084528301525afa918215614ba4578592614b73575b5091613987613eef92614b6a94612a4e565b939291906149f7565b9091508581813d8311614b9d575b614b8b8183612187565b8101031261159e575190613987614b58565b503d614b81565b89513d87823e3d90fd5b9395929450505081813d8311614bf2575b614bc98183612187565b81010312610f0b5788928f92614b148f8095614b0e614b06602497519450505092939450614aef565b503d614bbf565b8c513d8a823e3d90fd5b989750955050505050509190565b600485517fcdeedcbd000000000000000000000000000000000000000000000000000000008152fd5b614c4261362f565b9081519160005b838110614c7a5760046040517f30990b67000000000000000000000000000000000000000000000000000000008152fd5b73ffffffffffffffffffffffffffffffffffffffff80614c9a838561324f565b511690808516918214614cb7575050614cb290613222565b614c49565b90946000945081614cca8486959661324f565b511692604094855180957f853828b600000000000000000000000000000000000000000000000000000000825260209687918160049b8c925af18015614ed257614eb5575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff92838101908111614e875784818303614e66575b5050505060659081548015614e3857849392910190614d88614d66836121e0565b73ffffffffffffffffffffffffffffffffffffffff82549160031b1b19169055565b55603454169360248451809681937f70a0823100000000000000000000000000000000000000000000000000000000835230908301525afa91821561317b5750600091614e0c575b509050614dff575b7f95c84dbc5fd872c46b0e4290775a1a4ea1c8d760f9e4d38f48ba71b6f9a667db600080a2565b614e07614255565b614dd8565b82813d8311614e31575b614e208183612187565b8101031261025e5750518038614dd0565b503d614e16565b6031877f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b614e766116b292614e7e9561324f565b5116916121e0565b38808084614d45565b6011887f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b614ecb90863d8811613d3057613d218183612187565b5038614d0f565b87513d6000823e3d90fd5b614ee561362f565b9081519160005b838110614f1d5760046040517f30990b67000000000000000000000000000000000000000000000000000000008152fd5b73ffffffffffffffffffffffffffffffffffffffff80614f3d838561324f565b511690808516918214614f5a575050614f5590613222565b614eec565b90946000945081614f6d8486959661324f565b511692604094855180957f853828b600000000000000000000000000000000000000000000000000000000825260209687918160049b8c925af1908115614ed257600091615039575b5015615011577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff92838101908111614e875784818303614e66575050505060659081548015614e3857849392910190614d88614d66836121e0565b8686517fa1248235000000000000000000000000000000000000000000000000000000008152fd5b6150509150863d8811613d3057613d218183612187565b38614fb656fea2646970667358221220253f687410d062e3d20cc43e53ef42861f85e0c45153a61314a7003d37c12c3d64736f6c63430008110033",
  "deployedBytecode": "0x6101006040908082526004918236101561001857600080fd5b600092833560e01c9283630b6d1d1714612087575082630c016dc01461202e5782630e6e15f014611ff35782630f969b8714611f855782631d12f28b14611f485782631f1fcd5114611ef557826322f3e2d414611eb1578263248a9ca314611e6857826324ea54f414611e0f5782632e1a7d4d14611d9c5782632f2ff15d14611ca5578263364bc15a14611c4c57826336568abe14611b8e5782634641257d14611b575782634786b0cb14611b165782635641ec0314611ad45782635a5cd45e14611a99578263708ba9bd1461199a57826376ee75d8146119515782637985fd51146119145782638baf2957146118cb57826391d1485414611859578263929eea21146117d557826393084b34146115db578263a217fddf146115a2578263a526d83b1461148b578263af648c3d146112eb578263b8dc491b14611120578263bb927c46146110e3578263ce5c7f611461104c578263d547741f14610ff2578263dc4c90d314610f9c578263ddc6326214610f50578263e6a69ab814610f13578263e6bfbfd8146106a3578263ec342ad014610662578263efbb5cb014610620578263fcc5f59a1461026157505063fcf2d0ad146101d557600080fd5b3461025e57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261025e5761020c336125d8565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0060335416176033557f17fa25a1c2ac074f71f0cf4f6af525c06fab7d83eff5ffcf6df5277f2919ae248180a180f35b80fd5b83903461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c5760655461029d816121c8565b916102aa85519384612187565b8183527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06102d7836121c8565b01845b818110610605575050835b8281106103a557505050825191602080840190808552835180925285850181878460051b880101950193965b83881061031e5786860387f35b90919293948380827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08a60019503018652885190610364825160808084528301906122a3565b918381015184830152868101518783015273ffffffffffffffffffffffffffffffffffffffff60608092015116910152970193019701969093929193610311565b6103ad6146e9565b6103b6826121e0565b905488517f8b2021760000000000000000000000000000000000000000000000000000000081528881878173ffffffffffffffffffffffffffffffffffffffff8096600398891b1c165afa9081156105fb578991610576575b5083528061041c856121e0565b905490841b1c16606084015280610432856121e0565b905490841b1c1691895180937fc1590cd7000000000000000000000000000000000000000000000000000000008252818860209687935afa90811561056c579187939185938c91610534575b508387015261048c876121e0565b9054911b1c168a51928380927f57ded9c90000000000000000000000000000000000000000000000000000000082525afa91821561052a5788926104f6575b5050878201526104f191906104e0828761324f565b526104eb818661324f565b50613222565b6102e5565b90809250813d8311610523575b61050d8183612187565b8101031261051f57516104f1896104cb565b8680fd5b503d610503565b89513d8a823e3d90fd5b929450509181813d8311610565575b61054d8183612187565b81010312610561579183918793518d61047e565b8980fd5b503d610543565b8b513d8c823e3d90fd5b90503d808a833e6105878183612187565b81019060209081818403126105f75780519067ffffffffffffffff82116105f357019082601f830112156105f757908b92918151926105d16105c885612246565b95519586612187565b8385528184840101116105f3576105ed92918482019101612280565b8a61040f565b8b80fd5b8a80fd5b8a513d8b823e3d90fd5b6020906106106146e9565b828288010152016102da565b5080fd5b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c5760209061065b6147eb565b9051908152f35b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c5760209051670de0b6b3a76400008152f35b915034610f0f5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f0f576106dc6120e9565b6106e46120c1565b916044359173ffffffffffffffffffffffffffffffffffffffff9182841691828503610f0b576064359267ffffffffffffffff8411610bcc5736602385011215610bcc578388013596610736886121c8565b9061074385519283612187565b8882526020958683016024809b60051b83010191368311610dea578b01905b828210610eef575050508a549760ff93848a60081c1680600014610ee657303b155b15610e655789898f928f90159d8e610e37575b506033547fffffffffffffffffffffff0000000000000000000000000000000000000000ff74ffffffffffffffffffffffffffffffffffffffff008c60081b1691161790816033558b51809481937ffc0c546a00000000000000000000000000000000000000000000000000000000835260081c165afa908115610e2d578b8f928c928591610e00575b5016807fffffffffffffffffffffffff000000000000000000000000000000000000000060345416176034558a51928380927f313ce5670000000000000000000000000000000000000000000000000000000082525afa918215610df557908792610db7575b5016604d8111610d8c57600a0a6035558015908115610d81575b8115610d75575b50610d4d578b949392916108be6108c392612c34565b612c34565b7f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe5629182855260019384885288878720911690818752885281878720541615610ce7575b50908291859387965284885284868520015492807fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9481868880a480868887200155857f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50419786898098528383838320015489898480a42001558151908d5b828110610be157505050507ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab808c5283875283868d200154918c80a4828920015568056bc75e2d63100000603655603354927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00841660335580603454169360081c168151917fdd62ed3e000000000000000000000000000000000000000000000000000000008352308884015281878401528383604481885afa928315610bd7578993610ba4575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8301809311610b7957517f095ea7b3000000000000000000000000000000000000000000000000000000009381019390935273ffffffffffffffffffffffffffffffffffffffff168583019081526020810191909152610b049290610aff9083906040015b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101845283612187565b612e2b565b610b4e575b603554916103e89280840293840403610b2457505060665580f35b601184917f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff8354168355610b09565b868960118a7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b9092508381813d8311610bd0575b610bbc8183612187565b81010312610bcc57519138610a4c565b8880fd5b503d610bb2565b81513d8b823e3d90fd5b90919293945089610bf2828661324f565b511615610cbf57808e8b610c09610c4e948861324f565b51167ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab808352898d528b83208284528d52858c8420541615610c59575b505050613222565b908694939291610984565b808352898d528b83208284528d528b83208a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a48e3880610c46565b8c88517fd92e233d000000000000000000000000000000000000000000000000000000008152fd5b8386528488528686208187528852868620857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790553390847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8880a438610906565b8a86517fd92e233d000000000000000000000000000000000000000000000000000000008152fd5b905088831614386108a8565b838a161591506108a1565b8b8e60118f7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8092508a8092503d8311610dee575b610dd08183612187565b81010312610dea57518581168103610dea57859038610887565b8d80fd5b503d610dc6565b8951903d90823e3d90fd5b610e209150833d8511610e26575b610e188183612187565b810190613263565b38610821565b503d610e0e565b89513d84823e3d90fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661010117845538610797565b60848d602e8e8c8c51937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b858b1615610784565b81358a81168103610f07578152908801908801610762565b8e80fd5b8780fd5b8280fd5b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c57602090516301e185588152f35b833461025e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261025e57610f8933612769565b610f9161303b565b610f99614255565b80f35b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c5760209073ffffffffffffffffffffffffffffffffffffffff60335460081c169051908152f35b915034610f0f57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f0f57610f99913561104760016110346120c1565b93838752816020528620015433906128fa565b612d10565b915034610f0f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f0f578282359267ffffffffffffffff841161061c573660238501121561061c57830135926110b46110ab85612246565b93519384612187565b838352366024858301011161061c5783610f999460246020930183860137830101526110de61303b565b6136f8565b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c576020906065549051908152f35b915034610f0f57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f0f576111586120e9565b6111606120c1565b9061116a336122e6565b73ffffffffffffffffffffffffffffffffffffffff908180603454169116918183146112c35784519061119c8261214f565b60018252602092838301843682378351156112975752815191885b83811061124e57505050508351947f70a0823100000000000000000000000000000000000000000000000000000000865230908601528085602481855afa9384156112455750859361120f575b50610f999350612db2565b90925083813d831161123e575b6112268183612187565b8101031261123a57610f9992519138611204565b8380fd5b503d61121c565b513d87823e3d90fd5b82611259828461324f565b5116861461126f5761126a90613222565b6111b7565b8888517fc1ab6dc1000000000000000000000000000000000000000000000000000000008152fd5b60248a60328b7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8585517fc1ab6dc1000000000000000000000000000000000000000000000000000000008152fd5b90915034610f0f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f0f576113256120e9565b9161132f336125d8565b837f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504180825260016020528282209373ffffffffffffffffffffffffffffffffffffffff8096169485845260205260ff8484205416611425575b60655495835b878110611399578480f35b816113a3826121e0565b90549060031b1c16803b156114215785809160448951809481937fd547741f0000000000000000000000000000000000000000000000000000000083528a8a8401528d60248401525af18015611417579061140392916114085750613222565b61138e565b6114119061210c565b386104eb565b87513d88823e3d90fd5b8580fd5b81835260016020528383208584526020528383207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541690553385837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b8680a4611388565b90915034610f0f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f0f57906114c66120e9565b906114d0336125d8565b6114d982612c34565b8360655493819373ffffffffffffffffffffffffffffffffffffffff809116945b868110611505578380f35b8161150f826121e0565b90549060031b1c16803b1561159e5784809160448851809481937f2f2ff15d0000000000000000000000000000000000000000000000000000000083527f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50418a8401528c60248401525af18015611594579061158f92916114085750613222565b6114fa565b86513d87823e3d90fd5b8480fd5b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c5751908152602090f35b83823461061c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c57823573ffffffffffffffffffffffffffffffffffffffff918282169283830361159e57611638336122e6565b81517fa8c62e760000000000000000000000000000000000000000000000000000000081526020818881885afa9081156117cb5786916117ad575b5081309116036117855760655491855b838110611737575050506801000000000000000081101561170b57906116b28260016116e494016065556121e0565b90919082549060031b9173ffffffffffffffffffffffffffffffffffffffff9283811b93849216901b16911916179055565b7f1e7b117a6591133f0b36fc2c24d59f8465d806fdcad63aa33246b45fd62c89ff8280a280f35b6024846041877f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b82611741826121e0565b90549060031b1c16861461175d5761175890613222565b611683565b8782517f7cc7731c000000000000000000000000000000000000000000000000000000008152fd5b8582517feeacc72d000000000000000000000000000000000000000000000000000000008152fd5b6117c5915060203d8111610e2657610e188183612187565b87611673565b83513d88823e3d90fd5b90915034610f0f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f0f5735606554811015610f0f5773ffffffffffffffffffffffffffffffffffffffff906065602094527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c70154169051908152f35b90915034610f0f57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f0f578160209360ff926118996120c1565b903582526001865273ffffffffffffffffffffffffffffffffffffffff83832091168252855220541690519015158152f35b833461025e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261025e57610f996119066120e9565b61190f33612769565b614edd565b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c576020906066549051908152f35b833461025e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261025e57610f9961198c6120e9565b611995336122e6565b614c3a565b833461025e57602091827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c57803567ffffffffffffffff9182821161123a573660238301121561123a578101356119f6816121c8565b92611a0387519485612187565b81845260248685019260051b8401019236841161142157959695602401915b838310611a7b5750505050611a369061497e565b9190835194848695860192865281860152835180925280606086019401925b828110611a6457505050500390f35b835185528695509381019392810192600101611a55565b8297969735828116810361051f578152959695918701918701611a22565b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c5760209061065b614894565b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c5760209060ff6033541690519015158152f35b83903461061c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c57611b50336122e6565b3560665580f35b833461025e57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261025e57610f9161303b565b83903461061c57827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c57611bc66120c1565b903373ffffffffffffffffffffffffffffffffffffffff831603611bef5790610f999135612d10565b60649060208551917f08c379a0000000000000000000000000000000000000000000000000000000008352820152600260248201527f37310000000000000000000000000000000000000000000000000000000000006044820152fd5b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c57602090517ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab8152f35b90915034610f0f57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f0f573590611ce06120c1565b908284526001602052611cfa6001828620015433906128fa565b828452600160205273ffffffffffffffffffffffffffffffffffffffff81852092169182855260205260ff818520541615611d33578380f35b8284526001602052808420828552602052832060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8480a43880808380f35b833461025e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261025e5750611de090611dda336125d8565b35614625565b611e03823373ffffffffffffffffffffffffffffffffffffffff60345416612db2565b82519182526020820152f35b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c57602090517f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50418152f35b90915034610f0f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f0f57816020936001923581528285522001549051908152f35b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c57602090611eec6147eb565b15159051908152f35b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c5760209073ffffffffffffffffffffffffffffffffffffffff603454169051908152f35b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c576020906036549051908152f35b90915034610f0f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f0f577fa68ba126373d04c004c5748c300c9fca12bd444b3d4332e261f3bd2bac4a8600916020913590611fe7336122e6565b8160365551908152a180f35b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c5760209061065b61471f565b83823461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c57602090517f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe5628152f35b84903461061c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261061c576020906035548152f35b6024359073ffffffffffffffffffffffffffffffffffffffff821682036120e457565b600080fd5b6004359073ffffffffffffffffffffffffffffffffffffffff821682036120e457565b67ffffffffffffffff811161212057604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761212057604052565b6080810190811067ffffffffffffffff82111761212057604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761212057604052565b67ffffffffffffffff81116121205760051b60200190565b6065548110156122175760656000527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c70190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b67ffffffffffffffff811161212057601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b8381106122935750506000910152565b8181015183820152602001612283565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6020936122df81518092818752878088019101612280565b0116010190565b73ffffffffffffffffffffffffffffffffffffffff1660008181527fe8fad4b49f5ba25b2c682cfec2ac50a7a40bbd1e12ab51733ec3e9c2f6f1c5db6020908152604080832054909391927f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50419290916001919060ff161561236957505050505050565b61237290612aae565b9285519161237f8361216b565b604283528583019360603686378351156125ab576030855383518210156125ab5790607860218501536041915b8183116124e05750505061248457604861248093869361244a9361243b98519889937f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008a860152612406815180928c603789019101612280565b8401917f206973206d697373696e6720726f6c6520000000000000000000000000000000603784015251809386840190612280565b01036028810187520185612187565b519283927f08c379a0000000000000000000000000000000000000000000000000000000008452600484015260248301906122a3565b0390fd5b6064848651907f08c379a000000000000000000000000000000000000000000000000000000000825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f8116601081101561257e577f3031323334353637383961626364656600000000000000000000000000000000901a61251d8587612a9d565b5360041c928015612551577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0191906123ac565b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526032600452fd5b807f4e487b7100000000000000000000000000000000000000000000000000000000602492526032600452fd5b73ffffffffffffffffffffffffffffffffffffffff1660008181527f015260285f12fe1d77221203cd7e5aa67b79d47399b4bedd98b8730e56d911bf6020908152604080832054909391927f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe5629290916001919060ff161561265b57505050505050565b61266490612aae565b928551916126718361216b565b604283528583019360603686378351156125ab576030855383518210156125ab5790607860218501536041915b8183116126f85750505061248457604861248093869361244a9361243b98519889937f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008a860152612406815180928c603789019101612280565b909192600f8116601081101561257e577f3031323334353637383961626364656600000000000000000000000000000000901a6127358587612a9d565b5360041c928015612551577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01919061269e565b73ffffffffffffffffffffffffffffffffffffffff1660008181527f10c15aae13326e9b33c92ffbb94efb7492c500f0cca324caca9bd1aca194ed186020908152604080832054909391927ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab9290916001919060ff16156127ec57505050505050565b6127f590612aae565b928551916128028361216b565b604283528583019360603686378351156125ab576030855383518210156125ab5790607860218501536041915b8183116128895750505061248457604861248093869361244a9361243b98519889937f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008a860152612406815180928c603789019101612280565b909192600f8116601081101561257e577f3031323334353637383961626364656600000000000000000000000000000000901a6128c68587612a9d565b5360041c928015612551577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01919061282f565b60009080825260019160209280845260409473ffffffffffffffffffffffffffffffffffffffff868420911690818452855260ff86842054161561294057505050505050565b61294990612aae565b928551916129568361216b565b604283528583019360603686378351156125ab576030855383518210156125ab5790607860218501536041915b8183116129dd5750505061248457604861248093869361244a9361243b98519889937f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008a860152612406815180928c603789019101612280565b909192600f8116601081101561257e577f3031323334353637383961626364656600000000000000000000000000000000901a612a1a8587612a9d565b5360041c928015612551577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019190612983565b81810292918115918404141715612a6157565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b91908201809211612a6157565b908151811015612217570160200190565b604051906060820182811067ffffffffffffffff82111761212057604052602a82526020820160403682378251156122175760309053815160019081101561221757607860218401536029905b808211612b69575050612b0b5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015612c06577f3031323334353637383961626364656600000000000000000000000000000000901a612ba58486612a9d565b5360041c918015612bd8577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190612afb565b602460007f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b602460007f4e487b710000000000000000000000000000000000000000000000000000000081526032600452fd5b73ffffffffffffffffffffffffffffffffffffffff1660008181527fe8fad4b49f5ba25b2c682cfec2ac50a7a40bbd1e12ab51733ec3e9c2f6f1c5db60205260408120549091907f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50419060ff1615612caa57505050565b8083526001602052604083208284526020526040832060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4565b90600091808352600160205273ffffffffffffffffffffffffffffffffffffffff6040842092169182845260205260ff604084205416612d4f57505050565b808352600160205260408320828452602052604083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff90921660248301526044820192909252612e1191610aff8260648101610ad3565b565b908160209103126120e4575180151581036120e45790565b604051612eb59173ffffffffffffffffffffffffffffffffffffffff16612e518261214f565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af13d15612f5e573d91612e9983612246565b92612ea76040519485612187565b83523d60008785013e612f62565b80519081612ec257505050565b8280612ed2938301019101612e13565b15612eda5750565b608490604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b6060915b91929015612fdd5750815115612f76575090565b3b15612f7f5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015612ff05750805190602001fd5b612480906040519182917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260248301906122a3565b91908203918211612a6157565b600080603354916040918251937fbf3759b500000000000000000000000000000000000000000000000000000000855273ffffffffffffffffffffffffffffffffffffffff90602086600481858560081c165afa9586156132185784966131e4575b5060ff16156131a8576130b66130b16147eb565b614625565b508580821015613185576130cb92935061302e565b905b7f4c0f499ffe6befa0ca7c826b0916cf87bea98de658013e76938489368d60d50960806130fa848861302e565b965b86519086825285602083015288888301526060820152a160335460081c16803b156120e45760009283606492865197889586947fa1d9bafc0000000000000000000000000000000000000000000000000000000086526004860152602485015260448401525af190811561317b57506131725750565b612e119061210c565b513d6000823e3d90fd5b90818111613195575b50506130cd565b6131a092945061302e565b91843861318e565b849250608091506131d97f4c0f499ffe6befa0ca7c826b0916cf87bea98de658013e76938489368d60d5099561328f565b9691939093946130fc565b9095506020813d8211613210575b816131ff60209383612187565b8101031261123a57519460ff61309d565b3d91506131f2565b85513d86823e3d90fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114612a615760010190565b80518210156122175760209160051b010190565b908160209103126120e4575173ffffffffffffffffffffffffffffffffffffffff811681036120e45790565b906000809182849261329f61471f565b9573ffffffffffffffffffffffffffffffffffffffff908160345416906040938451998a927f70a08231000000000000000000000000000000000000000000000000000000009485855230600486015284602460209687935afa9b8c156135d357889c613600575b50613312828d612a90565b91156135dd5750602460608660335460081c168851928380927f39ebf8230000000000000000000000000000000000000000000000000000000082523060048301525afa9081156135d3579084918991613544575b500151918282111561347057509061337e9161302e565b98613389888b612a90565b9384151580613467575b6133a1575b50505050505050565b6133b46133af84938761302e565b6142f4565b506034541692602486518095819382523060048301525afa93841561345e5750849361342e575b505081106133ee575b8080808080613398565b9192828692961160001461340857505092905b38806133e4565b909491856134159161302e565b91508082101561342757505b90613401565b9050613421565b9080929350813d8311613457575b6134468183612187565b81010312610f0f57519038806133db565b503d61343c565b513d86823e3d90fd5b50848210613393565b9a995061347c9161302e565b97613487888a612a90565b938415158061353b575b61349e5750505050505050565b6134ac6133af84938761302e565b506034541692602486518095819382523060048301525afa93841561345e5750849361350b575b505081106134e5578080808080613398565b919282859295116000146134fe575050919038806133e4565b909391846134159161302e565b9080929350813d8311613534575b6135238183612187565b81010312610f0f57519038806134d3565b503d613519565b50848210613491565b9150506060813d82116135cb575b8161355f60609383612187565b81010312610f0b578651906060820182811067ffffffffffffffff82111761359e57885280518252808501518286015287015187820152839038613367565b60248a7f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b3d9150613552565b87513d8a823e3d90fd5b955050505050508592939450949094116135f8575b50829190565b9150386135f2565b909b508381813d8311613628575b6136188183612187565b81010312610f0b57519a38613307565b503d61360e565b60405190606554808352826020918282019060656000527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c7936000905b82821061368257505050612e1192500383612187565b855473ffffffffffffffffffffffffffffffffffffffff168452600195860195889550938101939091019061366c565b7f80000000000000000000000000000000000000000000000000000000000000008114612a615760000390565b81810392916000138015828513169184121617612a6157565b60ff60335416613c735761370a61362f565b8060c052518060a05215613c735780518101906020818184019303126120e457602081015167ffffffffffffffff918282116120e457019180603f840112156120e45760208301519161375c836121c8565b9361376a6040519586612187565b8385526040602086019460051b8201019283116120e457604001925b8284106142035750505050600090606060e05280516141f0575b506000906000608052600090816024602073ffffffffffffffffffffffffffffffffffffffff60345416604051928380927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa9081156141e357608051916141ab575b50608051908182908260c05151917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061385d613847856121c8565b946138556040519687612187565b8086526121c8565b0136602085013760c05151937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60805190603554915b878110613f1b5750505085613d37575b5050505050505010600014613b6e575050600090815b60a0518110156139d75760006138d18260e05161324f565b51126138e6575b6138e190613222565b6138b9565b9160006138fe6138f88560e05161324f565b516136b2565b602073ffffffffffffffffffffffffffffffffffffffff6139218760c05161324f565b511660246139346138f88960e05161324f565b60405195869384927f2e1a7d4d00000000000000000000000000000000000000000000000000000000845260048401525af19182156139cb57600092613995575b509161398761398d926138e19461302e565b90612a90565b9290506138d8565b90916020823d6020116139c3575b816139b060209383612187565b8101031261025e57505190613987613975565b3d91506139a3565b6040513d6000823e3d90fd5b50906066548111613b44576000905b60a051821015613b4057806139fd8360e05161324f565b511315613afe57613a1a90613a148360e05161324f565b516136df565b613a268260e05161324f565b52600090613a7c73ffffffffffffffffffffffffffffffffffffffff6034541673ffffffffffffffffffffffffffffffffffffffff613a678460c05161324f565b5116613a758460e05161324f565b5191612db2565b73ffffffffffffffffffffffffffffffffffffffff613a9d8260c05161324f565b5116803b15610f0f578280916004604051809481937fd0e30db00000000000000000000000000000000000000000000000000000000083525af18015613af35790613aed92916114085750613222565b906139e6565b6040513d85823e3d90fd5b906000613b0d8260e05161324f565b5113613b1d575b613aed90613222565b90613b38613aed91613b318460e05161324f565b519061302e565b919050613b14565b5050565b60046040517f5c3810af000000000000000000000000000000000000000000000000000000008152fd5b613ca8575b5073ffffffffffffffffffffffffffffffffffffffff603454166040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152602081602481855afa9081156139cb57600091613c76575b5080613bdb575050565b613c0a9173ffffffffffffffffffffffffffffffffffffffff613c0260805160c05161324f565b511690612db2565b73ffffffffffffffffffffffffffffffffffffffff613c2d60805160c05161324f565b5116803b156120e457600080916004604051809481937fd0e30db00000000000000000000000000000000000000000000000000000000083525af180156139cb57613172575b50565b906020823d602011613ca0575b81613c9060209383612187565b8101031261025e57505138613bd1565b3d9150613c83565b602073ffffffffffffffffffffffffffffffffffffffff613ccd60009360c05161324f565b51166004604051809481937f853828b60000000000000000000000000000000000000000000000000000000083525af180156139cb5715613b7357613d299060203d602011613d30575b613d218183612187565b810190612e13565b5038613b73565b503d613d17565b94965088958695869590915b818710613d97575050505050505080851180613d8a575b15613d79575050613d6d9060019361421c565b388080808080806138a3565b613d859291945061421c565b613d6d565b50600160c0515111613d5a565b909192939495966080518814600014613ed057613dc19061398783613dbc8988612a90565b612a4e565b9684151580613ec6575b613de4575b613dd990613222565b959493929190613d43565b9a613df885613df38887612a90565b612a90565b73ffffffffffffffffffffffffffffffffffffffff613e1b60805160c05161324f565b5116906020613e2a8989612a90565b6024604051809581937fa7d385e200000000000000000000000000000000000000000000000000000000835260048301525afa918215613ebb578b92613e85575b5091613987613e7d92613dd994612a4e565b9b9050613dd0565b9091506020813d602011613eb3575b81613ea160209383612187565b810103126105f7575190613987613e6b565b3d9150613e94565b6040513d8d823e3d90fd5b5060018311613dcb565b878d03613ef557613eef613dd991613ee88a8a61324f565b5190612a90565b97613222565b613f15889c613ee8613f0e613dd994613ee88d8d61324f565b9a8a61324f565b9b613222565b602498602073ffffffffffffffffffffffffffffffffffffffff613f418460c05161324f565b51166040519b8c80927fa7d385e20000000000000000000000000000000000000000000000000000000082528b60048301525afa998a1561419e578e9a614169575b50600490602073ffffffffffffffffffffffffffffffffffffffff613faa8560c05161324f565b5116604051938480927fc1590cd70000000000000000000000000000000000000000000000000000000082525afa9182156140e9578f92614133575b5081613ff191612a90565b998b8111614123575b50600a8481020484036140f65783600a028111614021575b5061401c90613222565b613893565b6004602073ffffffffffffffffffffffffffffffffffffffff6140468560c05161324f565b5116604051928380927f57ded9c90000000000000000000000000000000000000000000000000000000082525afa9081156140e9578f916140b7575b5061408d8282612a4e565b614097848b61324f565b528381106140a6575b50614012565b925094509c5061401c8d90386140a0565b90506020813d6020116140e1575b816140d260209383612187565b81010312610f07575138614082565b3d91506140c5565b8f604051903d90823e3d90fd5b60248e7f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b60808390529a5093508338613ffa565b9091506020813d602011614161575b8161414f60209383612187565b81010312610f07575190613ff1613fe6565b3d9150614142565b9099506020813d602011614196575b8161418560209383612187565b81010312610dea5751986004613f83565b3d9150614178565b8e604051903d90823e3d90fd5b90506020813d6020116141db575b816141c660209383612187565b810103126141d557513861380c565b60805180fd5b3d91506141b9565b6040513d608051823e3d90fd5b6141fa915061497e565b60e052386137a0565b835182811681036120e457815260209384019301613786565b8115614226570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6040516020908181019067ffffffffffffffff928183108484111761212057929082604052600081526040519360408501918180870152518092526060850193926000905b8382106142db575050505050906110de81612e1193037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282612187565b845181168652948201949382019360019091019061429a565b6000806142ff61362f565b92835192831561461d57606654948583106146145781959395935b614324818561302e565b87101561460b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff968397845b8881106144c457505073ffffffffffffffffffffffffffffffffffffffff978861437b828661324f565b51166040998a51928380937f5be9b2d3000000000000000000000000000000000000000000000000000000008252602094859160049788915afa9081156144ba57899161449d575b501561448e57602483926143d88e938a61324f565b511694896143e6888d61302e565b935196879485937f2e1a7d4d0000000000000000000000000000000000000000000000000000000085528401525af1998a156112455750859961445a575b50506144338861443992612a90565b95613222565b96156144505760068710156144505795939561431a565b5050505091505090565b9080929950813d8311614487575b6144728183612187565b8101031261123a575196614433614439614424565b503d614468565b50505050965050505050505090565b6144b49150843d8611613d3057613d218183612187565b386143c3565b8d513d8b823e3d90fd5b73ffffffffffffffffffffffffffffffffffffffff806144e4838861324f565b5116906040918251918280927f5be9b2d3000000000000000000000000000000000000000000000000000000008252602093849160049687915afa908115614601578b916145e4575b50614545575b5050505061454090613222565b614351565b8190614551868b61324f565b51168451938480927f57ded9c90000000000000000000000000000000000000000000000000000000082525afa9283156145db575088926145ad575b505082811061459f575b808080614533565b915098506145408990614597565b90809250813d83116145d4575b6145c48183612187565b8101031261051f5751388061458d565b503d6145ba565b513d8a823e3d90fd5b6145fb9150833d8511613d3057613d218183612187565b3861452d565b85513d8d823e3d90fd5b50505050505090565b50935050505090565b935050505090565b6024602073ffffffffffffffffffffffffffffffffffffffff60345416604051928380927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa9081156139cb576000916146b8575b50818110614692575090600090565b80613df36133af6146a3938561302e565b8181106146b1575090600090565b9160009150565b906020823d82116146e1575b816146d160209383612187565b8101031261025e57505138614683565b3d91506146c4565b604051906080820182811067ffffffffffffffff8211176121205760405260006060838181528260208201528260408201520152565b600060655481905b80821061473357505090565b909161473e836121e0565b9054906040918251917fc1590cd70000000000000000000000000000000000000000000000000000000083528260048173ffffffffffffffffffffffffffffffffffffffff602095869560031b1c165afa92831561317b57506000926147ba575b50506147ae906147b492612a90565b92613222565b90614727565b81819392933d83116147e4575b6147d18183612187565b8101031261025e575051816147ae61479f565b503d6147c7565b6024906147f661471f565b602073ffffffffffffffffffffffffffffffffffffffff60345416604051948580927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa9283156139cb57600093614861575b509161485e9192612a90565b90565b6020813d821161488c575b8161487960209383612187565b8101031261123a5751925061485e614852565b3d915061486c565b61489c6147eb565b908115614978576000916065549280935b8085106148c0575061485e92935061421c565b906148ca856121e0565b9054906040918251917f116ac4a30000000000000000000000000000000000000000000000000000000083528260048173ffffffffffffffffffffffffffffffffffffffff602095869560031b1c165afa92831561317b5750600092614947575b505061493a9061494092612a90565b94613222565b93906148ad565b81819392933d8311614971575b61495e8183612187565b8101031261025e5750518161493a61492b565b503d614954565b60009150565b600090600091606554614990816121c8565b926040916149a083519586612187565b8085527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06149cd826121c8565b016020903682880137859683518303614c11576149e86147eb565b968715614c0357509291908380935b838510614a4257505050505061271003614a19575090614a169161421c565b91565b600490517f6edcc523000000000000000000000000000000000000000000000000000000008152fd5b9091929396612710614a80614a6d67ffffffffffffffff9889614a658d8861324f565b511690612a90565b97614a788b8661324f565b51168b612a4e565b04614a8a896121e0565b9190548951927fc1590cd70000000000000000000000000000000000000000000000000000000084526004938881868173ffffffffffffffffffffffffffffffffffffffff8097600397881b1c165afa908115614bf957918f8a94928f948b91614bae575b50846024949392614b0e614b06614b14948b6136df565b97889261324f565b526121e0565b9054911b1c16948c5195869384927fa7d385e20000000000000000000000000000000000000000000000000000000084528301525afa918215614ba4578592614b73575b5091613987613eef92614b6a94612a4e565b939291906149f7565b9091508581813d8311614b9d575b614b8b8183612187565b8101031261159e575190613987614b58565b503d614b81565b89513d87823e3d90fd5b9395929450505081813d8311614bf2575b614bc98183612187565b81010312610f0b5788928f92614b148f8095614b0e614b06602497519450505092939450614aef565b503d614bbf565b8c513d8a823e3d90fd5b989750955050505050509190565b600485517fcdeedcbd000000000000000000000000000000000000000000000000000000008152fd5b614c4261362f565b9081519160005b838110614c7a5760046040517f30990b67000000000000000000000000000000000000000000000000000000008152fd5b73ffffffffffffffffffffffffffffffffffffffff80614c9a838561324f565b511690808516918214614cb7575050614cb290613222565b614c49565b90946000945081614cca8486959661324f565b511692604094855180957f853828b600000000000000000000000000000000000000000000000000000000825260209687918160049b8c925af18015614ed257614eb5575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff92838101908111614e875784818303614e66575b5050505060659081548015614e3857849392910190614d88614d66836121e0565b73ffffffffffffffffffffffffffffffffffffffff82549160031b1b19169055565b55603454169360248451809681937f70a0823100000000000000000000000000000000000000000000000000000000835230908301525afa91821561317b5750600091614e0c575b509050614dff575b7f95c84dbc5fd872c46b0e4290775a1a4ea1c8d760f9e4d38f48ba71b6f9a667db600080a2565b614e07614255565b614dd8565b82813d8311614e31575b614e208183612187565b8101031261025e5750518038614dd0565b503d614e16565b6031877f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b614e766116b292614e7e9561324f565b5116916121e0565b38808084614d45565b6011887f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b614ecb90863d8811613d3057613d218183612187565b5038614d0f565b87513d6000823e3d90fd5b614ee561362f565b9081519160005b838110614f1d5760046040517f30990b67000000000000000000000000000000000000000000000000000000008152fd5b73ffffffffffffffffffffffffffffffffffffffff80614f3d838561324f565b511690808516918214614f5a575050614f5590613222565b614eec565b90946000945081614f6d8486959661324f565b511692604094855180957f853828b600000000000000000000000000000000000000000000000000000000825260209687918160049b8c925af1908115614ed257600091615039575b5015615011577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff92838101908111614e875784818303614e66575050505060659081548015614e3857849392910190614d88614d66836121e0565b8686517fa1248235000000000000000000000000000000000000000000000000000000008152fd5b6150509150863d8811613d3057613d218183612187565b38614fb656fea2646970667358221220253f687410d062e3d20cc43e53ef42861f85e0c45153a61314a7003d37c12c3d64736f6c63430008110033",
  "devdoc": {
    "author": "Angle Labs, Inc.",
    "details": "This strategy works by taking plugins designed for standard lending platforms and automatically chooses to invest its funds in the best platforms to generate yield. The allocation is greedy and may be sub-optimal so there is an additional option to manually set positions",
    "kind": "dev",
    "methods": {
      "addGuardian(address)": {
        "details": "This internal function has to be put in this file because `AccessControl` is not defined in `PoolManagerInternal`",
        "params": {
          "_guardian": "New guardian address"
        }
      },
      "addLender(address)": {
        "details": "Governor, guardian or `PoolManager` only",
        "params": {
          "newLender": "The adapter to the added lending platform"
        }
      },
      "estimatedAPR()": {
        "details": "It's computed by doing: `sum(nav * apr) / totalNav`"
      },
      "estimatedAPR(uint64[])": {
        "params": {
          "shares": "List of shares (in bps of the nav) that should be allocated to each lender"
        }
      },
      "forceRemoveLender(address)": {
        "params": {
          "lender": "The address of the adapter to the lending platform to remove"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "harvest(bytes)": {
        "details": "Since this function is permissionless, strategy implementations should be made to remain safe regardless of the data that is passed in the call"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,address,address[])": {
        "params": {
          "_poolManager": "Address of the `PoolManager` lending to this strategy",
          "governor": "Address with governor privilege",
          "guardian": "Address of the guardian"
        }
      },
      "isActive()": {
        "returns": {
          "_0": "True if the strategy is actively managing a position."
        }
      },
      "lendStatuses()": {
        "returns": {
          "_0": "Returns the status of all lenders attached the strategy"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeGuardian(address)": {
        "params": {
          "guardian": "Old guardian address to revoke"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeRemoveLender(address)": {
        "params": {
          "lender": "The address of the adapter to the lending platform to remove"
        }
      },
      "setDebtThreshold(uint256)": {
        "details": "By default this is 0, meaning any losses would cause a harvest which will subsequently report the loss to the Manager for tracking.",
        "params": {
          "_debtThreshold": "How big of a loss this Strategy may carry without"
        }
      },
      "setEmergencyExit()": {
        "details": "This may only be called by the `PoolManager`, because when calling this the `PoolManager` should at the same time update the debt ratioThis function can only be called once by the `PoolManager` contractSee `poolManager.setEmergencyExit()` and `harvest()` for further details."
      },
      "setWithdrawalThreshold(uint256)": {
        "details": "governor, guardian or `PoolManager` only",
        "params": {
          "_threshold": "New withdrawal threshold"
        }
      },
      "sweep(address,address)": {
        "details": "Implement `_protectedTokens()` to specify any additional tokens that should be protected from sweeping in addition to `want`.",
        "params": {
          "_token": "The token to transfer out of this `PoolManager`.",
          "to": "Address to send the tokens to."
        }
      },
      "withdraw(uint256)": {
        "details": "This may only be called by the `PoolManager`",
        "params": {
          "_amountNeeded": "How much `want` to withdraw."
        },
        "returns": {
          "_loss": "Any realized losses",
          "amountFreed": "How much `want` withdrawn."
        }
      }
    },
    "title": "OptimizerAPRStrategy",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "GUARDIAN_ROLE()": {
        "notice": "Role for guardians and governors - keccak256(\"GUARDIAN_ROLE\")"
      },
      "KEEPER_ROLE()": {
        "notice": "Role for keepers - keccak256(\"KEEPER_ROLE\")"
      },
      "POOLMANAGER_ROLE()": {
        "notice": "Role for `PoolManager` only - keccak256(\"POOLMANAGER_ROLE\")"
      },
      "addGuardian(address)": {
        "notice": "Adds a new guardian address and echoes the change to the contracts that interact with this collateral `PoolManager`"
      },
      "addLender(address)": {
        "notice": "Add lenders for the strategy to choose between"
      },
      "debtThreshold()": {
        "notice": "Use this to adjust the threshold at which running a debt causes a harvest trigger. See `setDebtThreshold()` for more details"
      },
      "emergencyExit()": {
        "notice": "See note on `setEmergencyExit()`"
      },
      "estimatedAPR()": {
        "notice": "Returns the weighted apr of all lenders"
      },
      "estimatedAPR(uint64[])": {
        "notice": "Returns the weighted apr in an hypothetical world where the strategy splits its nav in respect to shares"
      },
      "estimatedTotalAssets()": {
        "notice": "View function to check the total assets managed by the strategy"
      },
      "forceRemoveLender(address)": {
        "notice": "Removes a lending platform even if total withdrawal is impossible"
      },
      "harvest()": {
        "notice": "Harvests the Strategy, recognizing any profits or losses and adjusting the Strategy's position."
      },
      "harvest(bytes)": {
        "notice": "Same as the function above with a `data` parameter to help adjust the position"
      },
      "harvest(uint256)": {
        "notice": "Same as above with a `borrowInit` parameter to help in case of the convergence of the `adjustPosition` method"
      },
      "initialize(address,address,address,address[])": {
        "notice": "Constructor of the `Strategy`"
      },
      "isActive()": {
        "notice": "Provides an indication of whether this strategy is currently \"active\" in that it is managing an active position, or will manage a position in the future. This should correlate to `harvest()` activity, so that Harvest events can be tracked externally by indexing agents."
      },
      "lendStatuses()": {
        "notice": "View function to check the current state of the strategy"
      },
      "lentTotalAssets()": {
        "notice": "View function to check the total assets lent"
      },
      "numLenders()": {
        "notice": "View function to check the number of lending platforms"
      },
      "poolManager()": {
        "notice": "Reference to the protocol's collateral `PoolManager`"
      },
      "revokeGuardian(address)": {
        "notice": "Revokes the guardian role and propagates the change to other contracts"
      },
      "safeRemoveLender(address)": {
        "notice": "Removes a lending platform and fails if total withdrawal is impossible"
      },
      "setDebtThreshold(uint256)": {
        "notice": "Sets how far the Strategy can go into loss without a harvest and report being required."
      },
      "setEmergencyExit()": {
        "notice": "Activates emergency exit. Once activated, the Strategy will exit its position upon the next harvest, depositing all funds into the Manager as quickly as is reasonable given on-chain conditions."
      },
      "setWithdrawalThreshold(uint256)": {
        "notice": "Changes the withdrawal threshold"
      },
      "sweep(address,address)": {
        "notice": "Removes tokens from this Strategy that are not the type of tokens managed by this Strategy. This may be used in case of accidentally sending the wrong kind of token to this Strategy. Tokens will be sent to `governance()`. This will fail if an attempt is made to sweep `want`, or any tokens that are protected by this Strategy. This may only be called by governance."
      },
      "want()": {
        "notice": "Reference to the ERC20 farmed by this strategy"
      },
      "wantBase()": {
        "notice": "Base of the ERC20 token farmed by this strategy"
      },
      "withdraw(uint256)": {
        "notice": "Withdraws `_amountNeeded` to `poolManager`."
      }
    },
    "notice": "A lender optimisation strategy for any ERC20 asset, leveraging multiple lenders at once",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 52,
        "contract": "contracts/strategies/OptimizerAPR/OptimizerAPRStrategy.sol:OptimizerAPRStrategy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 55,
        "contract": "contracts/strategies/OptimizerAPR/OptimizerAPRStrategy.sol:OptimizerAPRStrategy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4391,
        "contract": "contracts/strategies/OptimizerAPR/OptimizerAPRStrategy.sol:OptimizerAPRStrategy",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4386_storage)"
      },
      {
        "astId": 4677,
        "contract": "contracts/strategies/OptimizerAPR/OptimizerAPRStrategy.sol:OptimizerAPRStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14545,
        "contract": "contracts/strategies/OptimizerAPR/OptimizerAPRStrategy.sol:OptimizerAPRStrategy",
        "label": "emergencyExit",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 14549,
        "contract": "contracts/strategies/OptimizerAPR/OptimizerAPRStrategy.sol:OptimizerAPRStrategy",
        "label": "poolManager",
        "offset": 1,
        "slot": "51",
        "type": "t_contract(IPoolManager)5511"
      },
      {
        "astId": 14553,
        "contract": "contracts/strategies/OptimizerAPR/OptimizerAPRStrategy.sol:OptimizerAPRStrategy",
        "label": "want",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(IERC20)2219"
      },
      {
        "astId": 14556,
        "contract": "contracts/strategies/OptimizerAPR/OptimizerAPRStrategy.sol:OptimizerAPRStrategy",
        "label": "wantBase",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 14559,
        "contract": "contracts/strategies/OptimizerAPR/OptimizerAPRStrategy.sol:OptimizerAPRStrategy",
        "label": "debtThreshold",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 14563,
        "contract": "contracts/strategies/OptimizerAPR/OptimizerAPRStrategy.sol:OptimizerAPRStrategy",
        "label": "__gapBaseStrategy",
        "offset": 0,
        "slot": "55",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 16496,
        "contract": "contracts/strategies/OptimizerAPR/OptimizerAPRStrategy.sol:OptimizerAPRStrategy",
        "label": "lenders",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_contract(IGenericLender)5439)dyn_storage"
      },
      {
        "astId": 16498,
        "contract": "contracts/strategies/OptimizerAPR/OptimizerAPRStrategy.sol:OptimizerAPRStrategy",
        "label": "withdrawalThreshold",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IGenericLender)5439)dyn_storage": {
        "base": "t_contract(IGenericLender)5439",
        "encoding": "dynamic_array",
        "label": "contract IGenericLender[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2219": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IGenericLender)5439": {
        "encoding": "inplace",
        "label": "contract IGenericLender",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolManager)5511": {
        "encoding": "inplace",
        "label": "contract IPoolManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4386_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlAngleUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4386_storage"
      },
      "t_struct(RoleData)4386_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlAngleUpgradeable.RoleData",
        "members": [
          {
            "astId": 4383,
            "contract": "contracts/strategies/OptimizerAPR/OptimizerAPRStrategy.sol:OptimizerAPRStrategy",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 4385,
            "contract": "contracts/strategies/OptimizerAPR/OptimizerAPRStrategy.sol:OptimizerAPRStrategy",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}